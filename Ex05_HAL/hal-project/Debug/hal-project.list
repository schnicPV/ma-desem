
hal-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bbc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000758  08007d4c  08007d4c  00017d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084a4  080084a4  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080084a4  080084a4  000184a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084ac  080084ac  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080084ac  080084ac  000184ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080084b4  080084b4  000184b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080084bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  2000007c  08008538  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ec  08008538  000203ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ad60  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006152  00000000  00000000  0003ae0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f0  00000000  00000000  00040f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001338  00000000  00000000  00042450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c684  00000000  00000000  00043788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018a4d  00000000  00000000  0006fe0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f82c0  00000000  00000000  00088859  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00180b19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006350  00000000  00000000  00180b6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007d34 	.word	0x08007d34

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08007d34 	.word	0x08007d34

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f000 fade 	bl	8000b48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f80c 	bl	80005a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 f88c 	bl	80006ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000594:	f000 f85a 	bl	800064c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  XF_init(10);                      // Initialize XF
 8000598:	200a      	movs	r0, #10
 800059a:	f003 fec1 	bl	8004320 <XF_init>
  Factory_buildApplication();       // Build application
 800059e:	f003 fb17 	bl	8003bd0 <Factory_buildApplication>
  XF_start();                       // Start the XF (will not return)
 80005a2:	f003 fec8 	bl	8004336 <XF_start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a6:	e7fe      	b.n	80005a6 <main+0x22>

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b096      	sub	sp, #88	; 0x58
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 0314 	add.w	r3, r7, #20
 80005b2:	2244      	movs	r2, #68	; 0x44
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f006 f9e6 	bl	8006988 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	463b      	mov	r3, r7
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005ca:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005ce:	f000 fe7d 	bl	80012cc <HAL_PWREx_ControlVoltageScaling>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005d8:	f000 f8d0 	bl	800077c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005dc:	2302      	movs	r3, #2
 80005de:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e6:	2310      	movs	r3, #16
 80005e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ea:	2302      	movs	r3, #2
 80005ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ee:	2302      	movs	r3, #2
 80005f0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005f2:	2301      	movs	r3, #1
 80005f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005f6:	230a      	movs	r3, #10
 80005f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005fa:	2307      	movs	r3, #7
 80005fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005fe:	2302      	movs	r3, #2
 8000600:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000602:	2302      	movs	r3, #2
 8000604:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000606:	f107 0314 	add.w	r3, r7, #20
 800060a:	4618      	mov	r0, r3
 800060c:	f000 feb4 	bl	8001378 <HAL_RCC_OscConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000616:	f000 f8b1 	bl	800077c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061a:	230f      	movs	r3, #15
 800061c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061e:	2303      	movs	r3, #3
 8000620:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000626:	2300      	movs	r3, #0
 8000628:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800062a:	2300      	movs	r3, #0
 800062c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800062e:	463b      	mov	r3, r7
 8000630:	2104      	movs	r1, #4
 8000632:	4618      	mov	r0, r3
 8000634:	f001 fa88 	bl	8001b48 <HAL_RCC_ClockConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800063e:	f000 f89d 	bl	800077c <Error_Handler>
  }
}
 8000642:	bf00      	nop
 8000644:	3758      	adds	r7, #88	; 0x58
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
	...

0800064c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000650:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 8000652:	4a15      	ldr	r2, [pc, #84]	; (80006a8 <MX_USART2_UART_Init+0x5c>)
 8000654:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000656:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 8000658:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800065c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800065e:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 8000672:	220c      	movs	r2, #12
 8000674:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000676:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 8000678:	2200      	movs	r2, #0
 800067a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800067c:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 800067e:	2200      	movs	r2, #0
 8000680:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000682:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 8000684:	2200      	movs	r2, #0
 8000686:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 800068a:	2200      	movs	r2, #0
 800068c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800068e:	4805      	ldr	r0, [pc, #20]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 8000690:	f002 f91c 	bl	80028cc <HAL_UART_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800069a:	f000 f86f 	bl	800077c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000098 	.word	0x20000098
 80006a8:	40004400 	.word	0x40004400

080006ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08a      	sub	sp, #40	; 0x28
 80006b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
 80006c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c2:	4b2b      	ldr	r3, [pc, #172]	; (8000770 <MX_GPIO_Init+0xc4>)
 80006c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c6:	4a2a      	ldr	r2, [pc, #168]	; (8000770 <MX_GPIO_Init+0xc4>)
 80006c8:	f043 0304 	orr.w	r3, r3, #4
 80006cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ce:	4b28      	ldr	r3, [pc, #160]	; (8000770 <MX_GPIO_Init+0xc4>)
 80006d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d2:	f003 0304 	and.w	r3, r3, #4
 80006d6:	613b      	str	r3, [r7, #16]
 80006d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006da:	4b25      	ldr	r3, [pc, #148]	; (8000770 <MX_GPIO_Init+0xc4>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006de:	4a24      	ldr	r2, [pc, #144]	; (8000770 <MX_GPIO_Init+0xc4>)
 80006e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006e6:	4b22      	ldr	r3, [pc, #136]	; (8000770 <MX_GPIO_Init+0xc4>)
 80006e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f2:	4b1f      	ldr	r3, [pc, #124]	; (8000770 <MX_GPIO_Init+0xc4>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f6:	4a1e      	ldr	r2, [pc, #120]	; (8000770 <MX_GPIO_Init+0xc4>)
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006fe:	4b1c      	ldr	r3, [pc, #112]	; (8000770 <MX_GPIO_Init+0xc4>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800070a:	4b19      	ldr	r3, [pc, #100]	; (8000770 <MX_GPIO_Init+0xc4>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070e:	4a18      	ldr	r2, [pc, #96]	; (8000770 <MX_GPIO_Init+0xc4>)
 8000710:	f043 0302 	orr.w	r3, r3, #2
 8000714:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000716:	4b16      	ldr	r3, [pc, #88]	; (8000770 <MX_GPIO_Init+0xc4>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071a:	f003 0302 	and.w	r3, r3, #2
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	2120      	movs	r1, #32
 8000726:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800072a:	f000 fda9 	bl	8001280 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800072e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <MX_GPIO_Init+0xc8>)
 8000736:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	4619      	mov	r1, r3
 8000742:	480d      	ldr	r0, [pc, #52]	; (8000778 <MX_GPIO_Init+0xcc>)
 8000744:	f000 fbf2 	bl	8000f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000748:	2320      	movs	r3, #32
 800074a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074c:	2301      	movs	r3, #1
 800074e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000754:	2300      	movs	r3, #0
 8000756:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	4619      	mov	r1, r3
 800075e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000762:	f000 fbe3 	bl	8000f2c <HAL_GPIO_Init>

}
 8000766:	bf00      	nop
 8000768:	3728      	adds	r7, #40	; 0x28
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40021000 	.word	0x40021000
 8000774:	10210000 	.word	0x10210000
 8000778:	48000800 	.word	0x48000800

0800077c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000780:	b672      	cpsid	i
}
 8000782:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000784:	e7fe      	b.n	8000784 <Error_Handler+0x8>
	...

08000788 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078e:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <HAL_MspInit+0x44>)
 8000790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000792:	4a0e      	ldr	r2, [pc, #56]	; (80007cc <HAL_MspInit+0x44>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6613      	str	r3, [r2, #96]	; 0x60
 800079a:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <HAL_MspInit+0x44>)
 800079c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <HAL_MspInit+0x44>)
 80007a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007aa:	4a08      	ldr	r2, [pc, #32]	; (80007cc <HAL_MspInit+0x44>)
 80007ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b0:	6593      	str	r3, [r2, #88]	; 0x58
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <HAL_MspInit+0x44>)
 80007b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	40021000 	.word	0x40021000

080007d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b0ac      	sub	sp, #176	; 0xb0
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	2288      	movs	r2, #136	; 0x88
 80007ee:	2100      	movs	r1, #0
 80007f0:	4618      	mov	r0, r3
 80007f2:	f006 f8c9 	bl	8006988 <memset>
  if(huart->Instance==USART2)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a21      	ldr	r2, [pc, #132]	; (8000880 <HAL_UART_MspInit+0xb0>)
 80007fc:	4293      	cmp	r3, r2
 80007fe:	d13b      	bne.n	8000878 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000800:	2302      	movs	r3, #2
 8000802:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000804:	2300      	movs	r3, #0
 8000806:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	4618      	mov	r0, r3
 800080e:	f001 fba1 	bl	8001f54 <HAL_RCCEx_PeriphCLKConfig>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000818:	f7ff ffb0 	bl	800077c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800081c:	4b19      	ldr	r3, [pc, #100]	; (8000884 <HAL_UART_MspInit+0xb4>)
 800081e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000820:	4a18      	ldr	r2, [pc, #96]	; (8000884 <HAL_UART_MspInit+0xb4>)
 8000822:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000826:	6593      	str	r3, [r2, #88]	; 0x58
 8000828:	4b16      	ldr	r3, [pc, #88]	; (8000884 <HAL_UART_MspInit+0xb4>)
 800082a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800082c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000830:	613b      	str	r3, [r7, #16]
 8000832:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000834:	4b13      	ldr	r3, [pc, #76]	; (8000884 <HAL_UART_MspInit+0xb4>)
 8000836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000838:	4a12      	ldr	r2, [pc, #72]	; (8000884 <HAL_UART_MspInit+0xb4>)
 800083a:	f043 0301 	orr.w	r3, r3, #1
 800083e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000840:	4b10      	ldr	r3, [pc, #64]	; (8000884 <HAL_UART_MspInit+0xb4>)
 8000842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000844:	f003 0301 	and.w	r3, r3, #1
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800084c:	230c      	movs	r3, #12
 800084e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000852:	2302      	movs	r3, #2
 8000854:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800085e:	2303      	movs	r3, #3
 8000860:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000864:	2307      	movs	r3, #7
 8000866:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800086e:	4619      	mov	r1, r3
 8000870:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000874:	f000 fb5a 	bl	8000f2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000878:	bf00      	nop
 800087a:	37b0      	adds	r7, #176	; 0xb0
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40004400 	.word	0x40004400
 8000884:	40021000 	.word	0x40021000

08000888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800088c:	e7fe      	b.n	800088c <NMI_Handler+0x4>

0800088e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000892:	e7fe      	b.n	8000892 <HardFault_Handler+0x4>

08000894 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000898:	e7fe      	b.n	8000898 <MemManage_Handler+0x4>

0800089a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800089e:	e7fe      	b.n	800089e <BusFault_Handler+0x4>

080008a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <UsageFault_Handler+0x4>

080008a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr

080008b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr

080008c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr

080008d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d0:	b598      	push	{r3, r4, r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d4:	f000 f994 	bl	8000c00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  // SysTick handler gets called every millisecond (is given by code
  // generated by STM32CubeIDE). Check which interval is needed by the
  // XF (typically slower) and call XF_tick() accordingly.
  if (XF_isRunning() &&
 80008d8:	f003 fd33 	bl	8004342 <XF_isRunning>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d00e      	beq.n	8000900 <SysTick_Handler+0x30>
      (HAL_GetTick() % XF_tickIntervalInMilliseconds()) == 0)
 80008e2:	f000 f9a1 	bl	8000c28 <HAL_GetTick>
 80008e6:	4604      	mov	r4, r0
 80008e8:	f003 fd4a 	bl	8004380 <XF_tickIntervalInMilliseconds>
 80008ec:	4603      	mov	r3, r0
 80008ee:	fbb4 f2f3 	udiv	r2, r4, r3
 80008f2:	fb02 f303 	mul.w	r3, r2, r3
 80008f6:	1ae3      	subs	r3, r4, r3
  if (XF_isRunning() &&
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d101      	bne.n	8000900 <SysTick_Handler+0x30>
  {
    XF_tick();
 80008fc:	f003 fd28 	bl	8004350 <XF_tick>
  }

  /* USER CODE END SysTick_IRQn 1 */
}
 8000900:	bf00      	nop
 8000902:	bd98      	pop	{r3, r4, r7, pc}

08000904 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
	return 1;
 8000908:	2301      	movs	r3, #1
}
 800090a:	4618      	mov	r0, r3
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <_kill>:

int _kill(int pid, int sig)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800091e:	f005 ffbf 	bl	80068a0 <__errno>
 8000922:	4603      	mov	r3, r0
 8000924:	2216      	movs	r2, #22
 8000926:	601a      	str	r2, [r3, #0]
	return -1;
 8000928:	f04f 33ff 	mov.w	r3, #4294967295
}
 800092c:	4618      	mov	r0, r3
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <_exit>:

void _exit (int status)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800093c:	f04f 31ff 	mov.w	r1, #4294967295
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f7ff ffe7 	bl	8000914 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000946:	e7fe      	b.n	8000946 <_exit+0x12>

08000948 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af00      	add	r7, sp, #0
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]
 8000958:	e00a      	b.n	8000970 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800095a:	f3af 8000 	nop.w
 800095e:	4601      	mov	r1, r0
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	1c5a      	adds	r2, r3, #1
 8000964:	60ba      	str	r2, [r7, #8]
 8000966:	b2ca      	uxtb	r2, r1
 8000968:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	3301      	adds	r3, #1
 800096e:	617b      	str	r3, [r7, #20]
 8000970:	697a      	ldr	r2, [r7, #20]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	429a      	cmp	r2, r3
 8000976:	dbf0      	blt.n	800095a <_read+0x12>
	}

return len;
 8000978:	687b      	ldr	r3, [r7, #4]
}
 800097a:	4618      	mov	r0, r3
 800097c:	3718      	adds	r7, #24
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b086      	sub	sp, #24
 8000986:	af00      	add	r7, sp, #0
 8000988:	60f8      	str	r0, [r7, #12]
 800098a:	60b9      	str	r1, [r7, #8]
 800098c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]
 8000992:	e009      	b.n	80009a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	1c5a      	adds	r2, r3, #1
 8000998:	60ba      	str	r2, [r7, #8]
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	4618      	mov	r0, r3
 800099e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	3301      	adds	r3, #1
 80009a6:	617b      	str	r3, [r7, #20]
 80009a8:	697a      	ldr	r2, [r7, #20]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	dbf1      	blt.n	8000994 <_write+0x12>
	}
	return len;
 80009b0:	687b      	ldr	r3, [r7, #4]
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3718      	adds	r7, #24
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <_close>:

int _close(int file)
{
 80009ba:	b480      	push	{r7}
 80009bc:	b083      	sub	sp, #12
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
	return -1;
 80009c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr

080009d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009d2:	b480      	push	{r7}
 80009d4:	b083      	sub	sp, #12
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	6078      	str	r0, [r7, #4]
 80009da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009e2:	605a      	str	r2, [r3, #4]
	return 0;
 80009e4:	2300      	movs	r3, #0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr

080009f2 <_isatty>:

int _isatty(int file)
{
 80009f2:	b480      	push	{r7}
 80009f4:	b083      	sub	sp, #12
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	6078      	str	r0, [r7, #4]
	return 1;
 80009fa:	2301      	movs	r3, #1
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr

08000a08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	60f8      	str	r0, [r7, #12]
 8000a10:	60b9      	str	r1, [r7, #8]
 8000a12:	607a      	str	r2, [r7, #4]
	return 0;
 8000a14:	2300      	movs	r3, #0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3714      	adds	r7, #20
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
	...

08000a24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a2c:	4a14      	ldr	r2, [pc, #80]	; (8000a80 <_sbrk+0x5c>)
 8000a2e:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <_sbrk+0x60>)
 8000a30:	1ad3      	subs	r3, r2, r3
 8000a32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a38:	4b13      	ldr	r3, [pc, #76]	; (8000a88 <_sbrk+0x64>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d102      	bne.n	8000a46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a40:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <_sbrk+0x64>)
 8000a42:	4a12      	ldr	r2, [pc, #72]	; (8000a8c <_sbrk+0x68>)
 8000a44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <_sbrk+0x64>)
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d207      	bcs.n	8000a64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a54:	f005 ff24 	bl	80068a0 <__errno>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	220c      	movs	r2, #12
 8000a5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a62:	e009      	b.n	8000a78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a64:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <_sbrk+0x64>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a6a:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <_sbrk+0x64>)
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4413      	add	r3, r2
 8000a72:	4a05      	ldr	r2, [pc, #20]	; (8000a88 <_sbrk+0x64>)
 8000a74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a76:	68fb      	ldr	r3, [r7, #12]
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3718      	adds	r7, #24
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20018000 	.word	0x20018000
 8000a84:	00000400 	.word	0x00000400
 8000a88:	2000011c 	.word	0x2000011c
 8000a8c:	200003f0 	.word	0x200003f0

08000a90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a94:	4b15      	ldr	r3, [pc, #84]	; (8000aec <SystemInit+0x5c>)
 8000a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a9a:	4a14      	ldr	r2, [pc, #80]	; (8000aec <SystemInit+0x5c>)
 8000a9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000aa4:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <SystemInit+0x60>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a11      	ldr	r2, [pc, #68]	; (8000af0 <SystemInit+0x60>)
 8000aaa:	f043 0301 	orr.w	r3, r3, #1
 8000aae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <SystemInit+0x60>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <SystemInit+0x60>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a0d      	ldr	r2, [pc, #52]	; (8000af0 <SystemInit+0x60>)
 8000abc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000ac0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000ac4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000ac6:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <SystemInit+0x60>)
 8000ac8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000acc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ace:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <SystemInit+0x60>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a07      	ldr	r2, [pc, #28]	; (8000af0 <SystemInit+0x60>)
 8000ad4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ad8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000ada:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <SystemInit+0x60>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	e000ed00 	.word	0xe000ed00
 8000af0:	40021000 	.word	0x40021000

08000af4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000af4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b2c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000af8:	f7ff ffca 	bl	8000a90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000afc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000afe:	e003      	b.n	8000b08 <LoopCopyDataInit>

08000b00 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b00:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b02:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b04:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b06:	3104      	adds	r1, #4

08000b08 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b08:	480a      	ldr	r0, [pc, #40]	; (8000b34 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b0c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b0e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b10:	d3f6      	bcc.n	8000b00 <CopyDataInit>
	ldr	r2, =_sbss
 8000b12:	4a0a      	ldr	r2, [pc, #40]	; (8000b3c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b14:	e002      	b.n	8000b1c <LoopFillZerobss>

08000b16 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b16:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b18:	f842 3b04 	str.w	r3, [r2], #4

08000b1c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b1c:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <LoopForever+0x16>)
	cmp	r2, r3
 8000b1e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b20:	d3f9      	bcc.n	8000b16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b22:	f005 fed5 	bl	80068d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b26:	f7ff fd2d 	bl	8000584 <main>

08000b2a <LoopForever>:

LoopForever:
    b LoopForever
 8000b2a:	e7fe      	b.n	8000b2a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b2c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000b30:	080084bc 	.word	0x080084bc
	ldr	r0, =_sdata
 8000b34:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b38:	2000007c 	.word	0x2000007c
	ldr	r2, =_sbss
 8000b3c:	2000007c 	.word	0x2000007c
	ldr	r3, = _ebss
 8000b40:	200003ec 	.word	0x200003ec

08000b44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b44:	e7fe      	b.n	8000b44 <ADC1_2_IRQHandler>
	...

08000b48 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b52:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <HAL_Init+0x3c>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a0b      	ldr	r2, [pc, #44]	; (8000b84 <HAL_Init+0x3c>)
 8000b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b5c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b5e:	2003      	movs	r0, #3
 8000b60:	f000 f920 	bl	8000da4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b64:	2000      	movs	r0, #0
 8000b66:	f000 f80f 	bl	8000b88 <HAL_InitTick>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d002      	beq.n	8000b76 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b70:	2301      	movs	r3, #1
 8000b72:	71fb      	strb	r3, [r7, #7]
 8000b74:	e001      	b.n	8000b7a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b76:	f7ff fe07 	bl	8000788 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40022000 	.word	0x40022000

08000b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b90:	2300      	movs	r3, #0
 8000b92:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b94:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <HAL_InitTick+0x6c>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d023      	beq.n	8000be4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b9c:	4b16      	ldr	r3, [pc, #88]	; (8000bf8 <HAL_InitTick+0x70>)
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <HAL_InitTick+0x6c>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000baa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f000 f91d 	bl	8000df2 <HAL_SYSTICK_Config>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d10f      	bne.n	8000bde <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2b0f      	cmp	r3, #15
 8000bc2:	d809      	bhi.n	8000bd8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	6879      	ldr	r1, [r7, #4]
 8000bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bcc:	f000 f8f5 	bl	8000dba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bd0:	4a0a      	ldr	r2, [pc, #40]	; (8000bfc <HAL_InitTick+0x74>)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6013      	str	r3, [r2, #0]
 8000bd6:	e007      	b.n	8000be8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	73fb      	strb	r3, [r7, #15]
 8000bdc:	e004      	b.n	8000be8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	73fb      	strb	r3, [r7, #15]
 8000be2:	e001      	b.n	8000be8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000be4:	2301      	movs	r3, #1
 8000be6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3710      	adds	r7, #16
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000008 	.word	0x20000008
 8000bf8:	20000000 	.word	0x20000000
 8000bfc:	20000004 	.word	0x20000004

08000c00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <HAL_IncTick+0x20>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	461a      	mov	r2, r3
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <HAL_IncTick+0x24>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4413      	add	r3, r2
 8000c10:	4a04      	ldr	r2, [pc, #16]	; (8000c24 <HAL_IncTick+0x24>)
 8000c12:	6013      	str	r3, [r2, #0]
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	20000008 	.word	0x20000008
 8000c24:	20000120 	.word	0x20000120

08000c28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c2c:	4b03      	ldr	r3, [pc, #12]	; (8000c3c <HAL_GetTick+0x14>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	20000120 	.word	0x20000120

08000c40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f003 0307 	and.w	r3, r3, #7
 8000c4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <__NVIC_SetPriorityGrouping+0x44>)
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c56:	68ba      	ldr	r2, [r7, #8]
 8000c58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c72:	4a04      	ldr	r2, [pc, #16]	; (8000c84 <__NVIC_SetPriorityGrouping+0x44>)
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	60d3      	str	r3, [r2, #12]
}
 8000c78:	bf00      	nop
 8000c7a:	3714      	adds	r7, #20
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c8c:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	0a1b      	lsrs	r3, r3, #8
 8000c92:	f003 0307 	and.w	r3, r3, #7
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	6039      	str	r1, [r7, #0]
 8000cae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	db0a      	blt.n	8000cce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	b2da      	uxtb	r2, r3
 8000cbc:	490c      	ldr	r1, [pc, #48]	; (8000cf0 <__NVIC_SetPriority+0x4c>)
 8000cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc2:	0112      	lsls	r2, r2, #4
 8000cc4:	b2d2      	uxtb	r2, r2
 8000cc6:	440b      	add	r3, r1
 8000cc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ccc:	e00a      	b.n	8000ce4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	b2da      	uxtb	r2, r3
 8000cd2:	4908      	ldr	r1, [pc, #32]	; (8000cf4 <__NVIC_SetPriority+0x50>)
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	f003 030f 	and.w	r3, r3, #15
 8000cda:	3b04      	subs	r3, #4
 8000cdc:	0112      	lsls	r2, r2, #4
 8000cde:	b2d2      	uxtb	r2, r2
 8000ce0:	440b      	add	r3, r1
 8000ce2:	761a      	strb	r2, [r3, #24]
}
 8000ce4:	bf00      	nop
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	e000e100 	.word	0xe000e100
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b089      	sub	sp, #36	; 0x24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	f1c3 0307 	rsb	r3, r3, #7
 8000d12:	2b04      	cmp	r3, #4
 8000d14:	bf28      	it	cs
 8000d16:	2304      	movcs	r3, #4
 8000d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	3304      	adds	r3, #4
 8000d1e:	2b06      	cmp	r3, #6
 8000d20:	d902      	bls.n	8000d28 <NVIC_EncodePriority+0x30>
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	3b03      	subs	r3, #3
 8000d26:	e000      	b.n	8000d2a <NVIC_EncodePriority+0x32>
 8000d28:	2300      	movs	r3, #0
 8000d2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	43da      	mvns	r2, r3
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	401a      	ands	r2, r3
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d40:	f04f 31ff 	mov.w	r1, #4294967295
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4a:	43d9      	mvns	r1, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d50:	4313      	orrs	r3, r2
         );
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3724      	adds	r7, #36	; 0x24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
	...

08000d60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d70:	d301      	bcc.n	8000d76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d72:	2301      	movs	r3, #1
 8000d74:	e00f      	b.n	8000d96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d76:	4a0a      	ldr	r2, [pc, #40]	; (8000da0 <SysTick_Config+0x40>)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d7e:	210f      	movs	r1, #15
 8000d80:	f04f 30ff 	mov.w	r0, #4294967295
 8000d84:	f7ff ff8e 	bl	8000ca4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d88:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <SysTick_Config+0x40>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d8e:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <SysTick_Config+0x40>)
 8000d90:	2207      	movs	r2, #7
 8000d92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	e000e010 	.word	0xe000e010

08000da4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f7ff ff47 	bl	8000c40 <__NVIC_SetPriorityGrouping>
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b086      	sub	sp, #24
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	60b9      	str	r1, [r7, #8]
 8000dc4:	607a      	str	r2, [r7, #4]
 8000dc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dcc:	f7ff ff5c 	bl	8000c88 <__NVIC_GetPriorityGrouping>
 8000dd0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	68b9      	ldr	r1, [r7, #8]
 8000dd6:	6978      	ldr	r0, [r7, #20]
 8000dd8:	f7ff ff8e 	bl	8000cf8 <NVIC_EncodePriority>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000de2:	4611      	mov	r1, r2
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff ff5d 	bl	8000ca4 <__NVIC_SetPriority>
}
 8000dea:	bf00      	nop
 8000dec:	3718      	adds	r7, #24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f7ff ffb0 	bl	8000d60 <SysTick_Config>
 8000e00:	4603      	mov	r3, r0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b086      	sub	sp, #24
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	60f8      	str	r0, [r7, #12]
 8000e12:	60b9      	str	r1, [r7, #8]
 8000e14:	607a      	str	r2, [r7, #4]
 8000e16:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d101      	bne.n	8000e2a <HAL_DMA_Start_IT+0x20>
 8000e26:	2302      	movs	r3, #2
 8000e28:	e04b      	b.n	8000ec2 <HAL_DMA_Start_IT+0xb8>
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d13a      	bne.n	8000eb4 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	2202      	movs	r2, #2
 8000e42:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f022 0201 	bic.w	r2, r2, #1
 8000e5a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	68b9      	ldr	r1, [r7, #8]
 8000e62:	68f8      	ldr	r0, [r7, #12]
 8000e64:	f000 f831 	bl	8000eca <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d008      	beq.n	8000e82 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f042 020e 	orr.w	r2, r2, #14
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	e00f      	b.n	8000ea2 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f022 0204 	bic.w	r2, r2, #4
 8000e90:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f042 020a 	orr.w	r2, r2, #10
 8000ea0:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f042 0201 	orr.w	r2, r2, #1
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	e005      	b.n	8000ec0 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000ec0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	b085      	sub	sp, #20
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	60f8      	str	r0, [r7, #12]
 8000ed2:	60b9      	str	r1, [r7, #8]
 8000ed4:	607a      	str	r2, [r7, #4]
 8000ed6:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000edc:	f003 021c 	and.w	r2, r3, #28
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	fa01 f202 	lsl.w	r2, r1, r2
 8000eea:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	683a      	ldr	r2, [r7, #0]
 8000ef2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	2b10      	cmp	r3, #16
 8000efa:	d108      	bne.n	8000f0e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	68ba      	ldr	r2, [r7, #8]
 8000f0a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000f0c:	e007      	b.n	8000f1e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	60da      	str	r2, [r3, #12]
}
 8000f1e:	bf00      	nop
 8000f20:	3714      	adds	r7, #20
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
	...

08000f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b087      	sub	sp, #28
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f36:	2300      	movs	r3, #0
 8000f38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f3a:	e17f      	b.n	800123c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	2101      	movs	r1, #1
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	fa01 f303 	lsl.w	r3, r1, r3
 8000f48:	4013      	ands	r3, r2
 8000f4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	f000 8171 	beq.w	8001236 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d00b      	beq.n	8000f74 <HAL_GPIO_Init+0x48>
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d007      	beq.n	8000f74 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f68:	2b11      	cmp	r3, #17
 8000f6a:	d003      	beq.n	8000f74 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	2b12      	cmp	r3, #18
 8000f72:	d130      	bne.n	8000fd6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	2203      	movs	r2, #3
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	68da      	ldr	r2, [r3, #12]
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000faa:	2201      	movs	r2, #1
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	091b      	lsrs	r3, r3, #4
 8000fc0:	f003 0201 	and.w	r2, r3, #1
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f003 0303 	and.w	r3, r3, #3
 8000fde:	2b03      	cmp	r3, #3
 8000fe0:	d118      	bne.n	8001014 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000fe8:	2201      	movs	r2, #1
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	08db      	lsrs	r3, r3, #3
 8000ffe:	f003 0201 	and.w	r2, r3, #1
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	4313      	orrs	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	2203      	movs	r2, #3
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4013      	ands	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	689a      	ldr	r2, [r3, #8]
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4313      	orrs	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	2b02      	cmp	r3, #2
 800104a:	d003      	beq.n	8001054 <HAL_GPIO_Init+0x128>
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	2b12      	cmp	r3, #18
 8001052:	d123      	bne.n	800109c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	08da      	lsrs	r2, r3, #3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3208      	adds	r2, #8
 800105c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001060:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	f003 0307 	and.w	r3, r3, #7
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	220f      	movs	r2, #15
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	691a      	ldr	r2, [r3, #16]
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4313      	orrs	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	08da      	lsrs	r2, r3, #3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	3208      	adds	r2, #8
 8001096:	6939      	ldr	r1, [r7, #16]
 8001098:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	2203      	movs	r2, #3
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4013      	ands	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f003 0203 	and.w	r2, r3, #3
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	f000 80ac 	beq.w	8001236 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010de:	4b5f      	ldr	r3, [pc, #380]	; (800125c <HAL_GPIO_Init+0x330>)
 80010e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010e2:	4a5e      	ldr	r2, [pc, #376]	; (800125c <HAL_GPIO_Init+0x330>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6613      	str	r3, [r2, #96]	; 0x60
 80010ea:	4b5c      	ldr	r3, [pc, #368]	; (800125c <HAL_GPIO_Init+0x330>)
 80010ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010f6:	4a5a      	ldr	r2, [pc, #360]	; (8001260 <HAL_GPIO_Init+0x334>)
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	089b      	lsrs	r3, r3, #2
 80010fc:	3302      	adds	r3, #2
 80010fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001102:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	f003 0303 	and.w	r3, r3, #3
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	220f      	movs	r2, #15
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	4013      	ands	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001120:	d025      	beq.n	800116e <HAL_GPIO_Init+0x242>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a4f      	ldr	r2, [pc, #316]	; (8001264 <HAL_GPIO_Init+0x338>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d01f      	beq.n	800116a <HAL_GPIO_Init+0x23e>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a4e      	ldr	r2, [pc, #312]	; (8001268 <HAL_GPIO_Init+0x33c>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d019      	beq.n	8001166 <HAL_GPIO_Init+0x23a>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a4d      	ldr	r2, [pc, #308]	; (800126c <HAL_GPIO_Init+0x340>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d013      	beq.n	8001162 <HAL_GPIO_Init+0x236>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a4c      	ldr	r2, [pc, #304]	; (8001270 <HAL_GPIO_Init+0x344>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d00d      	beq.n	800115e <HAL_GPIO_Init+0x232>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a4b      	ldr	r2, [pc, #300]	; (8001274 <HAL_GPIO_Init+0x348>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d007      	beq.n	800115a <HAL_GPIO_Init+0x22e>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a4a      	ldr	r2, [pc, #296]	; (8001278 <HAL_GPIO_Init+0x34c>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d101      	bne.n	8001156 <HAL_GPIO_Init+0x22a>
 8001152:	2306      	movs	r3, #6
 8001154:	e00c      	b.n	8001170 <HAL_GPIO_Init+0x244>
 8001156:	2307      	movs	r3, #7
 8001158:	e00a      	b.n	8001170 <HAL_GPIO_Init+0x244>
 800115a:	2305      	movs	r3, #5
 800115c:	e008      	b.n	8001170 <HAL_GPIO_Init+0x244>
 800115e:	2304      	movs	r3, #4
 8001160:	e006      	b.n	8001170 <HAL_GPIO_Init+0x244>
 8001162:	2303      	movs	r3, #3
 8001164:	e004      	b.n	8001170 <HAL_GPIO_Init+0x244>
 8001166:	2302      	movs	r3, #2
 8001168:	e002      	b.n	8001170 <HAL_GPIO_Init+0x244>
 800116a:	2301      	movs	r3, #1
 800116c:	e000      	b.n	8001170 <HAL_GPIO_Init+0x244>
 800116e:	2300      	movs	r3, #0
 8001170:	697a      	ldr	r2, [r7, #20]
 8001172:	f002 0203 	and.w	r2, r2, #3
 8001176:	0092      	lsls	r2, r2, #2
 8001178:	4093      	lsls	r3, r2
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	4313      	orrs	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001180:	4937      	ldr	r1, [pc, #220]	; (8001260 <HAL_GPIO_Init+0x334>)
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	089b      	lsrs	r3, r3, #2
 8001186:	3302      	adds	r3, #2
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800118e:	4b3b      	ldr	r3, [pc, #236]	; (800127c <HAL_GPIO_Init+0x350>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	43db      	mvns	r3, r3
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	4013      	ands	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d003      	beq.n	80011b2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011b2:	4a32      	ldr	r2, [pc, #200]	; (800127c <HAL_GPIO_Init+0x350>)
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80011b8:	4b30      	ldr	r3, [pc, #192]	; (800127c <HAL_GPIO_Init+0x350>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	43db      	mvns	r3, r3
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	4013      	ands	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d003      	beq.n	80011dc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	4313      	orrs	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011dc:	4a27      	ldr	r2, [pc, #156]	; (800127c <HAL_GPIO_Init+0x350>)
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011e2:	4b26      	ldr	r3, [pc, #152]	; (800127c <HAL_GPIO_Init+0x350>)
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	43db      	mvns	r3, r3
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	4013      	ands	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4313      	orrs	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001206:	4a1d      	ldr	r2, [pc, #116]	; (800127c <HAL_GPIO_Init+0x350>)
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800120c:	4b1b      	ldr	r3, [pc, #108]	; (800127c <HAL_GPIO_Init+0x350>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	43db      	mvns	r3, r3
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	4013      	ands	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d003      	beq.n	8001230 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	4313      	orrs	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001230:	4a12      	ldr	r2, [pc, #72]	; (800127c <HAL_GPIO_Init+0x350>)
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	3301      	adds	r3, #1
 800123a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	fa22 f303 	lsr.w	r3, r2, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	f47f ae78 	bne.w	8000f3c <HAL_GPIO_Init+0x10>
  }
}
 800124c:	bf00      	nop
 800124e:	bf00      	nop
 8001250:	371c      	adds	r7, #28
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	40021000 	.word	0x40021000
 8001260:	40010000 	.word	0x40010000
 8001264:	48000400 	.word	0x48000400
 8001268:	48000800 	.word	0x48000800
 800126c:	48000c00 	.word	0x48000c00
 8001270:	48001000 	.word	0x48001000
 8001274:	48001400 	.word	0x48001400
 8001278:	48001800 	.word	0x48001800
 800127c:	40010400 	.word	0x40010400

08001280 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	460b      	mov	r3, r1
 800128a:	807b      	strh	r3, [r7, #2]
 800128c:	4613      	mov	r3, r2
 800128e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001290:	787b      	ldrb	r3, [r7, #1]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001296:	887a      	ldrh	r2, [r7, #2]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800129c:	e002      	b.n	80012a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800129e:	887a      	ldrh	r2, [r7, #2]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80012b4:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80012bc:	4618      	mov	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	40007000 	.word	0x40007000

080012cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012da:	d130      	bne.n	800133e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80012dc:	4b23      	ldr	r3, [pc, #140]	; (800136c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012e8:	d038      	beq.n	800135c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012ea:	4b20      	ldr	r3, [pc, #128]	; (800136c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012f2:	4a1e      	ldr	r2, [pc, #120]	; (800136c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012fa:	4b1d      	ldr	r3, [pc, #116]	; (8001370 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2232      	movs	r2, #50	; 0x32
 8001300:	fb02 f303 	mul.w	r3, r2, r3
 8001304:	4a1b      	ldr	r2, [pc, #108]	; (8001374 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001306:	fba2 2303 	umull	r2, r3, r2, r3
 800130a:	0c9b      	lsrs	r3, r3, #18
 800130c:	3301      	adds	r3, #1
 800130e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001310:	e002      	b.n	8001318 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	3b01      	subs	r3, #1
 8001316:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001318:	4b14      	ldr	r3, [pc, #80]	; (800136c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800131a:	695b      	ldr	r3, [r3, #20]
 800131c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001324:	d102      	bne.n	800132c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1f2      	bne.n	8001312 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800132c:	4b0f      	ldr	r3, [pc, #60]	; (800136c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800132e:	695b      	ldr	r3, [r3, #20]
 8001330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001338:	d110      	bne.n	800135c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e00f      	b.n	800135e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001346:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800134a:	d007      	beq.n	800135c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800134c:	4b07      	ldr	r3, [pc, #28]	; (800136c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001354:	4a05      	ldr	r2, [pc, #20]	; (800136c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001356:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800135a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3714      	adds	r7, #20
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	40007000 	.word	0x40007000
 8001370:	20000000 	.word	0x20000000
 8001374:	431bde83 	.word	0x431bde83

08001378 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b088      	sub	sp, #32
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d101      	bne.n	800138a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e3d8      	b.n	8001b3c <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800138a:	4b97      	ldr	r3, [pc, #604]	; (80015e8 <HAL_RCC_OscConfig+0x270>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f003 030c 	and.w	r3, r3, #12
 8001392:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001394:	4b94      	ldr	r3, [pc, #592]	; (80015e8 <HAL_RCC_OscConfig+0x270>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	f003 0303 	and.w	r3, r3, #3
 800139c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0310 	and.w	r3, r3, #16
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f000 80e4 	beq.w	8001574 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d007      	beq.n	80013c2 <HAL_RCC_OscConfig+0x4a>
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	2b0c      	cmp	r3, #12
 80013b6:	f040 808b 	bne.w	80014d0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	f040 8087 	bne.w	80014d0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013c2:	4b89      	ldr	r3, [pc, #548]	; (80015e8 <HAL_RCC_OscConfig+0x270>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d005      	beq.n	80013da <HAL_RCC_OscConfig+0x62>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	699b      	ldr	r3, [r3, #24]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e3b0      	b.n	8001b3c <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6a1a      	ldr	r2, [r3, #32]
 80013de:	4b82      	ldr	r3, [pc, #520]	; (80015e8 <HAL_RCC_OscConfig+0x270>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0308 	and.w	r3, r3, #8
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d004      	beq.n	80013f4 <HAL_RCC_OscConfig+0x7c>
 80013ea:	4b7f      	ldr	r3, [pc, #508]	; (80015e8 <HAL_RCC_OscConfig+0x270>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013f2:	e005      	b.n	8001400 <HAL_RCC_OscConfig+0x88>
 80013f4:	4b7c      	ldr	r3, [pc, #496]	; (80015e8 <HAL_RCC_OscConfig+0x270>)
 80013f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013fa:	091b      	lsrs	r3, r3, #4
 80013fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001400:	4293      	cmp	r3, r2
 8001402:	d223      	bcs.n	800144c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a1b      	ldr	r3, [r3, #32]
 8001408:	4618      	mov	r0, r3
 800140a:	f000 fd43 	bl	8001e94 <RCC_SetFlashLatencyFromMSIRange>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e391      	b.n	8001b3c <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001418:	4b73      	ldr	r3, [pc, #460]	; (80015e8 <HAL_RCC_OscConfig+0x270>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a72      	ldr	r2, [pc, #456]	; (80015e8 <HAL_RCC_OscConfig+0x270>)
 800141e:	f043 0308 	orr.w	r3, r3, #8
 8001422:	6013      	str	r3, [r2, #0]
 8001424:	4b70      	ldr	r3, [pc, #448]	; (80015e8 <HAL_RCC_OscConfig+0x270>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a1b      	ldr	r3, [r3, #32]
 8001430:	496d      	ldr	r1, [pc, #436]	; (80015e8 <HAL_RCC_OscConfig+0x270>)
 8001432:	4313      	orrs	r3, r2
 8001434:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001436:	4b6c      	ldr	r3, [pc, #432]	; (80015e8 <HAL_RCC_OscConfig+0x270>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	021b      	lsls	r3, r3, #8
 8001444:	4968      	ldr	r1, [pc, #416]	; (80015e8 <HAL_RCC_OscConfig+0x270>)
 8001446:	4313      	orrs	r3, r2
 8001448:	604b      	str	r3, [r1, #4]
 800144a:	e025      	b.n	8001498 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800144c:	4b66      	ldr	r3, [pc, #408]	; (80015e8 <HAL_RCC_OscConfig+0x270>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a65      	ldr	r2, [pc, #404]	; (80015e8 <HAL_RCC_OscConfig+0x270>)
 8001452:	f043 0308 	orr.w	r3, r3, #8
 8001456:	6013      	str	r3, [r2, #0]
 8001458:	4b63      	ldr	r3, [pc, #396]	; (80015e8 <HAL_RCC_OscConfig+0x270>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a1b      	ldr	r3, [r3, #32]
 8001464:	4960      	ldr	r1, [pc, #384]	; (80015e8 <HAL_RCC_OscConfig+0x270>)
 8001466:	4313      	orrs	r3, r2
 8001468:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800146a:	4b5f      	ldr	r3, [pc, #380]	; (80015e8 <HAL_RCC_OscConfig+0x270>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	021b      	lsls	r3, r3, #8
 8001478:	495b      	ldr	r1, [pc, #364]	; (80015e8 <HAL_RCC_OscConfig+0x270>)
 800147a:	4313      	orrs	r3, r2
 800147c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d109      	bne.n	8001498 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6a1b      	ldr	r3, [r3, #32]
 8001488:	4618      	mov	r0, r3
 800148a:	f000 fd03 	bl	8001e94 <RCC_SetFlashLatencyFromMSIRange>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e351      	b.n	8001b3c <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001498:	f000 fc38 	bl	8001d0c <HAL_RCC_GetSysClockFreq>
 800149c:	4602      	mov	r2, r0
 800149e:	4b52      	ldr	r3, [pc, #328]	; (80015e8 <HAL_RCC_OscConfig+0x270>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	091b      	lsrs	r3, r3, #4
 80014a4:	f003 030f 	and.w	r3, r3, #15
 80014a8:	4950      	ldr	r1, [pc, #320]	; (80015ec <HAL_RCC_OscConfig+0x274>)
 80014aa:	5ccb      	ldrb	r3, [r1, r3]
 80014ac:	f003 031f 	and.w	r3, r3, #31
 80014b0:	fa22 f303 	lsr.w	r3, r2, r3
 80014b4:	4a4e      	ldr	r2, [pc, #312]	; (80015f0 <HAL_RCC_OscConfig+0x278>)
 80014b6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014b8:	4b4e      	ldr	r3, [pc, #312]	; (80015f4 <HAL_RCC_OscConfig+0x27c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fb63 	bl	8000b88 <HAL_InitTick>
 80014c2:	4603      	mov	r3, r0
 80014c4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80014c6:	7bfb      	ldrb	r3, [r7, #15]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d052      	beq.n	8001572 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
 80014ce:	e335      	b.n	8001b3c <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d032      	beq.n	800153e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014d8:	4b43      	ldr	r3, [pc, #268]	; (80015e8 <HAL_RCC_OscConfig+0x270>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a42      	ldr	r2, [pc, #264]	; (80015e8 <HAL_RCC_OscConfig+0x270>)
 80014de:	f043 0301 	orr.w	r3, r3, #1
 80014e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014e4:	f7ff fba0 	bl	8000c28 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014ec:	f7ff fb9c 	bl	8000c28 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e31e      	b.n	8001b3c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014fe:	4b3a      	ldr	r3, [pc, #232]	; (80015e8 <HAL_RCC_OscConfig+0x270>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0f0      	beq.n	80014ec <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800150a:	4b37      	ldr	r3, [pc, #220]	; (80015e8 <HAL_RCC_OscConfig+0x270>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a36      	ldr	r2, [pc, #216]	; (80015e8 <HAL_RCC_OscConfig+0x270>)
 8001510:	f043 0308 	orr.w	r3, r3, #8
 8001514:	6013      	str	r3, [r2, #0]
 8001516:	4b34      	ldr	r3, [pc, #208]	; (80015e8 <HAL_RCC_OscConfig+0x270>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a1b      	ldr	r3, [r3, #32]
 8001522:	4931      	ldr	r1, [pc, #196]	; (80015e8 <HAL_RCC_OscConfig+0x270>)
 8001524:	4313      	orrs	r3, r2
 8001526:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001528:	4b2f      	ldr	r3, [pc, #188]	; (80015e8 <HAL_RCC_OscConfig+0x270>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	69db      	ldr	r3, [r3, #28]
 8001534:	021b      	lsls	r3, r3, #8
 8001536:	492c      	ldr	r1, [pc, #176]	; (80015e8 <HAL_RCC_OscConfig+0x270>)
 8001538:	4313      	orrs	r3, r2
 800153a:	604b      	str	r3, [r1, #4]
 800153c:	e01a      	b.n	8001574 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800153e:	4b2a      	ldr	r3, [pc, #168]	; (80015e8 <HAL_RCC_OscConfig+0x270>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a29      	ldr	r2, [pc, #164]	; (80015e8 <HAL_RCC_OscConfig+0x270>)
 8001544:	f023 0301 	bic.w	r3, r3, #1
 8001548:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800154a:	f7ff fb6d 	bl	8000c28 <HAL_GetTick>
 800154e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001550:	e008      	b.n	8001564 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001552:	f7ff fb69 	bl	8000c28 <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b02      	cmp	r3, #2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e2eb      	b.n	8001b3c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001564:	4b20      	ldr	r3, [pc, #128]	; (80015e8 <HAL_RCC_OscConfig+0x270>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	2b00      	cmp	r3, #0
 800156e:	d1f0      	bne.n	8001552 <HAL_RCC_OscConfig+0x1da>
 8001570:	e000      	b.n	8001574 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001572:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	2b00      	cmp	r3, #0
 800157e:	d074      	beq.n	800166a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	2b08      	cmp	r3, #8
 8001584:	d005      	beq.n	8001592 <HAL_RCC_OscConfig+0x21a>
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	2b0c      	cmp	r3, #12
 800158a:	d10e      	bne.n	80015aa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	2b03      	cmp	r3, #3
 8001590:	d10b      	bne.n	80015aa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001592:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <HAL_RCC_OscConfig+0x270>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d064      	beq.n	8001668 <HAL_RCC_OscConfig+0x2f0>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d160      	bne.n	8001668 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e2c8      	b.n	8001b3c <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015b2:	d106      	bne.n	80015c2 <HAL_RCC_OscConfig+0x24a>
 80015b4:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <HAL_RCC_OscConfig+0x270>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a0b      	ldr	r2, [pc, #44]	; (80015e8 <HAL_RCC_OscConfig+0x270>)
 80015ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015be:	6013      	str	r3, [r2, #0]
 80015c0:	e026      	b.n	8001610 <HAL_RCC_OscConfig+0x298>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015ca:	d115      	bne.n	80015f8 <HAL_RCC_OscConfig+0x280>
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <HAL_RCC_OscConfig+0x270>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a05      	ldr	r2, [pc, #20]	; (80015e8 <HAL_RCC_OscConfig+0x270>)
 80015d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015d6:	6013      	str	r3, [r2, #0]
 80015d8:	4b03      	ldr	r3, [pc, #12]	; (80015e8 <HAL_RCC_OscConfig+0x270>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a02      	ldr	r2, [pc, #8]	; (80015e8 <HAL_RCC_OscConfig+0x270>)
 80015de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e2:	6013      	str	r3, [r2, #0]
 80015e4:	e014      	b.n	8001610 <HAL_RCC_OscConfig+0x298>
 80015e6:	bf00      	nop
 80015e8:	40021000 	.word	0x40021000
 80015ec:	0800820c 	.word	0x0800820c
 80015f0:	20000000 	.word	0x20000000
 80015f4:	20000004 	.word	0x20000004
 80015f8:	4ba0      	ldr	r3, [pc, #640]	; (800187c <HAL_RCC_OscConfig+0x504>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a9f      	ldr	r2, [pc, #636]	; (800187c <HAL_RCC_OscConfig+0x504>)
 80015fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001602:	6013      	str	r3, [r2, #0]
 8001604:	4b9d      	ldr	r3, [pc, #628]	; (800187c <HAL_RCC_OscConfig+0x504>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a9c      	ldr	r2, [pc, #624]	; (800187c <HAL_RCC_OscConfig+0x504>)
 800160a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800160e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d013      	beq.n	8001640 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001618:	f7ff fb06 	bl	8000c28 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001620:	f7ff fb02 	bl	8000c28 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b64      	cmp	r3, #100	; 0x64
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e284      	b.n	8001b3c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001632:	4b92      	ldr	r3, [pc, #584]	; (800187c <HAL_RCC_OscConfig+0x504>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d0f0      	beq.n	8001620 <HAL_RCC_OscConfig+0x2a8>
 800163e:	e014      	b.n	800166a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001640:	f7ff faf2 	bl	8000c28 <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001648:	f7ff faee 	bl	8000c28 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b64      	cmp	r3, #100	; 0x64
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e270      	b.n	8001b3c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800165a:	4b88      	ldr	r3, [pc, #544]	; (800187c <HAL_RCC_OscConfig+0x504>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1f0      	bne.n	8001648 <HAL_RCC_OscConfig+0x2d0>
 8001666:	e000      	b.n	800166a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001668:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d060      	beq.n	8001738 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	2b04      	cmp	r3, #4
 800167a:	d005      	beq.n	8001688 <HAL_RCC_OscConfig+0x310>
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	2b0c      	cmp	r3, #12
 8001680:	d119      	bne.n	80016b6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	2b02      	cmp	r3, #2
 8001686:	d116      	bne.n	80016b6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001688:	4b7c      	ldr	r3, [pc, #496]	; (800187c <HAL_RCC_OscConfig+0x504>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001690:	2b00      	cmp	r3, #0
 8001692:	d005      	beq.n	80016a0 <HAL_RCC_OscConfig+0x328>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d101      	bne.n	80016a0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e24d      	b.n	8001b3c <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a0:	4b76      	ldr	r3, [pc, #472]	; (800187c <HAL_RCC_OscConfig+0x504>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	061b      	lsls	r3, r3, #24
 80016ae:	4973      	ldr	r1, [pc, #460]	; (800187c <HAL_RCC_OscConfig+0x504>)
 80016b0:	4313      	orrs	r3, r2
 80016b2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016b4:	e040      	b.n	8001738 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d023      	beq.n	8001706 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016be:	4b6f      	ldr	r3, [pc, #444]	; (800187c <HAL_RCC_OscConfig+0x504>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a6e      	ldr	r2, [pc, #440]	; (800187c <HAL_RCC_OscConfig+0x504>)
 80016c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ca:	f7ff faad 	bl	8000c28 <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016d2:	f7ff faa9 	bl	8000c28 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e22b      	b.n	8001b3c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016e4:	4b65      	ldr	r3, [pc, #404]	; (800187c <HAL_RCC_OscConfig+0x504>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0f0      	beq.n	80016d2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f0:	4b62      	ldr	r3, [pc, #392]	; (800187c <HAL_RCC_OscConfig+0x504>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	691b      	ldr	r3, [r3, #16]
 80016fc:	061b      	lsls	r3, r3, #24
 80016fe:	495f      	ldr	r1, [pc, #380]	; (800187c <HAL_RCC_OscConfig+0x504>)
 8001700:	4313      	orrs	r3, r2
 8001702:	604b      	str	r3, [r1, #4]
 8001704:	e018      	b.n	8001738 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001706:	4b5d      	ldr	r3, [pc, #372]	; (800187c <HAL_RCC_OscConfig+0x504>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a5c      	ldr	r2, [pc, #368]	; (800187c <HAL_RCC_OscConfig+0x504>)
 800170c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001710:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001712:	f7ff fa89 	bl	8000c28 <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001718:	e008      	b.n	800172c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800171a:	f7ff fa85 	bl	8000c28 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e207      	b.n	8001b3c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800172c:	4b53      	ldr	r3, [pc, #332]	; (800187c <HAL_RCC_OscConfig+0x504>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1f0      	bne.n	800171a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0308 	and.w	r3, r3, #8
 8001740:	2b00      	cmp	r3, #0
 8001742:	d03c      	beq.n	80017be <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	695b      	ldr	r3, [r3, #20]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d01c      	beq.n	8001786 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800174c:	4b4b      	ldr	r3, [pc, #300]	; (800187c <HAL_RCC_OscConfig+0x504>)
 800174e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001752:	4a4a      	ldr	r2, [pc, #296]	; (800187c <HAL_RCC_OscConfig+0x504>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800175c:	f7ff fa64 	bl	8000c28 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001764:	f7ff fa60 	bl	8000c28 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e1e2      	b.n	8001b3c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001776:	4b41      	ldr	r3, [pc, #260]	; (800187c <HAL_RCC_OscConfig+0x504>)
 8001778:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d0ef      	beq.n	8001764 <HAL_RCC_OscConfig+0x3ec>
 8001784:	e01b      	b.n	80017be <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001786:	4b3d      	ldr	r3, [pc, #244]	; (800187c <HAL_RCC_OscConfig+0x504>)
 8001788:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800178c:	4a3b      	ldr	r2, [pc, #236]	; (800187c <HAL_RCC_OscConfig+0x504>)
 800178e:	f023 0301 	bic.w	r3, r3, #1
 8001792:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001796:	f7ff fa47 	bl	8000c28 <HAL_GetTick>
 800179a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800179c:	e008      	b.n	80017b0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800179e:	f7ff fa43 	bl	8000c28 <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e1c5      	b.n	8001b3c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017b0:	4b32      	ldr	r3, [pc, #200]	; (800187c <HAL_RCC_OscConfig+0x504>)
 80017b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1ef      	bne.n	800179e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0304 	and.w	r3, r3, #4
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f000 80a6 	beq.w	8001918 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017cc:	2300      	movs	r3, #0
 80017ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80017d0:	4b2a      	ldr	r3, [pc, #168]	; (800187c <HAL_RCC_OscConfig+0x504>)
 80017d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d10d      	bne.n	80017f8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017dc:	4b27      	ldr	r3, [pc, #156]	; (800187c <HAL_RCC_OscConfig+0x504>)
 80017de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e0:	4a26      	ldr	r2, [pc, #152]	; (800187c <HAL_RCC_OscConfig+0x504>)
 80017e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e6:	6593      	str	r3, [r2, #88]	; 0x58
 80017e8:	4b24      	ldr	r3, [pc, #144]	; (800187c <HAL_RCC_OscConfig+0x504>)
 80017ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f0:	60bb      	str	r3, [r7, #8]
 80017f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017f4:	2301      	movs	r3, #1
 80017f6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017f8:	4b21      	ldr	r3, [pc, #132]	; (8001880 <HAL_RCC_OscConfig+0x508>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001800:	2b00      	cmp	r3, #0
 8001802:	d118      	bne.n	8001836 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001804:	4b1e      	ldr	r3, [pc, #120]	; (8001880 <HAL_RCC_OscConfig+0x508>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a1d      	ldr	r2, [pc, #116]	; (8001880 <HAL_RCC_OscConfig+0x508>)
 800180a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800180e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001810:	f7ff fa0a 	bl	8000c28 <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001818:	f7ff fa06 	bl	8000c28 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e188      	b.n	8001b3c <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800182a:	4b15      	ldr	r3, [pc, #84]	; (8001880 <HAL_RCC_OscConfig+0x508>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001832:	2b00      	cmp	r3, #0
 8001834:	d0f0      	beq.n	8001818 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d108      	bne.n	8001850 <HAL_RCC_OscConfig+0x4d8>
 800183e:	4b0f      	ldr	r3, [pc, #60]	; (800187c <HAL_RCC_OscConfig+0x504>)
 8001840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001844:	4a0d      	ldr	r2, [pc, #52]	; (800187c <HAL_RCC_OscConfig+0x504>)
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800184e:	e029      	b.n	80018a4 <HAL_RCC_OscConfig+0x52c>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	2b05      	cmp	r3, #5
 8001856:	d115      	bne.n	8001884 <HAL_RCC_OscConfig+0x50c>
 8001858:	4b08      	ldr	r3, [pc, #32]	; (800187c <HAL_RCC_OscConfig+0x504>)
 800185a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800185e:	4a07      	ldr	r2, [pc, #28]	; (800187c <HAL_RCC_OscConfig+0x504>)
 8001860:	f043 0304 	orr.w	r3, r3, #4
 8001864:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001868:	4b04      	ldr	r3, [pc, #16]	; (800187c <HAL_RCC_OscConfig+0x504>)
 800186a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800186e:	4a03      	ldr	r2, [pc, #12]	; (800187c <HAL_RCC_OscConfig+0x504>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001878:	e014      	b.n	80018a4 <HAL_RCC_OscConfig+0x52c>
 800187a:	bf00      	nop
 800187c:	40021000 	.word	0x40021000
 8001880:	40007000 	.word	0x40007000
 8001884:	4b91      	ldr	r3, [pc, #580]	; (8001acc <HAL_RCC_OscConfig+0x754>)
 8001886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800188a:	4a90      	ldr	r2, [pc, #576]	; (8001acc <HAL_RCC_OscConfig+0x754>)
 800188c:	f023 0301 	bic.w	r3, r3, #1
 8001890:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001894:	4b8d      	ldr	r3, [pc, #564]	; (8001acc <HAL_RCC_OscConfig+0x754>)
 8001896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800189a:	4a8c      	ldr	r2, [pc, #560]	; (8001acc <HAL_RCC_OscConfig+0x754>)
 800189c:	f023 0304 	bic.w	r3, r3, #4
 80018a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d016      	beq.n	80018da <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ac:	f7ff f9bc 	bl	8000c28 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018b2:	e00a      	b.n	80018ca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018b4:	f7ff f9b8 	bl	8000c28 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e138      	b.n	8001b3c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018ca:	4b80      	ldr	r3, [pc, #512]	; (8001acc <HAL_RCC_OscConfig+0x754>)
 80018cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d0ed      	beq.n	80018b4 <HAL_RCC_OscConfig+0x53c>
 80018d8:	e015      	b.n	8001906 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018da:	f7ff f9a5 	bl	8000c28 <HAL_GetTick>
 80018de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018e0:	e00a      	b.n	80018f8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018e2:	f7ff f9a1 	bl	8000c28 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e121      	b.n	8001b3c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018f8:	4b74      	ldr	r3, [pc, #464]	; (8001acc <HAL_RCC_OscConfig+0x754>)
 80018fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1ed      	bne.n	80018e2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001906:	7ffb      	ldrb	r3, [r7, #31]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d105      	bne.n	8001918 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800190c:	4b6f      	ldr	r3, [pc, #444]	; (8001acc <HAL_RCC_OscConfig+0x754>)
 800190e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001910:	4a6e      	ldr	r2, [pc, #440]	; (8001acc <HAL_RCC_OscConfig+0x754>)
 8001912:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001916:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191c:	2b00      	cmp	r3, #0
 800191e:	f000 810c 	beq.w	8001b3a <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001926:	2b02      	cmp	r3, #2
 8001928:	f040 80d4 	bne.w	8001ad4 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800192c:	4b67      	ldr	r3, [pc, #412]	; (8001acc <HAL_RCC_OscConfig+0x754>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	f003 0203 	and.w	r2, r3, #3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193c:	429a      	cmp	r2, r3
 800193e:	d130      	bne.n	80019a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	3b01      	subs	r3, #1
 800194c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800194e:	429a      	cmp	r2, r3
 8001950:	d127      	bne.n	80019a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800195c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800195e:	429a      	cmp	r2, r3
 8001960:	d11f      	bne.n	80019a2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800196c:	2a07      	cmp	r2, #7
 800196e:	bf14      	ite	ne
 8001970:	2201      	movne	r2, #1
 8001972:	2200      	moveq	r2, #0
 8001974:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001976:	4293      	cmp	r3, r2
 8001978:	d113      	bne.n	80019a2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001984:	085b      	lsrs	r3, r3, #1
 8001986:	3b01      	subs	r3, #1
 8001988:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800198a:	429a      	cmp	r2, r3
 800198c:	d109      	bne.n	80019a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001998:	085b      	lsrs	r3, r3, #1
 800199a:	3b01      	subs	r3, #1
 800199c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800199e:	429a      	cmp	r2, r3
 80019a0:	d06e      	beq.n	8001a80 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	2b0c      	cmp	r3, #12
 80019a6:	d069      	beq.n	8001a7c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80019a8:	4b48      	ldr	r3, [pc, #288]	; (8001acc <HAL_RCC_OscConfig+0x754>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d105      	bne.n	80019c0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80019b4:	4b45      	ldr	r3, [pc, #276]	; (8001acc <HAL_RCC_OscConfig+0x754>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e0bb      	b.n	8001b3c <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80019c4:	4b41      	ldr	r3, [pc, #260]	; (8001acc <HAL_RCC_OscConfig+0x754>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a40      	ldr	r2, [pc, #256]	; (8001acc <HAL_RCC_OscConfig+0x754>)
 80019ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019ce:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019d0:	f7ff f92a 	bl	8000c28 <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d8:	f7ff f926 	bl	8000c28 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e0a8      	b.n	8001b3c <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019ea:	4b38      	ldr	r3, [pc, #224]	; (8001acc <HAL_RCC_OscConfig+0x754>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1f0      	bne.n	80019d8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019f6:	4b35      	ldr	r3, [pc, #212]	; (8001acc <HAL_RCC_OscConfig+0x754>)
 80019f8:	68da      	ldr	r2, [r3, #12]
 80019fa:	4b35      	ldr	r3, [pc, #212]	; (8001ad0 <HAL_RCC_OscConfig+0x758>)
 80019fc:	4013      	ands	r3, r2
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a06:	3a01      	subs	r2, #1
 8001a08:	0112      	lsls	r2, r2, #4
 8001a0a:	4311      	orrs	r1, r2
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a10:	0212      	lsls	r2, r2, #8
 8001a12:	4311      	orrs	r1, r2
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a18:	0852      	lsrs	r2, r2, #1
 8001a1a:	3a01      	subs	r2, #1
 8001a1c:	0552      	lsls	r2, r2, #21
 8001a1e:	4311      	orrs	r1, r2
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a24:	0852      	lsrs	r2, r2, #1
 8001a26:	3a01      	subs	r2, #1
 8001a28:	0652      	lsls	r2, r2, #25
 8001a2a:	4311      	orrs	r1, r2
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a30:	0912      	lsrs	r2, r2, #4
 8001a32:	0452      	lsls	r2, r2, #17
 8001a34:	430a      	orrs	r2, r1
 8001a36:	4925      	ldr	r1, [pc, #148]	; (8001acc <HAL_RCC_OscConfig+0x754>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a3c:	4b23      	ldr	r3, [pc, #140]	; (8001acc <HAL_RCC_OscConfig+0x754>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a22      	ldr	r2, [pc, #136]	; (8001acc <HAL_RCC_OscConfig+0x754>)
 8001a42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a46:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a48:	4b20      	ldr	r3, [pc, #128]	; (8001acc <HAL_RCC_OscConfig+0x754>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	4a1f      	ldr	r2, [pc, #124]	; (8001acc <HAL_RCC_OscConfig+0x754>)
 8001a4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a52:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a54:	f7ff f8e8 	bl	8000c28 <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a5c:	f7ff f8e4 	bl	8000c28 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e066      	b.n	8001b3c <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a6e:	4b17      	ldr	r3, [pc, #92]	; (8001acc <HAL_RCC_OscConfig+0x754>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d0f0      	beq.n	8001a5c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a7a:	e05e      	b.n	8001b3a <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e05d      	b.n	8001b3c <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a80:	4b12      	ldr	r3, [pc, #72]	; (8001acc <HAL_RCC_OscConfig+0x754>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d156      	bne.n	8001b3a <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a8c:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <HAL_RCC_OscConfig+0x754>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a0e      	ldr	r2, [pc, #56]	; (8001acc <HAL_RCC_OscConfig+0x754>)
 8001a92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a96:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a98:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <HAL_RCC_OscConfig+0x754>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	4a0b      	ldr	r2, [pc, #44]	; (8001acc <HAL_RCC_OscConfig+0x754>)
 8001a9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aa2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001aa4:	f7ff f8c0 	bl	8000c28 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aac:	f7ff f8bc 	bl	8000c28 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e03e      	b.n	8001b3c <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001abe:	4b03      	ldr	r3, [pc, #12]	; (8001acc <HAL_RCC_OscConfig+0x754>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d0f0      	beq.n	8001aac <HAL_RCC_OscConfig+0x734>
 8001aca:	e036      	b.n	8001b3a <HAL_RCC_OscConfig+0x7c2>
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	2b0c      	cmp	r3, #12
 8001ad8:	d02d      	beq.n	8001b36 <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ada:	4b1a      	ldr	r3, [pc, #104]	; (8001b44 <HAL_RCC_OscConfig+0x7cc>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a19      	ldr	r2, [pc, #100]	; (8001b44 <HAL_RCC_OscConfig+0x7cc>)
 8001ae0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ae4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001ae6:	4b17      	ldr	r3, [pc, #92]	; (8001b44 <HAL_RCC_OscConfig+0x7cc>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d105      	bne.n	8001afe <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001af2:	4b14      	ldr	r3, [pc, #80]	; (8001b44 <HAL_RCC_OscConfig+0x7cc>)
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	4a13      	ldr	r2, [pc, #76]	; (8001b44 <HAL_RCC_OscConfig+0x7cc>)
 8001af8:	f023 0303 	bic.w	r3, r3, #3
 8001afc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001afe:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <HAL_RCC_OscConfig+0x7cc>)
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	4a10      	ldr	r2, [pc, #64]	; (8001b44 <HAL_RCC_OscConfig+0x7cc>)
 8001b04:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001b08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b0c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b0e:	f7ff f88b 	bl	8000c28 <HAL_GetTick>
 8001b12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b14:	e008      	b.n	8001b28 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b16:	f7ff f887 	bl	8000c28 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e009      	b.n	8001b3c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b28:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <HAL_RCC_OscConfig+0x7cc>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d1f0      	bne.n	8001b16 <HAL_RCC_OscConfig+0x79e>
 8001b34:	e001      	b.n	8001b3a <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e000      	b.n	8001b3c <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3720      	adds	r7, #32
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40021000 	.word	0x40021000

08001b48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d101      	bne.n	8001b5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e0c8      	b.n	8001cee <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b5c:	4b66      	ldr	r3, [pc, #408]	; (8001cf8 <HAL_RCC_ClockConfig+0x1b0>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0307 	and.w	r3, r3, #7
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d910      	bls.n	8001b8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6a:	4b63      	ldr	r3, [pc, #396]	; (8001cf8 <HAL_RCC_ClockConfig+0x1b0>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f023 0207 	bic.w	r2, r3, #7
 8001b72:	4961      	ldr	r1, [pc, #388]	; (8001cf8 <HAL_RCC_ClockConfig+0x1b0>)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b7a:	4b5f      	ldr	r3, [pc, #380]	; (8001cf8 <HAL_RCC_ClockConfig+0x1b0>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	683a      	ldr	r2, [r7, #0]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d001      	beq.n	8001b8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e0b0      	b.n	8001cee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d04c      	beq.n	8001c32 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	2b03      	cmp	r3, #3
 8001b9e:	d107      	bne.n	8001bb0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ba0:	4b56      	ldr	r3, [pc, #344]	; (8001cfc <HAL_RCC_ClockConfig+0x1b4>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d121      	bne.n	8001bf0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e09e      	b.n	8001cee <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d107      	bne.n	8001bc8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bb8:	4b50      	ldr	r3, [pc, #320]	; (8001cfc <HAL_RCC_ClockConfig+0x1b4>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d115      	bne.n	8001bf0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e092      	b.n	8001cee <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d107      	bne.n	8001be0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bd0:	4b4a      	ldr	r3, [pc, #296]	; (8001cfc <HAL_RCC_ClockConfig+0x1b4>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d109      	bne.n	8001bf0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e086      	b.n	8001cee <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001be0:	4b46      	ldr	r3, [pc, #280]	; (8001cfc <HAL_RCC_ClockConfig+0x1b4>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d101      	bne.n	8001bf0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e07e      	b.n	8001cee <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bf0:	4b42      	ldr	r3, [pc, #264]	; (8001cfc <HAL_RCC_ClockConfig+0x1b4>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f023 0203 	bic.w	r2, r3, #3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	493f      	ldr	r1, [pc, #252]	; (8001cfc <HAL_RCC_ClockConfig+0x1b4>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c02:	f7ff f811 	bl	8000c28 <HAL_GetTick>
 8001c06:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c08:	e00a      	b.n	8001c20 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c0a:	f7ff f80d 	bl	8000c28 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e066      	b.n	8001cee <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c20:	4b36      	ldr	r3, [pc, #216]	; (8001cfc <HAL_RCC_ClockConfig+0x1b4>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f003 020c 	and.w	r2, r3, #12
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d1eb      	bne.n	8001c0a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d008      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c3e:	4b2f      	ldr	r3, [pc, #188]	; (8001cfc <HAL_RCC_ClockConfig+0x1b4>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	492c      	ldr	r1, [pc, #176]	; (8001cfc <HAL_RCC_ClockConfig+0x1b4>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c50:	4b29      	ldr	r3, [pc, #164]	; (8001cf8 <HAL_RCC_ClockConfig+0x1b0>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d210      	bcs.n	8001c80 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c5e:	4b26      	ldr	r3, [pc, #152]	; (8001cf8 <HAL_RCC_ClockConfig+0x1b0>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f023 0207 	bic.w	r2, r3, #7
 8001c66:	4924      	ldr	r1, [pc, #144]	; (8001cf8 <HAL_RCC_ClockConfig+0x1b0>)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c6e:	4b22      	ldr	r3, [pc, #136]	; (8001cf8 <HAL_RCC_ClockConfig+0x1b0>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	683a      	ldr	r2, [r7, #0]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d001      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e036      	b.n	8001cee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d008      	beq.n	8001c9e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c8c:	4b1b      	ldr	r3, [pc, #108]	; (8001cfc <HAL_RCC_ClockConfig+0x1b4>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	4918      	ldr	r1, [pc, #96]	; (8001cfc <HAL_RCC_ClockConfig+0x1b4>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0308 	and.w	r3, r3, #8
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d009      	beq.n	8001cbe <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001caa:	4b14      	ldr	r3, [pc, #80]	; (8001cfc <HAL_RCC_ClockConfig+0x1b4>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	4910      	ldr	r1, [pc, #64]	; (8001cfc <HAL_RCC_ClockConfig+0x1b4>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cbe:	f000 f825 	bl	8001d0c <HAL_RCC_GetSysClockFreq>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	4b0d      	ldr	r3, [pc, #52]	; (8001cfc <HAL_RCC_ClockConfig+0x1b4>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	091b      	lsrs	r3, r3, #4
 8001cca:	f003 030f 	and.w	r3, r3, #15
 8001cce:	490c      	ldr	r1, [pc, #48]	; (8001d00 <HAL_RCC_ClockConfig+0x1b8>)
 8001cd0:	5ccb      	ldrb	r3, [r1, r3]
 8001cd2:	f003 031f 	and.w	r3, r3, #31
 8001cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001cda:	4a0a      	ldr	r2, [pc, #40]	; (8001d04 <HAL_RCC_ClockConfig+0x1bc>)
 8001cdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001cde:	4b0a      	ldr	r3, [pc, #40]	; (8001d08 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7fe ff50 	bl	8000b88 <HAL_InitTick>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	72fb      	strb	r3, [r7, #11]

  return status;
 8001cec:	7afb      	ldrb	r3, [r7, #11]
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40022000 	.word	0x40022000
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	0800820c 	.word	0x0800820c
 8001d04:	20000000 	.word	0x20000000
 8001d08:	20000004 	.word	0x20000004

08001d0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b089      	sub	sp, #36	; 0x24
 8001d10:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d12:	2300      	movs	r3, #0
 8001d14:	61fb      	str	r3, [r7, #28]
 8001d16:	2300      	movs	r3, #0
 8001d18:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d1a:	4b3e      	ldr	r3, [pc, #248]	; (8001e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 030c 	and.w	r3, r3, #12
 8001d22:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d24:	4b3b      	ldr	r3, [pc, #236]	; (8001e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	f003 0303 	and.w	r3, r3, #3
 8001d2c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d005      	beq.n	8001d40 <HAL_RCC_GetSysClockFreq+0x34>
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	2b0c      	cmp	r3, #12
 8001d38:	d121      	bne.n	8001d7e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d11e      	bne.n	8001d7e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d40:	4b34      	ldr	r3, [pc, #208]	; (8001e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0308 	and.w	r3, r3, #8
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d107      	bne.n	8001d5c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d4c:	4b31      	ldr	r3, [pc, #196]	; (8001e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d52:	0a1b      	lsrs	r3, r3, #8
 8001d54:	f003 030f 	and.w	r3, r3, #15
 8001d58:	61fb      	str	r3, [r7, #28]
 8001d5a:	e005      	b.n	8001d68 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d5c:	4b2d      	ldr	r3, [pc, #180]	; (8001e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	091b      	lsrs	r3, r3, #4
 8001d62:	f003 030f 	and.w	r3, r3, #15
 8001d66:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d68:	4a2b      	ldr	r2, [pc, #172]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d70:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d10d      	bne.n	8001d94 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d7c:	e00a      	b.n	8001d94 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	2b04      	cmp	r3, #4
 8001d82:	d102      	bne.n	8001d8a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d84:	4b25      	ldr	r3, [pc, #148]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x110>)
 8001d86:	61bb      	str	r3, [r7, #24]
 8001d88:	e004      	b.n	8001d94 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	2b08      	cmp	r3, #8
 8001d8e:	d101      	bne.n	8001d94 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d90:	4b23      	ldr	r3, [pc, #140]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d92:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	2b0c      	cmp	r3, #12
 8001d98:	d134      	bne.n	8001e04 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d9a:	4b1e      	ldr	r3, [pc, #120]	; (8001e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	f003 0303 	and.w	r3, r3, #3
 8001da2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d003      	beq.n	8001db2 <HAL_RCC_GetSysClockFreq+0xa6>
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	2b03      	cmp	r3, #3
 8001dae:	d003      	beq.n	8001db8 <HAL_RCC_GetSysClockFreq+0xac>
 8001db0:	e005      	b.n	8001dbe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001db2:	4b1a      	ldr	r3, [pc, #104]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x110>)
 8001db4:	617b      	str	r3, [r7, #20]
      break;
 8001db6:	e005      	b.n	8001dc4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001db8:	4b19      	ldr	r3, [pc, #100]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x114>)
 8001dba:	617b      	str	r3, [r7, #20]
      break;
 8001dbc:	e002      	b.n	8001dc4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	617b      	str	r3, [r7, #20]
      break;
 8001dc2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001dc4:	4b13      	ldr	r3, [pc, #76]	; (8001e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	091b      	lsrs	r3, r3, #4
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	3301      	adds	r3, #1
 8001dd0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001dd2:	4b10      	ldr	r3, [pc, #64]	; (8001e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	0a1b      	lsrs	r3, r3, #8
 8001dd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ddc:	697a      	ldr	r2, [r7, #20]
 8001dde:	fb03 f202 	mul.w	r2, r3, r2
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001dea:	4b0a      	ldr	r3, [pc, #40]	; (8001e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	0e5b      	lsrs	r3, r3, #25
 8001df0:	f003 0303 	and.w	r3, r3, #3
 8001df4:	3301      	adds	r3, #1
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e02:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e04:	69bb      	ldr	r3, [r7, #24]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3724      	adds	r7, #36	; 0x24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	40021000 	.word	0x40021000
 8001e18:	08008224 	.word	0x08008224
 8001e1c:	00f42400 	.word	0x00f42400
 8001e20:	007a1200 	.word	0x007a1200

08001e24 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e28:	4b03      	ldr	r3, [pc, #12]	; (8001e38 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	20000000 	.word	0x20000000

08001e3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e40:	f7ff fff0 	bl	8001e24 <HAL_RCC_GetHCLKFreq>
 8001e44:	4602      	mov	r2, r0
 8001e46:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	0a1b      	lsrs	r3, r3, #8
 8001e4c:	f003 0307 	and.w	r3, r3, #7
 8001e50:	4904      	ldr	r1, [pc, #16]	; (8001e64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e52:	5ccb      	ldrb	r3, [r1, r3]
 8001e54:	f003 031f 	and.w	r3, r3, #31
 8001e58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40021000 	.word	0x40021000
 8001e64:	0800821c 	.word	0x0800821c

08001e68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e6c:	f7ff ffda 	bl	8001e24 <HAL_RCC_GetHCLKFreq>
 8001e70:	4602      	mov	r2, r0
 8001e72:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	0adb      	lsrs	r3, r3, #11
 8001e78:	f003 0307 	and.w	r3, r3, #7
 8001e7c:	4904      	ldr	r1, [pc, #16]	; (8001e90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e7e:	5ccb      	ldrb	r3, [r1, r3]
 8001e80:	f003 031f 	and.w	r3, r3, #31
 8001e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	0800821c 	.word	0x0800821c

08001e94 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ea0:	4b2a      	ldr	r3, [pc, #168]	; (8001f4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d003      	beq.n	8001eb4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001eac:	f7ff fa00 	bl	80012b0 <HAL_PWREx_GetVoltageRange>
 8001eb0:	6178      	str	r0, [r7, #20]
 8001eb2:	e014      	b.n	8001ede <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001eb4:	4b25      	ldr	r3, [pc, #148]	; (8001f4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb8:	4a24      	ldr	r2, [pc, #144]	; (8001f4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ebe:	6593      	str	r3, [r2, #88]	; 0x58
 8001ec0:	4b22      	ldr	r3, [pc, #136]	; (8001f4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec8:	60fb      	str	r3, [r7, #12]
 8001eca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ecc:	f7ff f9f0 	bl	80012b0 <HAL_PWREx_GetVoltageRange>
 8001ed0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ed2:	4b1e      	ldr	r3, [pc, #120]	; (8001f4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed6:	4a1d      	ldr	r2, [pc, #116]	; (8001f4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ed8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001edc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ee4:	d10b      	bne.n	8001efe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b80      	cmp	r3, #128	; 0x80
 8001eea:	d919      	bls.n	8001f20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2ba0      	cmp	r3, #160	; 0xa0
 8001ef0:	d902      	bls.n	8001ef8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	613b      	str	r3, [r7, #16]
 8001ef6:	e013      	b.n	8001f20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ef8:	2301      	movs	r3, #1
 8001efa:	613b      	str	r3, [r7, #16]
 8001efc:	e010      	b.n	8001f20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2b80      	cmp	r3, #128	; 0x80
 8001f02:	d902      	bls.n	8001f0a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f04:	2303      	movs	r3, #3
 8001f06:	613b      	str	r3, [r7, #16]
 8001f08:	e00a      	b.n	8001f20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2b80      	cmp	r3, #128	; 0x80
 8001f0e:	d102      	bne.n	8001f16 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f10:	2302      	movs	r3, #2
 8001f12:	613b      	str	r3, [r7, #16]
 8001f14:	e004      	b.n	8001f20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b70      	cmp	r3, #112	; 0x70
 8001f1a:	d101      	bne.n	8001f20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f20:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f023 0207 	bic.w	r2, r3, #7
 8001f28:	4909      	ldr	r1, [pc, #36]	; (8001f50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f30:	4b07      	ldr	r3, [pc, #28]	; (8001f50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d001      	beq.n	8001f42 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e000      	b.n	8001f44 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3718      	adds	r7, #24
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	40022000 	.word	0x40022000

08001f54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f60:	2300      	movs	r3, #0
 8001f62:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d041      	beq.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f74:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f78:	d02a      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001f7a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f7e:	d824      	bhi.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f84:	d008      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f8a:	d81e      	bhi.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d00a      	beq.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001f90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f94:	d010      	beq.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001f96:	e018      	b.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f98:	4b86      	ldr	r3, [pc, #536]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	4a85      	ldr	r2, [pc, #532]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fa2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fa4:	e015      	b.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	3304      	adds	r3, #4
 8001faa:	2100      	movs	r1, #0
 8001fac:	4618      	mov	r0, r3
 8001fae:	f000 fabb 	bl	8002528 <RCCEx_PLLSAI1_Config>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fb6:	e00c      	b.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3320      	adds	r3, #32
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f000 fba6 	bl	8002710 <RCCEx_PLLSAI2_Config>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fc8:	e003      	b.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	74fb      	strb	r3, [r7, #19]
      break;
 8001fce:	e000      	b.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001fd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fd2:	7cfb      	ldrb	r3, [r7, #19]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d10b      	bne.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fd8:	4b76      	ldr	r3, [pc, #472]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fde:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fe6:	4973      	ldr	r1, [pc, #460]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001fee:	e001      	b.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ff0:	7cfb      	ldrb	r3, [r7, #19]
 8001ff2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d041      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002004:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002008:	d02a      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800200a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800200e:	d824      	bhi.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002010:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002014:	d008      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002016:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800201a:	d81e      	bhi.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00a      	beq.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002020:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002024:	d010      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002026:	e018      	b.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002028:	4b62      	ldr	r3, [pc, #392]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	4a61      	ldr	r2, [pc, #388]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800202e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002032:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002034:	e015      	b.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	3304      	adds	r3, #4
 800203a:	2100      	movs	r1, #0
 800203c:	4618      	mov	r0, r3
 800203e:	f000 fa73 	bl	8002528 <RCCEx_PLLSAI1_Config>
 8002042:	4603      	mov	r3, r0
 8002044:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002046:	e00c      	b.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3320      	adds	r3, #32
 800204c:	2100      	movs	r1, #0
 800204e:	4618      	mov	r0, r3
 8002050:	f000 fb5e 	bl	8002710 <RCCEx_PLLSAI2_Config>
 8002054:	4603      	mov	r3, r0
 8002056:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002058:	e003      	b.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	74fb      	strb	r3, [r7, #19]
      break;
 800205e:	e000      	b.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002060:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002062:	7cfb      	ldrb	r3, [r7, #19]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d10b      	bne.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002068:	4b52      	ldr	r3, [pc, #328]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800206a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800206e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002076:	494f      	ldr	r1, [pc, #316]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002078:	4313      	orrs	r3, r2
 800207a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800207e:	e001      	b.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002080:	7cfb      	ldrb	r3, [r7, #19]
 8002082:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208c:	2b00      	cmp	r3, #0
 800208e:	f000 80a0 	beq.w	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002092:	2300      	movs	r3, #0
 8002094:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002096:	4b47      	ldr	r3, [pc, #284]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80020a2:	2301      	movs	r3, #1
 80020a4:	e000      	b.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80020a6:	2300      	movs	r3, #0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00d      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ac:	4b41      	ldr	r3, [pc, #260]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b0:	4a40      	ldr	r2, [pc, #256]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020b6:	6593      	str	r3, [r2, #88]	; 0x58
 80020b8:	4b3e      	ldr	r3, [pc, #248]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c0:	60bb      	str	r3, [r7, #8]
 80020c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020c4:	2301      	movs	r3, #1
 80020c6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020c8:	4b3b      	ldr	r3, [pc, #236]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a3a      	ldr	r2, [pc, #232]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020d4:	f7fe fda8 	bl	8000c28 <HAL_GetTick>
 80020d8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020da:	e009      	b.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020dc:	f7fe fda4 	bl	8000c28 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d902      	bls.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	74fb      	strb	r3, [r7, #19]
        break;
 80020ee:	e005      	b.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020f0:	4b31      	ldr	r3, [pc, #196]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0ef      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80020fc:	7cfb      	ldrb	r3, [r7, #19]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d15c      	bne.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002102:	4b2c      	ldr	r3, [pc, #176]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002108:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800210c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d01f      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	429a      	cmp	r2, r3
 800211e:	d019      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002120:	4b24      	ldr	r3, [pc, #144]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002126:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800212a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800212c:	4b21      	ldr	r3, [pc, #132]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800212e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002132:	4a20      	ldr	r2, [pc, #128]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002138:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800213c:	4b1d      	ldr	r3, [pc, #116]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800213e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002142:	4a1c      	ldr	r2, [pc, #112]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002144:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002148:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800214c:	4a19      	ldr	r2, [pc, #100]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b00      	cmp	r3, #0
 800215c:	d016      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215e:	f7fe fd63 	bl	8000c28 <HAL_GetTick>
 8002162:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002164:	e00b      	b.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002166:	f7fe fd5f 	bl	8000c28 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	f241 3288 	movw	r2, #5000	; 0x1388
 8002174:	4293      	cmp	r3, r2
 8002176:	d902      	bls.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	74fb      	strb	r3, [r7, #19]
            break;
 800217c:	e006      	b.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800217e:	4b0d      	ldr	r3, [pc, #52]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d0ec      	beq.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800218c:	7cfb      	ldrb	r3, [r7, #19]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10c      	bne.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002192:	4b08      	ldr	r3, [pc, #32]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002198:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021a2:	4904      	ldr	r1, [pc, #16]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80021aa:	e009      	b.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021ac:	7cfb      	ldrb	r3, [r7, #19]
 80021ae:	74bb      	strb	r3, [r7, #18]
 80021b0:	e006      	b.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80021b2:	bf00      	nop
 80021b4:	40021000 	.word	0x40021000
 80021b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021bc:	7cfb      	ldrb	r3, [r7, #19]
 80021be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021c0:	7c7b      	ldrb	r3, [r7, #17]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d105      	bne.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021c6:	4b9e      	ldr	r3, [pc, #632]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ca:	4a9d      	ldr	r2, [pc, #628]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00a      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021de:	4b98      	ldr	r3, [pc, #608]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e4:	f023 0203 	bic.w	r2, r3, #3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ec:	4994      	ldr	r1, [pc, #592]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00a      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002200:	4b8f      	ldr	r3, [pc, #572]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002206:	f023 020c 	bic.w	r2, r3, #12
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800220e:	498c      	ldr	r1, [pc, #560]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002210:	4313      	orrs	r3, r2
 8002212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0304 	and.w	r3, r3, #4
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00a      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002222:	4b87      	ldr	r3, [pc, #540]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002228:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002230:	4983      	ldr	r1, [pc, #524]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002232:	4313      	orrs	r3, r2
 8002234:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0308 	and.w	r3, r3, #8
 8002240:	2b00      	cmp	r3, #0
 8002242:	d00a      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002244:	4b7e      	ldr	r3, [pc, #504]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800224a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002252:	497b      	ldr	r1, [pc, #492]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002254:	4313      	orrs	r3, r2
 8002256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0310 	and.w	r3, r3, #16
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00a      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002266:	4b76      	ldr	r3, [pc, #472]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800226c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002274:	4972      	ldr	r1, [pc, #456]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002276:	4313      	orrs	r3, r2
 8002278:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0320 	and.w	r3, r3, #32
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00a      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002288:	4b6d      	ldr	r3, [pc, #436]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800228a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002296:	496a      	ldr	r1, [pc, #424]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002298:	4313      	orrs	r3, r2
 800229a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00a      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022aa:	4b65      	ldr	r3, [pc, #404]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b8:	4961      	ldr	r1, [pc, #388]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00a      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80022cc:	4b5c      	ldr	r3, [pc, #368]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022da:	4959      	ldr	r1, [pc, #356]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00a      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022ee:	4b54      	ldr	r3, [pc, #336]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022fc:	4950      	ldr	r1, [pc, #320]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800230c:	2b00      	cmp	r3, #0
 800230e:	d00a      	beq.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002310:	4b4b      	ldr	r3, [pc, #300]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002316:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231e:	4948      	ldr	r1, [pc, #288]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002320:	4313      	orrs	r3, r2
 8002322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00a      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002332:	4b43      	ldr	r3, [pc, #268]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002338:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002340:	493f      	ldr	r1, [pc, #252]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002342:	4313      	orrs	r3, r2
 8002344:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d028      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002354:	4b3a      	ldr	r3, [pc, #232]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800235a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002362:	4937      	ldr	r1, [pc, #220]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002364:	4313      	orrs	r3, r2
 8002366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800236e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002372:	d106      	bne.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002374:	4b32      	ldr	r3, [pc, #200]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	4a31      	ldr	r2, [pc, #196]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800237a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800237e:	60d3      	str	r3, [r2, #12]
 8002380:	e011      	b.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002386:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800238a:	d10c      	bne.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3304      	adds	r3, #4
 8002390:	2101      	movs	r1, #1
 8002392:	4618      	mov	r0, r3
 8002394:	f000 f8c8 	bl	8002528 <RCCEx_PLLSAI1_Config>
 8002398:	4603      	mov	r3, r0
 800239a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800239c:	7cfb      	ldrb	r3, [r7, #19]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80023a2:	7cfb      	ldrb	r3, [r7, #19]
 80023a4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d028      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80023b2:	4b23      	ldr	r3, [pc, #140]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c0:	491f      	ldr	r1, [pc, #124]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023d0:	d106      	bne.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023d2:	4b1b      	ldr	r3, [pc, #108]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	4a1a      	ldr	r2, [pc, #104]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023dc:	60d3      	str	r3, [r2, #12]
 80023de:	e011      	b.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023e8:	d10c      	bne.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	3304      	adds	r3, #4
 80023ee:	2101      	movs	r1, #1
 80023f0:	4618      	mov	r0, r3
 80023f2:	f000 f899 	bl	8002528 <RCCEx_PLLSAI1_Config>
 80023f6:	4603      	mov	r3, r0
 80023f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023fa:	7cfb      	ldrb	r3, [r7, #19]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002400:	7cfb      	ldrb	r3, [r7, #19]
 8002402:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d02b      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002410:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002416:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800241e:	4908      	ldr	r1, [pc, #32]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002420:	4313      	orrs	r3, r2
 8002422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800242a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800242e:	d109      	bne.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002430:	4b03      	ldr	r3, [pc, #12]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	4a02      	ldr	r2, [pc, #8]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002436:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800243a:	60d3      	str	r3, [r2, #12]
 800243c:	e014      	b.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800243e:	bf00      	nop
 8002440:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002448:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800244c:	d10c      	bne.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	3304      	adds	r3, #4
 8002452:	2101      	movs	r1, #1
 8002454:	4618      	mov	r0, r3
 8002456:	f000 f867 	bl	8002528 <RCCEx_PLLSAI1_Config>
 800245a:	4603      	mov	r3, r0
 800245c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800245e:	7cfb      	ldrb	r3, [r7, #19]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002464:	7cfb      	ldrb	r3, [r7, #19]
 8002466:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d02f      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002474:	4b2b      	ldr	r3, [pc, #172]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800247a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002482:	4928      	ldr	r1, [pc, #160]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002484:	4313      	orrs	r3, r2
 8002486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800248e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002492:	d10d      	bne.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3304      	adds	r3, #4
 8002498:	2102      	movs	r1, #2
 800249a:	4618      	mov	r0, r3
 800249c:	f000 f844 	bl	8002528 <RCCEx_PLLSAI1_Config>
 80024a0:	4603      	mov	r3, r0
 80024a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024a4:	7cfb      	ldrb	r3, [r7, #19]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d014      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80024aa:	7cfb      	ldrb	r3, [r7, #19]
 80024ac:	74bb      	strb	r3, [r7, #18]
 80024ae:	e011      	b.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024b8:	d10c      	bne.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	3320      	adds	r3, #32
 80024be:	2102      	movs	r1, #2
 80024c0:	4618      	mov	r0, r3
 80024c2:	f000 f925 	bl	8002710 <RCCEx_PLLSAI2_Config>
 80024c6:	4603      	mov	r3, r0
 80024c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024ca:	7cfb      	ldrb	r3, [r7, #19]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80024d0:	7cfb      	ldrb	r3, [r7, #19]
 80024d2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00a      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80024e0:	4b10      	ldr	r3, [pc, #64]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024ee:	490d      	ldr	r1, [pc, #52]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00b      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002502:	4b08      	ldr	r3, [pc, #32]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002508:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002512:	4904      	ldr	r1, [pc, #16]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002514:	4313      	orrs	r3, r2
 8002516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800251a:	7cbb      	ldrb	r3, [r7, #18]
}
 800251c:	4618      	mov	r0, r3
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40021000 	.word	0x40021000

08002528 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002532:	2300      	movs	r3, #0
 8002534:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002536:	4b75      	ldr	r3, [pc, #468]	; (800270c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	2b00      	cmp	r3, #0
 8002540:	d018      	beq.n	8002574 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002542:	4b72      	ldr	r3, [pc, #456]	; (800270c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	f003 0203 	and.w	r2, r3, #3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	429a      	cmp	r2, r3
 8002550:	d10d      	bne.n	800256e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
       ||
 8002556:	2b00      	cmp	r3, #0
 8002558:	d009      	beq.n	800256e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800255a:	4b6c      	ldr	r3, [pc, #432]	; (800270c <RCCEx_PLLSAI1_Config+0x1e4>)
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	091b      	lsrs	r3, r3, #4
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	1c5a      	adds	r2, r3, #1
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
       ||
 800256a:	429a      	cmp	r2, r3
 800256c:	d047      	beq.n	80025fe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	73fb      	strb	r3, [r7, #15]
 8002572:	e044      	b.n	80025fe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2b03      	cmp	r3, #3
 800257a:	d018      	beq.n	80025ae <RCCEx_PLLSAI1_Config+0x86>
 800257c:	2b03      	cmp	r3, #3
 800257e:	d825      	bhi.n	80025cc <RCCEx_PLLSAI1_Config+0xa4>
 8002580:	2b01      	cmp	r3, #1
 8002582:	d002      	beq.n	800258a <RCCEx_PLLSAI1_Config+0x62>
 8002584:	2b02      	cmp	r3, #2
 8002586:	d009      	beq.n	800259c <RCCEx_PLLSAI1_Config+0x74>
 8002588:	e020      	b.n	80025cc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800258a:	4b60      	ldr	r3, [pc, #384]	; (800270c <RCCEx_PLLSAI1_Config+0x1e4>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d11d      	bne.n	80025d2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800259a:	e01a      	b.n	80025d2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800259c:	4b5b      	ldr	r3, [pc, #364]	; (800270c <RCCEx_PLLSAI1_Config+0x1e4>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d116      	bne.n	80025d6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025ac:	e013      	b.n	80025d6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025ae:	4b57      	ldr	r3, [pc, #348]	; (800270c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d10f      	bne.n	80025da <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025ba:	4b54      	ldr	r3, [pc, #336]	; (800270c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d109      	bne.n	80025da <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025ca:	e006      	b.n	80025da <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	73fb      	strb	r3, [r7, #15]
      break;
 80025d0:	e004      	b.n	80025dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025d2:	bf00      	nop
 80025d4:	e002      	b.n	80025dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025d6:	bf00      	nop
 80025d8:	e000      	b.n	80025dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025da:	bf00      	nop
    }

    if(status == HAL_OK)
 80025dc:	7bfb      	ldrb	r3, [r7, #15]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d10d      	bne.n	80025fe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025e2:	4b4a      	ldr	r3, [pc, #296]	; (800270c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6819      	ldr	r1, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	3b01      	subs	r3, #1
 80025f4:	011b      	lsls	r3, r3, #4
 80025f6:	430b      	orrs	r3, r1
 80025f8:	4944      	ldr	r1, [pc, #272]	; (800270c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025fe:	7bfb      	ldrb	r3, [r7, #15]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d17d      	bne.n	8002700 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002604:	4b41      	ldr	r3, [pc, #260]	; (800270c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a40      	ldr	r2, [pc, #256]	; (800270c <RCCEx_PLLSAI1_Config+0x1e4>)
 800260a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800260e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002610:	f7fe fb0a 	bl	8000c28 <HAL_GetTick>
 8002614:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002616:	e009      	b.n	800262c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002618:	f7fe fb06 	bl	8000c28 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d902      	bls.n	800262c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	73fb      	strb	r3, [r7, #15]
        break;
 800262a:	e005      	b.n	8002638 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800262c:	4b37      	ldr	r3, [pc, #220]	; (800270c <RCCEx_PLLSAI1_Config+0x1e4>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1ef      	bne.n	8002618 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002638:	7bfb      	ldrb	r3, [r7, #15]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d160      	bne.n	8002700 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d111      	bne.n	8002668 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002644:	4b31      	ldr	r3, [pc, #196]	; (800270c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800264c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	6892      	ldr	r2, [r2, #8]
 8002654:	0211      	lsls	r1, r2, #8
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	68d2      	ldr	r2, [r2, #12]
 800265a:	0912      	lsrs	r2, r2, #4
 800265c:	0452      	lsls	r2, r2, #17
 800265e:	430a      	orrs	r2, r1
 8002660:	492a      	ldr	r1, [pc, #168]	; (800270c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002662:	4313      	orrs	r3, r2
 8002664:	610b      	str	r3, [r1, #16]
 8002666:	e027      	b.n	80026b8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d112      	bne.n	8002694 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800266e:	4b27      	ldr	r3, [pc, #156]	; (800270c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002676:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	6892      	ldr	r2, [r2, #8]
 800267e:	0211      	lsls	r1, r2, #8
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	6912      	ldr	r2, [r2, #16]
 8002684:	0852      	lsrs	r2, r2, #1
 8002686:	3a01      	subs	r2, #1
 8002688:	0552      	lsls	r2, r2, #21
 800268a:	430a      	orrs	r2, r1
 800268c:	491f      	ldr	r1, [pc, #124]	; (800270c <RCCEx_PLLSAI1_Config+0x1e4>)
 800268e:	4313      	orrs	r3, r2
 8002690:	610b      	str	r3, [r1, #16]
 8002692:	e011      	b.n	80026b8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002694:	4b1d      	ldr	r3, [pc, #116]	; (800270c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800269c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6892      	ldr	r2, [r2, #8]
 80026a4:	0211      	lsls	r1, r2, #8
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	6952      	ldr	r2, [r2, #20]
 80026aa:	0852      	lsrs	r2, r2, #1
 80026ac:	3a01      	subs	r2, #1
 80026ae:	0652      	lsls	r2, r2, #25
 80026b0:	430a      	orrs	r2, r1
 80026b2:	4916      	ldr	r1, [pc, #88]	; (800270c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80026b8:	4b14      	ldr	r3, [pc, #80]	; (800270c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a13      	ldr	r2, [pc, #76]	; (800270c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80026c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c4:	f7fe fab0 	bl	8000c28 <HAL_GetTick>
 80026c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026ca:	e009      	b.n	80026e0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026cc:	f7fe faac 	bl	8000c28 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d902      	bls.n	80026e0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	73fb      	strb	r3, [r7, #15]
          break;
 80026de:	e005      	b.n	80026ec <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026e0:	4b0a      	ldr	r3, [pc, #40]	; (800270c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0ef      	beq.n	80026cc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d106      	bne.n	8002700 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80026f2:	4b06      	ldr	r3, [pc, #24]	; (800270c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026f4:	691a      	ldr	r2, [r3, #16]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	4904      	ldr	r1, [pc, #16]	; (800270c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002700:	7bfb      	ldrb	r3, [r7, #15]
}
 8002702:	4618      	mov	r0, r3
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40021000 	.word	0x40021000

08002710 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800271a:	2300      	movs	r3, #0
 800271c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800271e:	4b6a      	ldr	r3, [pc, #424]	; (80028c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d018      	beq.n	800275c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800272a:	4b67      	ldr	r3, [pc, #412]	; (80028c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	f003 0203 	and.w	r2, r3, #3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	429a      	cmp	r2, r3
 8002738:	d10d      	bne.n	8002756 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
       ||
 800273e:	2b00      	cmp	r3, #0
 8002740:	d009      	beq.n	8002756 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002742:	4b61      	ldr	r3, [pc, #388]	; (80028c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	091b      	lsrs	r3, r3, #4
 8002748:	f003 0307 	and.w	r3, r3, #7
 800274c:	1c5a      	adds	r2, r3, #1
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
       ||
 8002752:	429a      	cmp	r2, r3
 8002754:	d047      	beq.n	80027e6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	73fb      	strb	r3, [r7, #15]
 800275a:	e044      	b.n	80027e6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2b03      	cmp	r3, #3
 8002762:	d018      	beq.n	8002796 <RCCEx_PLLSAI2_Config+0x86>
 8002764:	2b03      	cmp	r3, #3
 8002766:	d825      	bhi.n	80027b4 <RCCEx_PLLSAI2_Config+0xa4>
 8002768:	2b01      	cmp	r3, #1
 800276a:	d002      	beq.n	8002772 <RCCEx_PLLSAI2_Config+0x62>
 800276c:	2b02      	cmp	r3, #2
 800276e:	d009      	beq.n	8002784 <RCCEx_PLLSAI2_Config+0x74>
 8002770:	e020      	b.n	80027b4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002772:	4b55      	ldr	r3, [pc, #340]	; (80028c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d11d      	bne.n	80027ba <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002782:	e01a      	b.n	80027ba <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002784:	4b50      	ldr	r3, [pc, #320]	; (80028c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800278c:	2b00      	cmp	r3, #0
 800278e:	d116      	bne.n	80027be <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002794:	e013      	b.n	80027be <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002796:	4b4c      	ldr	r3, [pc, #304]	; (80028c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10f      	bne.n	80027c2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027a2:	4b49      	ldr	r3, [pc, #292]	; (80028c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d109      	bne.n	80027c2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027b2:	e006      	b.n	80027c2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	73fb      	strb	r3, [r7, #15]
      break;
 80027b8:	e004      	b.n	80027c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027ba:	bf00      	nop
 80027bc:	e002      	b.n	80027c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027be:	bf00      	nop
 80027c0:	e000      	b.n	80027c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80027c4:	7bfb      	ldrb	r3, [r7, #15]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10d      	bne.n	80027e6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027ca:	4b3f      	ldr	r3, [pc, #252]	; (80028c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6819      	ldr	r1, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	3b01      	subs	r3, #1
 80027dc:	011b      	lsls	r3, r3, #4
 80027de:	430b      	orrs	r3, r1
 80027e0:	4939      	ldr	r1, [pc, #228]	; (80028c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027e6:	7bfb      	ldrb	r3, [r7, #15]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d167      	bne.n	80028bc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80027ec:	4b36      	ldr	r3, [pc, #216]	; (80028c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a35      	ldr	r2, [pc, #212]	; (80028c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027f8:	f7fe fa16 	bl	8000c28 <HAL_GetTick>
 80027fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027fe:	e009      	b.n	8002814 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002800:	f7fe fa12 	bl	8000c28 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d902      	bls.n	8002814 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	73fb      	strb	r3, [r7, #15]
        break;
 8002812:	e005      	b.n	8002820 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002814:	4b2c      	ldr	r3, [pc, #176]	; (80028c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1ef      	bne.n	8002800 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002820:	7bfb      	ldrb	r3, [r7, #15]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d14a      	bne.n	80028bc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d111      	bne.n	8002850 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800282c:	4b26      	ldr	r3, [pc, #152]	; (80028c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002834:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6892      	ldr	r2, [r2, #8]
 800283c:	0211      	lsls	r1, r2, #8
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	68d2      	ldr	r2, [r2, #12]
 8002842:	0912      	lsrs	r2, r2, #4
 8002844:	0452      	lsls	r2, r2, #17
 8002846:	430a      	orrs	r2, r1
 8002848:	491f      	ldr	r1, [pc, #124]	; (80028c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800284a:	4313      	orrs	r3, r2
 800284c:	614b      	str	r3, [r1, #20]
 800284e:	e011      	b.n	8002874 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002850:	4b1d      	ldr	r3, [pc, #116]	; (80028c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002852:	695b      	ldr	r3, [r3, #20]
 8002854:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002858:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	6892      	ldr	r2, [r2, #8]
 8002860:	0211      	lsls	r1, r2, #8
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	6912      	ldr	r2, [r2, #16]
 8002866:	0852      	lsrs	r2, r2, #1
 8002868:	3a01      	subs	r2, #1
 800286a:	0652      	lsls	r2, r2, #25
 800286c:	430a      	orrs	r2, r1
 800286e:	4916      	ldr	r1, [pc, #88]	; (80028c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002870:	4313      	orrs	r3, r2
 8002872:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002874:	4b14      	ldr	r3, [pc, #80]	; (80028c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a13      	ldr	r2, [pc, #76]	; (80028c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800287a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800287e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002880:	f7fe f9d2 	bl	8000c28 <HAL_GetTick>
 8002884:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002886:	e009      	b.n	800289c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002888:	f7fe f9ce 	bl	8000c28 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d902      	bls.n	800289c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	73fb      	strb	r3, [r7, #15]
          break;
 800289a:	e005      	b.n	80028a8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800289c:	4b0a      	ldr	r3, [pc, #40]	; (80028c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0ef      	beq.n	8002888 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d106      	bne.n	80028bc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80028ae:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028b0:	695a      	ldr	r2, [r3, #20]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	4904      	ldr	r1, [pc, #16]	; (80028c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80028bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40021000 	.word	0x40021000

080028cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e040      	b.n	8002960 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d106      	bne.n	80028f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7fd ff6e 	bl	80007d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2224      	movs	r2, #36	; 0x24
 80028f8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f022 0201 	bic.w	r2, r2, #1
 8002908:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 f95c 	bl	8002bc8 <UART_SetConfig>
 8002910:	4603      	mov	r3, r0
 8002912:	2b01      	cmp	r3, #1
 8002914:	d101      	bne.n	800291a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e022      	b.n	8002960 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291e:	2b00      	cmp	r3, #0
 8002920:	d002      	beq.n	8002928 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 fc0a 	bl	800313c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002936:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689a      	ldr	r2, [r3, #8]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002946:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f042 0201 	orr.w	r2, r2, #1
 8002956:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 fc91 	bl	8003280 <UART_CheckIdleState>
 800295e:	4603      	mov	r3, r0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b08a      	sub	sp, #40	; 0x28
 800296c:	af02      	add	r7, sp, #8
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	603b      	str	r3, [r7, #0]
 8002974:	4613      	mov	r3, r2
 8002976:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800297c:	2b20      	cmp	r3, #32
 800297e:	f040 8082 	bne.w	8002a86 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d002      	beq.n	800298e <HAL_UART_Transmit+0x26>
 8002988:	88fb      	ldrh	r3, [r7, #6]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e07a      	b.n	8002a88 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002998:	2b01      	cmp	r3, #1
 800299a:	d101      	bne.n	80029a0 <HAL_UART_Transmit+0x38>
 800299c:	2302      	movs	r3, #2
 800299e:	e073      	b.n	8002a88 <HAL_UART_Transmit+0x120>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2221      	movs	r2, #33	; 0x21
 80029b4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029b6:	f7fe f937 	bl	8000c28 <HAL_GetTick>
 80029ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	88fa      	ldrh	r2, [r7, #6]
 80029c0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	88fa      	ldrh	r2, [r7, #6]
 80029c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029d4:	d108      	bne.n	80029e8 <HAL_UART_Transmit+0x80>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d104      	bne.n	80029e8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	61bb      	str	r3, [r7, #24]
 80029e6:	e003      	b.n	80029f0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029ec:	2300      	movs	r3, #0
 80029ee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80029f8:	e02d      	b.n	8002a56 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	2200      	movs	r2, #0
 8002a02:	2180      	movs	r1, #128	; 0x80
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f000 fc84 	bl	8003312 <UART_WaitOnFlagUntilTimeout>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e039      	b.n	8002a88 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10b      	bne.n	8002a32 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	881a      	ldrh	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a26:	b292      	uxth	r2, r2
 8002a28:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	3302      	adds	r3, #2
 8002a2e:	61bb      	str	r3, [r7, #24]
 8002a30:	e008      	b.n	8002a44 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	781a      	ldrb	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	b292      	uxth	r2, r2
 8002a3c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	3301      	adds	r3, #1
 8002a42:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1cb      	bne.n	80029fa <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	9300      	str	r3, [sp, #0]
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	2140      	movs	r1, #64	; 0x40
 8002a6c:	68f8      	ldr	r0, [r7, #12]
 8002a6e:	f000 fc50 	bl	8003312 <UART_WaitOnFlagUntilTimeout>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e005      	b.n	8002a88 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002a82:	2300      	movs	r3, #0
 8002a84:	e000      	b.n	8002a88 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002a86:	2302      	movs	r3, #2
  }
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3720      	adds	r7, #32
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002aa2:	2b20      	cmp	r3, #32
 8002aa4:	d166      	bne.n	8002b74 <HAL_UART_Transmit_DMA+0xe4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d002      	beq.n	8002ab2 <HAL_UART_Transmit_DMA+0x22>
 8002aac:	88fb      	ldrh	r3, [r7, #6]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e05f      	b.n	8002b76 <HAL_UART_Transmit_DMA+0xe6>
    }

    __HAL_LOCK(huart);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d101      	bne.n	8002ac4 <HAL_UART_Transmit_DMA+0x34>
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	e058      	b.n	8002b76 <HAL_UART_Transmit_DMA+0xe6>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	68ba      	ldr	r2, [r7, #8]
 8002ad0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	88fa      	ldrh	r2, [r7, #6]
 8002ad6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	88fa      	ldrh	r2, [r7, #6]
 8002ade:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2221      	movs	r2, #33	; 0x21
 8002aee:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d02b      	beq.n	8002b50 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002afc:	4a20      	ldr	r2, [pc, #128]	; (8002b80 <HAL_UART_Transmit_DMA+0xf0>)
 8002afe:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b04:	4a1f      	ldr	r2, [pc, #124]	; (8002b84 <HAL_UART_Transmit_DMA+0xf4>)
 8002b06:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b0c:	4a1e      	ldr	r2, [pc, #120]	; (8002b88 <HAL_UART_Transmit_DMA+0xf8>)
 8002b0e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b14:	2200      	movs	r2, #0
 8002b16:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b20:	4619      	mov	r1, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	3328      	adds	r3, #40	; 0x28
 8002b28:	461a      	mov	r2, r3
 8002b2a:	88fb      	ldrh	r3, [r7, #6]
 8002b2c:	f7fe f96d 	bl	8000e0a <HAL_DMA_Start_IT>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00c      	beq.n	8002b50 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2210      	movs	r2, #16
 8002b3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2220      	movs	r2, #32
 8002b4a:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e012      	b.n	8002b76 <HAL_UART_Transmit_DMA+0xe6>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2240      	movs	r2, #64	; 0x40
 8002b56:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689a      	ldr	r2, [r3, #8]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b6e:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8002b70:	2300      	movs	r3, #0
 8002b72:	e000      	b.n	8002b76 <HAL_UART_Transmit_DMA+0xe6>
  }
  else
  {
    return HAL_BUSY;
 8002b74:	2302      	movs	r3, #2
  }
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	08003493 	.word	0x08003493
 8002b84:	080034e7 	.word	0x080034e7
 8002b88:	08003503 	.word	0x08003503

08002b8c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bcc:	b08a      	sub	sp, #40	; 0x28
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	431a      	orrs	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	431a      	orrs	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	69db      	ldr	r3, [r3, #28]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	4ba4      	ldr	r3, [pc, #656]	; (8002e88 <UART_SetConfig+0x2c0>)
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	6812      	ldr	r2, [r2, #0]
 8002bfe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c00:	430b      	orrs	r3, r1
 8002c02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	68da      	ldr	r2, [r3, #12]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	430a      	orrs	r2, r1
 8002c18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a99      	ldr	r2, [pc, #612]	; (8002e8c <UART_SetConfig+0x2c4>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d004      	beq.n	8002c34 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c30:	4313      	orrs	r3, r2
 8002c32:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c44:	430a      	orrs	r2, r1
 8002c46:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a90      	ldr	r2, [pc, #576]	; (8002e90 <UART_SetConfig+0x2c8>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d126      	bne.n	8002ca0 <UART_SetConfig+0xd8>
 8002c52:	4b90      	ldr	r3, [pc, #576]	; (8002e94 <UART_SetConfig+0x2cc>)
 8002c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c58:	f003 0303 	and.w	r3, r3, #3
 8002c5c:	2b03      	cmp	r3, #3
 8002c5e:	d81b      	bhi.n	8002c98 <UART_SetConfig+0xd0>
 8002c60:	a201      	add	r2, pc, #4	; (adr r2, 8002c68 <UART_SetConfig+0xa0>)
 8002c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c66:	bf00      	nop
 8002c68:	08002c79 	.word	0x08002c79
 8002c6c:	08002c89 	.word	0x08002c89
 8002c70:	08002c81 	.word	0x08002c81
 8002c74:	08002c91 	.word	0x08002c91
 8002c78:	2301      	movs	r3, #1
 8002c7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c7e:	e116      	b.n	8002eae <UART_SetConfig+0x2e6>
 8002c80:	2302      	movs	r3, #2
 8002c82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c86:	e112      	b.n	8002eae <UART_SetConfig+0x2e6>
 8002c88:	2304      	movs	r3, #4
 8002c8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c8e:	e10e      	b.n	8002eae <UART_SetConfig+0x2e6>
 8002c90:	2308      	movs	r3, #8
 8002c92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c96:	e10a      	b.n	8002eae <UART_SetConfig+0x2e6>
 8002c98:	2310      	movs	r3, #16
 8002c9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c9e:	e106      	b.n	8002eae <UART_SetConfig+0x2e6>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a7c      	ldr	r2, [pc, #496]	; (8002e98 <UART_SetConfig+0x2d0>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d138      	bne.n	8002d1c <UART_SetConfig+0x154>
 8002caa:	4b7a      	ldr	r3, [pc, #488]	; (8002e94 <UART_SetConfig+0x2cc>)
 8002cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb0:	f003 030c 	and.w	r3, r3, #12
 8002cb4:	2b0c      	cmp	r3, #12
 8002cb6:	d82d      	bhi.n	8002d14 <UART_SetConfig+0x14c>
 8002cb8:	a201      	add	r2, pc, #4	; (adr r2, 8002cc0 <UART_SetConfig+0xf8>)
 8002cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cbe:	bf00      	nop
 8002cc0:	08002cf5 	.word	0x08002cf5
 8002cc4:	08002d15 	.word	0x08002d15
 8002cc8:	08002d15 	.word	0x08002d15
 8002ccc:	08002d15 	.word	0x08002d15
 8002cd0:	08002d05 	.word	0x08002d05
 8002cd4:	08002d15 	.word	0x08002d15
 8002cd8:	08002d15 	.word	0x08002d15
 8002cdc:	08002d15 	.word	0x08002d15
 8002ce0:	08002cfd 	.word	0x08002cfd
 8002ce4:	08002d15 	.word	0x08002d15
 8002ce8:	08002d15 	.word	0x08002d15
 8002cec:	08002d15 	.word	0x08002d15
 8002cf0:	08002d0d 	.word	0x08002d0d
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cfa:	e0d8      	b.n	8002eae <UART_SetConfig+0x2e6>
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d02:	e0d4      	b.n	8002eae <UART_SetConfig+0x2e6>
 8002d04:	2304      	movs	r3, #4
 8002d06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d0a:	e0d0      	b.n	8002eae <UART_SetConfig+0x2e6>
 8002d0c:	2308      	movs	r3, #8
 8002d0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d12:	e0cc      	b.n	8002eae <UART_SetConfig+0x2e6>
 8002d14:	2310      	movs	r3, #16
 8002d16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d1a:	e0c8      	b.n	8002eae <UART_SetConfig+0x2e6>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a5e      	ldr	r2, [pc, #376]	; (8002e9c <UART_SetConfig+0x2d4>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d125      	bne.n	8002d72 <UART_SetConfig+0x1aa>
 8002d26:	4b5b      	ldr	r3, [pc, #364]	; (8002e94 <UART_SetConfig+0x2cc>)
 8002d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d2c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002d30:	2b30      	cmp	r3, #48	; 0x30
 8002d32:	d016      	beq.n	8002d62 <UART_SetConfig+0x19a>
 8002d34:	2b30      	cmp	r3, #48	; 0x30
 8002d36:	d818      	bhi.n	8002d6a <UART_SetConfig+0x1a2>
 8002d38:	2b20      	cmp	r3, #32
 8002d3a:	d00a      	beq.n	8002d52 <UART_SetConfig+0x18a>
 8002d3c:	2b20      	cmp	r3, #32
 8002d3e:	d814      	bhi.n	8002d6a <UART_SetConfig+0x1a2>
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d002      	beq.n	8002d4a <UART_SetConfig+0x182>
 8002d44:	2b10      	cmp	r3, #16
 8002d46:	d008      	beq.n	8002d5a <UART_SetConfig+0x192>
 8002d48:	e00f      	b.n	8002d6a <UART_SetConfig+0x1a2>
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d50:	e0ad      	b.n	8002eae <UART_SetConfig+0x2e6>
 8002d52:	2302      	movs	r3, #2
 8002d54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d58:	e0a9      	b.n	8002eae <UART_SetConfig+0x2e6>
 8002d5a:	2304      	movs	r3, #4
 8002d5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d60:	e0a5      	b.n	8002eae <UART_SetConfig+0x2e6>
 8002d62:	2308      	movs	r3, #8
 8002d64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d68:	e0a1      	b.n	8002eae <UART_SetConfig+0x2e6>
 8002d6a:	2310      	movs	r3, #16
 8002d6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d70:	e09d      	b.n	8002eae <UART_SetConfig+0x2e6>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a4a      	ldr	r2, [pc, #296]	; (8002ea0 <UART_SetConfig+0x2d8>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d125      	bne.n	8002dc8 <UART_SetConfig+0x200>
 8002d7c:	4b45      	ldr	r3, [pc, #276]	; (8002e94 <UART_SetConfig+0x2cc>)
 8002d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d82:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002d86:	2bc0      	cmp	r3, #192	; 0xc0
 8002d88:	d016      	beq.n	8002db8 <UART_SetConfig+0x1f0>
 8002d8a:	2bc0      	cmp	r3, #192	; 0xc0
 8002d8c:	d818      	bhi.n	8002dc0 <UART_SetConfig+0x1f8>
 8002d8e:	2b80      	cmp	r3, #128	; 0x80
 8002d90:	d00a      	beq.n	8002da8 <UART_SetConfig+0x1e0>
 8002d92:	2b80      	cmp	r3, #128	; 0x80
 8002d94:	d814      	bhi.n	8002dc0 <UART_SetConfig+0x1f8>
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d002      	beq.n	8002da0 <UART_SetConfig+0x1d8>
 8002d9a:	2b40      	cmp	r3, #64	; 0x40
 8002d9c:	d008      	beq.n	8002db0 <UART_SetConfig+0x1e8>
 8002d9e:	e00f      	b.n	8002dc0 <UART_SetConfig+0x1f8>
 8002da0:	2300      	movs	r3, #0
 8002da2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002da6:	e082      	b.n	8002eae <UART_SetConfig+0x2e6>
 8002da8:	2302      	movs	r3, #2
 8002daa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dae:	e07e      	b.n	8002eae <UART_SetConfig+0x2e6>
 8002db0:	2304      	movs	r3, #4
 8002db2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002db6:	e07a      	b.n	8002eae <UART_SetConfig+0x2e6>
 8002db8:	2308      	movs	r3, #8
 8002dba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dbe:	e076      	b.n	8002eae <UART_SetConfig+0x2e6>
 8002dc0:	2310      	movs	r3, #16
 8002dc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dc6:	e072      	b.n	8002eae <UART_SetConfig+0x2e6>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a35      	ldr	r2, [pc, #212]	; (8002ea4 <UART_SetConfig+0x2dc>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d12a      	bne.n	8002e28 <UART_SetConfig+0x260>
 8002dd2:	4b30      	ldr	r3, [pc, #192]	; (8002e94 <UART_SetConfig+0x2cc>)
 8002dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ddc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002de0:	d01a      	beq.n	8002e18 <UART_SetConfig+0x250>
 8002de2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002de6:	d81b      	bhi.n	8002e20 <UART_SetConfig+0x258>
 8002de8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dec:	d00c      	beq.n	8002e08 <UART_SetConfig+0x240>
 8002dee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002df2:	d815      	bhi.n	8002e20 <UART_SetConfig+0x258>
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d003      	beq.n	8002e00 <UART_SetConfig+0x238>
 8002df8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dfc:	d008      	beq.n	8002e10 <UART_SetConfig+0x248>
 8002dfe:	e00f      	b.n	8002e20 <UART_SetConfig+0x258>
 8002e00:	2300      	movs	r3, #0
 8002e02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e06:	e052      	b.n	8002eae <UART_SetConfig+0x2e6>
 8002e08:	2302      	movs	r3, #2
 8002e0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e0e:	e04e      	b.n	8002eae <UART_SetConfig+0x2e6>
 8002e10:	2304      	movs	r3, #4
 8002e12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e16:	e04a      	b.n	8002eae <UART_SetConfig+0x2e6>
 8002e18:	2308      	movs	r3, #8
 8002e1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e1e:	e046      	b.n	8002eae <UART_SetConfig+0x2e6>
 8002e20:	2310      	movs	r3, #16
 8002e22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e26:	e042      	b.n	8002eae <UART_SetConfig+0x2e6>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a17      	ldr	r2, [pc, #92]	; (8002e8c <UART_SetConfig+0x2c4>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d13a      	bne.n	8002ea8 <UART_SetConfig+0x2e0>
 8002e32:	4b18      	ldr	r3, [pc, #96]	; (8002e94 <UART_SetConfig+0x2cc>)
 8002e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e38:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002e3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e40:	d01a      	beq.n	8002e78 <UART_SetConfig+0x2b0>
 8002e42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e46:	d81b      	bhi.n	8002e80 <UART_SetConfig+0x2b8>
 8002e48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e4c:	d00c      	beq.n	8002e68 <UART_SetConfig+0x2a0>
 8002e4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e52:	d815      	bhi.n	8002e80 <UART_SetConfig+0x2b8>
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d003      	beq.n	8002e60 <UART_SetConfig+0x298>
 8002e58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e5c:	d008      	beq.n	8002e70 <UART_SetConfig+0x2a8>
 8002e5e:	e00f      	b.n	8002e80 <UART_SetConfig+0x2b8>
 8002e60:	2300      	movs	r3, #0
 8002e62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e66:	e022      	b.n	8002eae <UART_SetConfig+0x2e6>
 8002e68:	2302      	movs	r3, #2
 8002e6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e6e:	e01e      	b.n	8002eae <UART_SetConfig+0x2e6>
 8002e70:	2304      	movs	r3, #4
 8002e72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e76:	e01a      	b.n	8002eae <UART_SetConfig+0x2e6>
 8002e78:	2308      	movs	r3, #8
 8002e7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e7e:	e016      	b.n	8002eae <UART_SetConfig+0x2e6>
 8002e80:	2310      	movs	r3, #16
 8002e82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e86:	e012      	b.n	8002eae <UART_SetConfig+0x2e6>
 8002e88:	efff69f3 	.word	0xefff69f3
 8002e8c:	40008000 	.word	0x40008000
 8002e90:	40013800 	.word	0x40013800
 8002e94:	40021000 	.word	0x40021000
 8002e98:	40004400 	.word	0x40004400
 8002e9c:	40004800 	.word	0x40004800
 8002ea0:	40004c00 	.word	0x40004c00
 8002ea4:	40005000 	.word	0x40005000
 8002ea8:	2310      	movs	r3, #16
 8002eaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4aa0      	ldr	r2, [pc, #640]	; (8003134 <UART_SetConfig+0x56c>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d17a      	bne.n	8002fae <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002eb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ebc:	2b08      	cmp	r3, #8
 8002ebe:	d824      	bhi.n	8002f0a <UART_SetConfig+0x342>
 8002ec0:	a201      	add	r2, pc, #4	; (adr r2, 8002ec8 <UART_SetConfig+0x300>)
 8002ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec6:	bf00      	nop
 8002ec8:	08002eed 	.word	0x08002eed
 8002ecc:	08002f0b 	.word	0x08002f0b
 8002ed0:	08002ef5 	.word	0x08002ef5
 8002ed4:	08002f0b 	.word	0x08002f0b
 8002ed8:	08002efb 	.word	0x08002efb
 8002edc:	08002f0b 	.word	0x08002f0b
 8002ee0:	08002f0b 	.word	0x08002f0b
 8002ee4:	08002f0b 	.word	0x08002f0b
 8002ee8:	08002f03 	.word	0x08002f03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002eec:	f7fe ffa6 	bl	8001e3c <HAL_RCC_GetPCLK1Freq>
 8002ef0:	61f8      	str	r0, [r7, #28]
        break;
 8002ef2:	e010      	b.n	8002f16 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ef4:	4b90      	ldr	r3, [pc, #576]	; (8003138 <UART_SetConfig+0x570>)
 8002ef6:	61fb      	str	r3, [r7, #28]
        break;
 8002ef8:	e00d      	b.n	8002f16 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002efa:	f7fe ff07 	bl	8001d0c <HAL_RCC_GetSysClockFreq>
 8002efe:	61f8      	str	r0, [r7, #28]
        break;
 8002f00:	e009      	b.n	8002f16 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f06:	61fb      	str	r3, [r7, #28]
        break;
 8002f08:	e005      	b.n	8002f16 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002f14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f000 80fd 	beq.w	8003118 <UART_SetConfig+0x550>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	4613      	mov	r3, r2
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	4413      	add	r3, r2
 8002f28:	69fa      	ldr	r2, [r7, #28]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d305      	bcc.n	8002f3a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f34:	69fa      	ldr	r2, [r7, #28]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d903      	bls.n	8002f42 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002f40:	e0ea      	b.n	8003118 <UART_SetConfig+0x550>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	2200      	movs	r2, #0
 8002f46:	461c      	mov	r4, r3
 8002f48:	4615      	mov	r5, r2
 8002f4a:	f04f 0200 	mov.w	r2, #0
 8002f4e:	f04f 0300 	mov.w	r3, #0
 8002f52:	022b      	lsls	r3, r5, #8
 8002f54:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002f58:	0222      	lsls	r2, r4, #8
 8002f5a:	68f9      	ldr	r1, [r7, #12]
 8002f5c:	6849      	ldr	r1, [r1, #4]
 8002f5e:	0849      	lsrs	r1, r1, #1
 8002f60:	2000      	movs	r0, #0
 8002f62:	4688      	mov	r8, r1
 8002f64:	4681      	mov	r9, r0
 8002f66:	eb12 0a08 	adds.w	sl, r2, r8
 8002f6a:	eb43 0b09 	adc.w	fp, r3, r9
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	603b      	str	r3, [r7, #0]
 8002f76:	607a      	str	r2, [r7, #4]
 8002f78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f7c:	4650      	mov	r0, sl
 8002f7e:	4659      	mov	r1, fp
 8002f80:	f7fd f97e 	bl	8000280 <__aeabi_uldivmod>
 8002f84:	4602      	mov	r2, r0
 8002f86:	460b      	mov	r3, r1
 8002f88:	4613      	mov	r3, r2
 8002f8a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f92:	d308      	bcc.n	8002fa6 <UART_SetConfig+0x3de>
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f9a:	d204      	bcs.n	8002fa6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	60da      	str	r2, [r3, #12]
 8002fa4:	e0b8      	b.n	8003118 <UART_SetConfig+0x550>
        }
        else
        {
          ret = HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002fac:	e0b4      	b.n	8003118 <UART_SetConfig+0x550>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fb6:	d15f      	bne.n	8003078 <UART_SetConfig+0x4b0>
  {
    switch (clocksource)
 8002fb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002fbc:	2b08      	cmp	r3, #8
 8002fbe:	d828      	bhi.n	8003012 <UART_SetConfig+0x44a>
 8002fc0:	a201      	add	r2, pc, #4	; (adr r2, 8002fc8 <UART_SetConfig+0x400>)
 8002fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc6:	bf00      	nop
 8002fc8:	08002fed 	.word	0x08002fed
 8002fcc:	08002ff5 	.word	0x08002ff5
 8002fd0:	08002ffd 	.word	0x08002ffd
 8002fd4:	08003013 	.word	0x08003013
 8002fd8:	08003003 	.word	0x08003003
 8002fdc:	08003013 	.word	0x08003013
 8002fe0:	08003013 	.word	0x08003013
 8002fe4:	08003013 	.word	0x08003013
 8002fe8:	0800300b 	.word	0x0800300b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fec:	f7fe ff26 	bl	8001e3c <HAL_RCC_GetPCLK1Freq>
 8002ff0:	61f8      	str	r0, [r7, #28]
        break;
 8002ff2:	e014      	b.n	800301e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ff4:	f7fe ff38 	bl	8001e68 <HAL_RCC_GetPCLK2Freq>
 8002ff8:	61f8      	str	r0, [r7, #28]
        break;
 8002ffa:	e010      	b.n	800301e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ffc:	4b4e      	ldr	r3, [pc, #312]	; (8003138 <UART_SetConfig+0x570>)
 8002ffe:	61fb      	str	r3, [r7, #28]
        break;
 8003000:	e00d      	b.n	800301e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003002:	f7fe fe83 	bl	8001d0c <HAL_RCC_GetSysClockFreq>
 8003006:	61f8      	str	r0, [r7, #28]
        break;
 8003008:	e009      	b.n	800301e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800300a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800300e:	61fb      	str	r3, [r7, #28]
        break;
 8003010:	e005      	b.n	800301e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003012:	2300      	movs	r3, #0
 8003014:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800301c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d079      	beq.n	8003118 <UART_SetConfig+0x550>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	005a      	lsls	r2, r3, #1
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	085b      	lsrs	r3, r3, #1
 800302e:	441a      	add	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	fbb2 f3f3 	udiv	r3, r2, r3
 8003038:	b29b      	uxth	r3, r3
 800303a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	2b0f      	cmp	r3, #15
 8003040:	d916      	bls.n	8003070 <UART_SetConfig+0x4a8>
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003048:	d212      	bcs.n	8003070 <UART_SetConfig+0x4a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	b29b      	uxth	r3, r3
 800304e:	f023 030f 	bic.w	r3, r3, #15
 8003052:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	085b      	lsrs	r3, r3, #1
 8003058:	b29b      	uxth	r3, r3
 800305a:	f003 0307 	and.w	r3, r3, #7
 800305e:	b29a      	uxth	r2, r3
 8003060:	8afb      	ldrh	r3, [r7, #22]
 8003062:	4313      	orrs	r3, r2
 8003064:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	8afa      	ldrh	r2, [r7, #22]
 800306c:	60da      	str	r2, [r3, #12]
 800306e:	e053      	b.n	8003118 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003076:	e04f      	b.n	8003118 <UART_SetConfig+0x550>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003078:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800307c:	2b08      	cmp	r3, #8
 800307e:	d828      	bhi.n	80030d2 <UART_SetConfig+0x50a>
 8003080:	a201      	add	r2, pc, #4	; (adr r2, 8003088 <UART_SetConfig+0x4c0>)
 8003082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003086:	bf00      	nop
 8003088:	080030ad 	.word	0x080030ad
 800308c:	080030b5 	.word	0x080030b5
 8003090:	080030bd 	.word	0x080030bd
 8003094:	080030d3 	.word	0x080030d3
 8003098:	080030c3 	.word	0x080030c3
 800309c:	080030d3 	.word	0x080030d3
 80030a0:	080030d3 	.word	0x080030d3
 80030a4:	080030d3 	.word	0x080030d3
 80030a8:	080030cb 	.word	0x080030cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030ac:	f7fe fec6 	bl	8001e3c <HAL_RCC_GetPCLK1Freq>
 80030b0:	61f8      	str	r0, [r7, #28]
        break;
 80030b2:	e014      	b.n	80030de <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030b4:	f7fe fed8 	bl	8001e68 <HAL_RCC_GetPCLK2Freq>
 80030b8:	61f8      	str	r0, [r7, #28]
        break;
 80030ba:	e010      	b.n	80030de <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030bc:	4b1e      	ldr	r3, [pc, #120]	; (8003138 <UART_SetConfig+0x570>)
 80030be:	61fb      	str	r3, [r7, #28]
        break;
 80030c0:	e00d      	b.n	80030de <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030c2:	f7fe fe23 	bl	8001d0c <HAL_RCC_GetSysClockFreq>
 80030c6:	61f8      	str	r0, [r7, #28]
        break;
 80030c8:	e009      	b.n	80030de <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ce:	61fb      	str	r3, [r7, #28]
        break;
 80030d0:	e005      	b.n	80030de <UART_SetConfig+0x516>
      default:
        pclk = 0U;
 80030d2:	2300      	movs	r3, #0
 80030d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80030dc:	bf00      	nop
    }

    if (pclk != 0U)
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d019      	beq.n	8003118 <UART_SetConfig+0x550>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	085a      	lsrs	r2, r3, #1
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	441a      	add	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	2b0f      	cmp	r3, #15
 80030fe:	d908      	bls.n	8003112 <UART_SetConfig+0x54a>
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003106:	d204      	bcs.n	8003112 <UART_SetConfig+0x54a>
      {
        huart->Instance->BRR = usartdiv;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	60da      	str	r2, [r3, #12]
 8003110:	e002      	b.n	8003118 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003124:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003128:	4618      	mov	r0, r3
 800312a:	3728      	adds	r7, #40	; 0x28
 800312c:	46bd      	mov	sp, r7
 800312e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003132:	bf00      	nop
 8003134:	40008000 	.word	0x40008000
 8003138:	00f42400 	.word	0x00f42400

0800313c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00a      	beq.n	8003166 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	430a      	orrs	r2, r1
 8003164:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00a      	beq.n	8003188 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	430a      	orrs	r2, r1
 8003186:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00a      	beq.n	80031aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ae:	f003 0308 	and.w	r3, r3, #8
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00a      	beq.n	80031cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d0:	f003 0310 	and.w	r3, r3, #16
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00a      	beq.n	80031ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f2:	f003 0320 	and.w	r3, r3, #32
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00a      	beq.n	8003210 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	430a      	orrs	r2, r1
 800320e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003218:	2b00      	cmp	r3, #0
 800321a:	d01a      	beq.n	8003252 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800323a:	d10a      	bne.n	8003252 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	430a      	orrs	r2, r1
 8003250:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00a      	beq.n	8003274 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	430a      	orrs	r2, r1
 8003272:	605a      	str	r2, [r3, #4]
  }
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af02      	add	r7, sp, #8
 8003286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003290:	f7fd fcca 	bl	8000c28 <HAL_GetTick>
 8003294:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0308 	and.w	r3, r3, #8
 80032a0:	2b08      	cmp	r3, #8
 80032a2:	d10e      	bne.n	80032c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80032a8:	9300      	str	r3, [sp, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 f82d 	bl	8003312 <UART_WaitOnFlagUntilTimeout>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e023      	b.n	800330a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b04      	cmp	r3, #4
 80032ce:	d10e      	bne.n	80032ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f817 	bl	8003312 <UART_WaitOnFlagUntilTimeout>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e00d      	b.n	800330a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2220      	movs	r2, #32
 80032f2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2220      	movs	r2, #32
 80032f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b084      	sub	sp, #16
 8003316:	af00      	add	r7, sp, #0
 8003318:	60f8      	str	r0, [r7, #12]
 800331a:	60b9      	str	r1, [r7, #8]
 800331c:	603b      	str	r3, [r7, #0]
 800331e:	4613      	mov	r3, r2
 8003320:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003322:	e05e      	b.n	80033e2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800332a:	d05a      	beq.n	80033e2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800332c:	f7fd fc7c 	bl	8000c28 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	429a      	cmp	r2, r3
 800333a:	d302      	bcc.n	8003342 <UART_WaitOnFlagUntilTimeout+0x30>
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d11b      	bne.n	800337a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003350:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	689a      	ldr	r2, [r3, #8]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 0201 	bic.w	r2, r2, #1
 8003360:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2220      	movs	r2, #32
 8003366:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2220      	movs	r2, #32
 800336c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e043      	b.n	8003402 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0304 	and.w	r3, r3, #4
 8003384:	2b00      	cmp	r3, #0
 8003386:	d02c      	beq.n	80033e2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	69db      	ldr	r3, [r3, #28]
 800338e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003392:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003396:	d124      	bne.n	80033e2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033a0:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80033b0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	689a      	ldr	r2, [r3, #8]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f022 0201 	bic.w	r2, r2, #1
 80033c0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2220      	movs	r2, #32
 80033c6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2220      	movs	r2, #32
 80033cc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2220      	movs	r2, #32
 80033d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e00f      	b.n	8003402 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	69da      	ldr	r2, [r3, #28]
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	4013      	ands	r3, r2
 80033ec:	68ba      	ldr	r2, [r7, #8]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	bf0c      	ite	eq
 80033f2:	2301      	moveq	r3, #1
 80033f4:	2300      	movne	r3, #0
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	461a      	mov	r2, r3
 80033fa:	79fb      	ldrb	r3, [r7, #7]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d091      	beq.n	8003324 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800340a:	b480      	push	{r7}
 800340c:	b083      	sub	sp, #12
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003420:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2220      	movs	r2, #32
 8003426:	679a      	str	r2, [r3, #120]	; 0x78
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800344a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	689a      	ldr	r2, [r3, #8]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f022 0201 	bic.w	r2, r2, #1
 800345a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003460:	2b01      	cmp	r3, #1
 8003462:	d107      	bne.n	8003474 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f022 0210 	bic.w	r2, r2, #16
 8003472:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2220      	movs	r2, #32
 8003478:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003486:	bf00      	nop
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b084      	sub	sp, #16
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349e:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0320 	and.w	r3, r3, #32
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d114      	bne.n	80034d8 <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689a      	ldr	r2, [r3, #8]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034c4:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034d4:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80034d6:	e002      	b.n	80034de <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 80034d8:	68f8      	ldr	r0, [r7, #12]
 80034da:	f7ff fb57 	bl	8002b8c <HAL_UART_TxCpltCallback>
}
 80034de:	bf00      	nop
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b084      	sub	sp, #16
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f7ff fb53 	bl	8002ba0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034fa:	bf00      	nop
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b086      	sub	sp, #24
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003514:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800351a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003526:	2b80      	cmp	r3, #128	; 0x80
 8003528:	d109      	bne.n	800353e <UART_DMAError+0x3c>
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	2b21      	cmp	r3, #33	; 0x21
 800352e:	d106      	bne.n	800353e <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	2200      	movs	r2, #0
 8003534:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8003538:	6978      	ldr	r0, [r7, #20]
 800353a:	f7ff ff66 	bl	800340a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003548:	2b40      	cmp	r3, #64	; 0x40
 800354a:	d109      	bne.n	8003560 <UART_DMAError+0x5e>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2b22      	cmp	r3, #34	; 0x22
 8003550:	d106      	bne.n	8003560 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	2200      	movs	r2, #0
 8003556:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800355a:	6978      	ldr	r0, [r7, #20]
 800355c:	f7ff ff6a 	bl	8003434 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003566:	f043 0210 	orr.w	r2, r3, #16
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003570:	6978      	ldr	r0, [r7, #20]
 8003572:	f7ff fb1f 	bl	8002bb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003576:	bf00      	nop
 8003578:	3718      	adds	r7, #24
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <_ZNK8IXFEvent12getEventTypeEv>:

    /** \brief Returns the type of the event.
     *
     * Can be used to distinguish between an event or a timeout.
     */
    inline eEventType getEventType() const { return _eventType; }
 800357e:	b480      	push	{r7}
 8003580:	b083      	sub	sp, #12
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800358c:	4618      	mov	r0, r3
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <_ZNK8IXFEvent5getIdEv>:
    /** \brief Sets pointer to behavioral class (see #_pBehavior).
     * Sets the behavior in which the event should be executed.
     */
    inline void setBehavior(IXFReactive * pBehavior) { _pBehavior = pBehavior; }

    inline int getId() const { return _id; }		///< Returns #_id identifying the event in the behaviors context.
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	4618      	mov	r0, r3
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <_ZN11EventStatusC1ENS_12eEventStatusE>:
    /**
     * Constructor
     *
     * \param eventStatus Initial value of the event status.
     */
    EventStatus(eEventStatus eventStatus = Unknown) : _status(eventStatus) {}
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	460b      	mov	r3, r1
 80035ba:	70fb      	strb	r3, [r7, #3]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	78fa      	ldrb	r2, [r7, #3]
 80035c0:	701a      	strb	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4618      	mov	r0, r3
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <_ZN13ButtonManager10initializeEv>:
#include "buttonmanager.h"

using namespace std;

void ButtonManager::initialize()
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
    rootState = STATE_INITIAL;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	741a      	strb	r2, [r3, #16]
}
 80035de:	bf00      	nop
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <_ZN13ButtonManager19initializeRelationsEP8ToButtonP3Led>:

void ButtonManager::initializeRelations(ToButton * p, Led * l)
{
 80035ea:	b480      	push	{r7}
 80035ec:	b085      	sub	sp, #20
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	60f8      	str	r0, [r7, #12]
 80035f2:	60b9      	str	r1, [r7, #8]
 80035f4:	607a      	str	r2, [r7, #4]
    pButton = p;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	68ba      	ldr	r2, [r7, #8]
 80035fa:	615a      	str	r2, [r3, #20]
}
 80035fc:	bf00      	nop
 80035fe:	3714      	adds	r7, #20
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <_ZN15ToButtonManagerC1Ev>:
public:
	virtual ~ToButton() = default;

};

class ToButtonManager
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	4a04      	ldr	r2, [pc, #16]	; (8003624 <_ZN15ToButtonManagerC1Ev+0x1c>)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	601a      	str	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4618      	mov	r0, r3
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr
 8003624:	080082a0 	.word	0x080082a0

08003628 <_ZN15ToButtonManagerD1Ev>:
public:
	virtual void pressed() = 0;
	virtual void released() = 0;

public:
	virtual ~ToButtonManager() = default;
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	4a04      	ldr	r2, [pc, #16]	; (8003644 <_ZN15ToButtonManagerD1Ev+0x1c>)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	601a      	str	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4618      	mov	r0, r3
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	080082a0 	.word	0x080082a0

08003648 <_ZN15ToButtonManagerD0Ev>:
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f7ff ffe9 	bl	8003628 <_ZN15ToButtonManagerD1Ev>
 8003656:	2104      	movs	r1, #4
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f003 f8a1 	bl	80067a0 <_ZdlPvj>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4618      	mov	r0, r3
 8003662:	3708      	adds	r7, #8
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <_ZN13ButtonManagerC1Ev>:
{
    static ButtonManager bm;
    return bm;
}

ButtonManager::ButtonManager()
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 : rootState(STATE_INITIAL),
   pButton(nullptr)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2100      	movs	r1, #0
 8003674:	4618      	mov	r0, r3
 8003676:	f000 ff71 	bl	800455c <_ZN10XFReactiveC1EP8XFThread>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	330c      	adds	r3, #12
 800367e:	4618      	mov	r0, r3
 8003680:	f7ff ffc2 	bl	8003608 <_ZN15ToButtonManagerC1Ev>
 8003684:	4a08      	ldr	r2, [pc, #32]	; (80036a8 <_ZN13ButtonManagerC1Ev+0x40>)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	601a      	str	r2, [r3, #0]
 800368a:	4a08      	ldr	r2, [pc, #32]	; (80036ac <_ZN13ButtonManagerC1Ev+0x44>)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	60da      	str	r2, [r3, #12]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	741a      	strb	r2, [r3, #16]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	615a      	str	r2, [r3, #20]
{}
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4618      	mov	r0, r3
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	0800825c 	.word	0x0800825c
 80036ac:	08008288 	.word	0x08008288

080036b0 <_ZN13ButtonManagerD1Ev>:
{}

void ButtonManager::operator=(ButtonManager &)
{}

ButtonManager::~ButtonManager()
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	4a09      	ldr	r2, [pc, #36]	; (80036e0 <_ZN13ButtonManagerD1Ev+0x30>)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	601a      	str	r2, [r3, #0]
 80036be:	4a09      	ldr	r2, [pc, #36]	; (80036e4 <_ZN13ButtonManagerD1Ev+0x34>)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	60da      	str	r2, [r3, #12]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	330c      	adds	r3, #12
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7ff ffad 	bl	8003628 <_ZN15ToButtonManagerD1Ev>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f000 ff65 	bl	80045a0 <_ZN10XFReactiveD1Ev>
{}
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4618      	mov	r0, r3
 80036da:	3708      	adds	r7, #8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	0800825c 	.word	0x0800825c
 80036e4:	08008288 	.word	0x08008288

080036e8 <_ZThn12_N13ButtonManagerD1Ev>:
private:
    /* Factory Pattern */
    ButtonManager();
    ButtonManager(ButtonManager &);
    void operator=(ButtonManager &);
    virtual ~ButtonManager();
 80036e8:	f1a0 000c 	sub.w	r0, r0, #12
 80036ec:	f7ff bfe0 	b.w	80036b0 <_ZN13ButtonManagerD1Ev>

080036f0 <_ZN13ButtonManagerD0Ev>:
ButtonManager::~ButtonManager()
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
{}
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f7ff ffd9 	bl	80036b0 <_ZN13ButtonManagerD1Ev>
 80036fe:	2118      	movs	r1, #24
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f003 f84d 	bl	80067a0 <_ZdlPvj>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4618      	mov	r0, r3
 800370a:	3708      	adds	r7, #8
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <_ZThn12_N13ButtonManagerD0Ev>:
 8003710:	f1a0 000c 	sub.w	r0, r0, #12
 8003714:	f7ff bfec 	b.w	80036f0 <_ZN13ButtonManagerD0Ev>

08003718 <_ZN13ButtonManager7pressedEv>:

void ButtonManager::pressed()
{
 8003718:	b590      	push	{r4, r7, lr}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
    Trace::outln("Button pressed");
 8003720:	480d      	ldr	r0, [pc, #52]	; (8003758 <_ZN13ButtonManager7pressedEv+0x40>)
 8003722:	f000 fc01 	bl	8003f28 <_ZN5Trace5outlnEPKcz>
    //create the pressed event
    XFEvent* ev = new XFEvent(evPressed, this);
 8003726:	2014      	movs	r0, #20
 8003728:	f003 f84b 	bl	80067c2 <_Znwj>
 800372c:	4603      	mov	r3, r0
 800372e:	461c      	mov	r4, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	461a      	mov	r2, r3
 8003734:	2100      	movs	r1, #0
 8003736:	4620      	mov	r0, r4
 8003738:	f000 fe60 	bl	80043fc <_ZN7XFEventC1EiP11IXFReactive>
 800373c:	60fc      	str	r4, [r7, #12]
    //fire the event
    pushEvent(ev);
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	330c      	adds	r3, #12
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68f9      	ldr	r1, [r7, #12]
 800374a:	4610      	mov	r0, r2
 800374c:	4798      	blx	r3
}
 800374e:	bf00      	nop
 8003750:	3714      	adds	r7, #20
 8003752:	46bd      	mov	sp, r7
 8003754:	bd90      	pop	{r4, r7, pc}
 8003756:	bf00      	nop
 8003758:	08007d4c 	.word	0x08007d4c

0800375c <_ZThn12_N13ButtonManager7pressedEv>:

    /* SAP Pattern */
    void pressed();
 800375c:	f1a0 000c 	sub.w	r0, r0, #12
 8003760:	f7ff bfda 	b.w	8003718 <_ZN13ButtonManager7pressedEv>

08003764 <_ZN13ButtonManager8releasedEv>:

void ButtonManager::released()
{
 8003764:	b590      	push	{r4, r7, lr}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
	Trace::outln("Button released");
 800376c:	480d      	ldr	r0, [pc, #52]	; (80037a4 <_ZN13ButtonManager8releasedEv+0x40>)
 800376e:	f000 fbdb 	bl	8003f28 <_ZN5Trace5outlnEPKcz>
    //create the released event
    XFEvent* ev = new XFEvent(evReleased, this);
 8003772:	2014      	movs	r0, #20
 8003774:	f003 f825 	bl	80067c2 <_Znwj>
 8003778:	4603      	mov	r3, r0
 800377a:	461c      	mov	r4, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	461a      	mov	r2, r3
 8003780:	2101      	movs	r1, #1
 8003782:	4620      	mov	r0, r4
 8003784:	f000 fe3a 	bl	80043fc <_ZN7XFEventC1EiP11IXFReactive>
 8003788:	60fc      	str	r4, [r7, #12]
    //fire the event
    pushEvent(ev);
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	330c      	adds	r3, #12
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68f9      	ldr	r1, [r7, #12]
 8003796:	4610      	mov	r0, r2
 8003798:	4798      	blx	r3
}
 800379a:	bf00      	nop
 800379c:	3714      	adds	r7, #20
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd90      	pop	{r4, r7, pc}
 80037a2:	bf00      	nop
 80037a4:	08007d5c 	.word	0x08007d5c

080037a8 <_ZThn12_N13ButtonManager8releasedEv>:
    void released();
 80037a8:	f1a0 000c 	sub.w	r0, r0, #12
 80037ac:	f7ff bfda 	b.w	8003764 <_ZN13ButtonManager8releasedEv>

080037b0 <_ZN13ButtonManager12processEventEv>:

EventStatus ButtonManager::processEvent()
{
 80037b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037b2:	b087      	sub	sp, #28
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
    // will we handle the event ?
    EventStatus result = EventStatus::Unknown;
 80037b8:	f107 0308 	add.w	r3, r7, #8
 80037bc:	2100      	movs	r1, #0
 80037be:	4618      	mov	r0, r3
 80037c0:	f7ff fef6 	bl	80035b0 <_ZN11EventStatusC1ENS_12eEventStatusE>
    // get the actual event
    const IXFEvent* ev = this->getCurrentEvent();
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f000 ffa6 	bl	8004718 <_ZNK10XFReactive15getCurrentEventEv>
 80037cc:	6178      	str	r0, [r7, #20]

    // save the current state
    smState lastState = rootState;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	7c1b      	ldrb	r3, [r3, #16]
 80037d2:	74fb      	strb	r3, [r7, #19]

    // the transition switch
    switch (rootState)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	7c1b      	ldrb	r3, [r3, #16]
 80037d8:	2b04      	cmp	r3, #4
 80037da:	f200 8086 	bhi.w	80038ea <_ZN13ButtonManager12processEventEv+0x13a>
 80037de:	a201      	add	r2, pc, #4	; (adr r2, 80037e4 <_ZN13ButtonManager12processEventEv+0x34>)
 80037e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e4:	080037f9 	.word	0x080037f9
 80037e8:	08003817 	.word	0x08003817
 80037ec:	08003841 	.word	0x08003841
 80037f0:	0800389d 	.word	0x0800389d
 80037f4:	080038bb 	.word	0x080038bb
    {
        case STATE_INITIAL:
            if (ev->getEventType() == IXFEvent::Initial)
 80037f8:	6978      	ldr	r0, [r7, #20]
 80037fa:	f7ff fec0 	bl	800357e <_ZNK8IXFEvent12getEventTypeEv>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b01      	cmp	r3, #1
 8003802:	bf0c      	ite	eq
 8003804:	2301      	moveq	r3, #1
 8003806:	2300      	movne	r3, #0
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d064      	beq.n	80038d8 <_ZN13ButtonManager12processEventEv+0x128>
            {
                rootState = STATE_WAIT;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	741a      	strb	r2, [r3, #16]
            }
            break;
 8003814:	e060      	b.n	80038d8 <_ZN13ButtonManager12processEventEv+0x128>
        case STATE_WAIT:
            if (ev->getEventType() == IXFEvent::Event &&
 8003816:	6978      	ldr	r0, [r7, #20]
 8003818:	f7ff feb1 	bl	800357e <_ZNK8IXFEvent12getEventTypeEv>
 800381c:	4603      	mov	r3, r0
 800381e:	2b03      	cmp	r3, #3
 8003820:	d107      	bne.n	8003832 <_ZN13ButtonManager12processEventEv+0x82>
                ev->getId() == evPressed)
 8003822:	6978      	ldr	r0, [r7, #20]
 8003824:	f7ff feb8 	bl	8003598 <_ZNK8IXFEvent5getIdEv>
 8003828:	4603      	mov	r3, r0
            if (ev->getEventType() == IXFEvent::Event &&
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <_ZN13ButtonManager12processEventEv+0x82>
 800382e:	2301      	movs	r3, #1
 8003830:	e000      	b.n	8003834 <_ZN13ButtonManager12processEventEv+0x84>
 8003832:	2300      	movs	r3, #0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d051      	beq.n	80038dc <_ZN13ButtonManager12processEventEv+0x12c>
            {
                rootState = STATE_PRESSED;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2202      	movs	r2, #2
 800383c:	741a      	strb	r2, [r3, #16]
            }
            break;
 800383e:	e04d      	b.n	80038dc <_ZN13ButtonManager12processEventEv+0x12c>
        case STATE_PRESSED:
            // if the timeout wins
            if (ev->getEventType() == IXFEvent::Timeout &&
 8003840:	6978      	ldr	r0, [r7, #20]
 8003842:	f7ff fe9c 	bl	800357e <_ZNK8IXFEvent12getEventTypeEv>
 8003846:	4603      	mov	r3, r0
 8003848:	2b04      	cmp	r3, #4
 800384a:	d10c      	bne.n	8003866 <_ZN13ButtonManager12processEventEv+0xb6>
                    getCurrentTimeout()->getId() == tmLongPressed)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4618      	mov	r0, r3
 8003850:	f000 ff7c 	bl	800474c <_ZN10XFReactive17getCurrentTimeoutEv>
 8003854:	4603      	mov	r3, r0
 8003856:	4618      	mov	r0, r3
 8003858:	f7ff fe9e 	bl	8003598 <_ZNK8IXFEvent5getIdEv>
 800385c:	4603      	mov	r3, r0
            if (ev->getEventType() == IXFEvent::Timeout &&
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <_ZN13ButtonManager12processEventEv+0xb6>
 8003862:	2301      	movs	r3, #1
 8003864:	e000      	b.n	8003868 <_ZN13ButtonManager12processEventEv+0xb8>
 8003866:	2300      	movs	r3, #0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d002      	beq.n	8003872 <_ZN13ButtonManager12processEventEv+0xc2>
            {
                rootState = STATE_LONG;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2204      	movs	r2, #4
 8003870:	741a      	strb	r2, [r3, #16]
            }
            // if the released event wins
            if (ev->getEventType() == IXFEvent::Event &&
 8003872:	6978      	ldr	r0, [r7, #20]
 8003874:	f7ff fe83 	bl	800357e <_ZNK8IXFEvent12getEventTypeEv>
 8003878:	4603      	mov	r3, r0
 800387a:	2b03      	cmp	r3, #3
 800387c:	d107      	bne.n	800388e <_ZN13ButtonManager12processEventEv+0xde>
                    ev->getId() == evReleased)
 800387e:	6978      	ldr	r0, [r7, #20]
 8003880:	f7ff fe8a 	bl	8003598 <_ZNK8IXFEvent5getIdEv>
 8003884:	4603      	mov	r3, r0
            if (ev->getEventType() == IXFEvent::Event &&
 8003886:	2b01      	cmp	r3, #1
 8003888:	d101      	bne.n	800388e <_ZN13ButtonManager12processEventEv+0xde>
 800388a:	2301      	movs	r3, #1
 800388c:	e000      	b.n	8003890 <_ZN13ButtonManager12processEventEv+0xe0>
 800388e:	2300      	movs	r3, #0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d025      	beq.n	80038e0 <_ZN13ButtonManager12processEventEv+0x130>
            {
                rootState = STATE_CLICK;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2203      	movs	r2, #3
 8003898:	741a      	strb	r2, [r3, #16]
            }
            break;
 800389a:	e021      	b.n	80038e0 <_ZN13ButtonManager12processEventEv+0x130>
        case STATE_CLICK:
            if (ev->getEventType() == IXFEvent::NullTransition)
 800389c:	6978      	ldr	r0, [r7, #20]
 800389e:	f7ff fe6e 	bl	800357e <_ZNK8IXFEvent12getEventTypeEv>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	bf0c      	ite	eq
 80038a8:	2301      	moveq	r3, #1
 80038aa:	2300      	movne	r3, #0
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d018      	beq.n	80038e4 <_ZN13ButtonManager12processEventEv+0x134>
            {
                rootState = STATE_WAIT;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	741a      	strb	r2, [r3, #16]
            }
            break;
 80038b8:	e014      	b.n	80038e4 <_ZN13ButtonManager12processEventEv+0x134>
        case STATE_LONG:
            if (ev->getEventType() == IXFEvent::NullTransition)
 80038ba:	6978      	ldr	r0, [r7, #20]
 80038bc:	f7ff fe5f 	bl	800357e <_ZNK8IXFEvent12getEventTypeEv>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	bf0c      	ite	eq
 80038c6:	2301      	moveq	r3, #1
 80038c8:	2300      	movne	r3, #0
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00b      	beq.n	80038e8 <_ZN13ButtonManager12processEventEv+0x138>
            {
                rootState = STATE_WAIT;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	741a      	strb	r2, [r3, #16]
            }
            break;
 80038d6:	e007      	b.n	80038e8 <_ZN13ButtonManager12processEventEv+0x138>
            break;
 80038d8:	bf00      	nop
 80038da:	e006      	b.n	80038ea <_ZN13ButtonManager12processEventEv+0x13a>
            break;
 80038dc:	bf00      	nop
 80038de:	e004      	b.n	80038ea <_ZN13ButtonManager12processEventEv+0x13a>
            break;
 80038e0:	bf00      	nop
 80038e2:	e002      	b.n	80038ea <_ZN13ButtonManager12processEventEv+0x13a>
            break;
 80038e4:	bf00      	nop
 80038e6:	e000      	b.n	80038ea <_ZN13ButtonManager12processEventEv+0x13a>
            break;
 80038e8:	bf00      	nop
    }

    // the action switch
    if (lastState != rootState)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	7c1b      	ldrb	r3, [r3, #16]
 80038ee:	7cfa      	ldrb	r2, [r7, #19]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d066      	beq.n	80039c2 <_ZN13ButtonManager12processEventEv+0x212>
    {
        result = EventStatus::Consumed;
 80038f4:	f107 030c 	add.w	r3, r7, #12
 80038f8:	2101      	movs	r1, #1
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7ff fe58 	bl	80035b0 <_ZN11EventStatusC1ENS_12eEventStatusE>
 8003900:	7b3b      	ldrb	r3, [r7, #12]
 8003902:	723b      	strb	r3, [r7, #8]
        switch (rootState)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	7c1b      	ldrb	r3, [r3, #16]
 8003908:	2b04      	cmp	r3, #4
 800390a:	d862      	bhi.n	80039d2 <_ZN13ButtonManager12processEventEv+0x222>
 800390c:	a201      	add	r2, pc, #4	; (adr r2, 8003914 <_ZN13ButtonManager12processEventEv+0x164>)
 800390e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003912:	bf00      	nop
 8003914:	080039d3 	.word	0x080039d3
 8003918:	08003929 	.word	0x08003929
 800391c:	08003931 	.word	0x08003931
 8003920:	08003953 	.word	0x08003953
 8003924:	08003997 	.word	0x08003997
        {
            case STATE_INITIAL:
            break;
            case STATE_WAIT:
            	Trace::outln("-- button manager waiting -- ");
 8003928:	482c      	ldr	r0, [pc, #176]	; (80039dc <_ZN13ButtonManager12processEventEv+0x22c>)
 800392a:	f000 fafd 	bl	8003f28 <_ZN5Trace5outlnEPKcz>
                break;
 800392e:	e050      	b.n	80039d2 <_ZN13ButtonManager12processEventEv+0x222>
            case STATE_PRESSED:
            	Trace::outln("-- button manager sees a button pressed -- ");
 8003930:	482b      	ldr	r0, [pc, #172]	; (80039e0 <_ZN13ButtonManager12processEventEv+0x230>)
 8003932:	f000 faf9 	bl	8003f28 <_ZN5Trace5outlnEPKcz>
                /* start the long pressed timeout
                 */
                getThread()->scheduleTimeout(tmLongPressed, longPressTimeout, this);
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	3318      	adds	r3, #24
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4610      	mov	r0, r2
 8003942:	4798      	blx	r3
 8003944:	4b27      	ldr	r3, [pc, #156]	; (80039e4 <_ZN13ButtonManager12processEventEv+0x234>)
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2100      	movs	r1, #0
 800394c:	f001 f85b 	bl	8004a06 <_ZN8XFThread15scheduleTimeoutEiiP11IXFReactive>
                break;
 8003950:	e03f      	b.n	80039d2 <_ZN13ButtonManager12processEventEv+0x222>
            case STATE_CLICK:
            	Trace::outln("-- button manager sees a button clicked -- ");
 8003952:	4825      	ldr	r0, [pc, #148]	; (80039e8 <_ZN13ButtonManager12processEventEv+0x238>)
 8003954:	f000 fae8 	bl	8003f28 <_ZN5Trace5outlnEPKcz>
                /* we must stop the long pressed timeout
                */
                getThread()->unscheduleTimeout(tmLongPressed, this);
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	3318      	adds	r3, #24
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4610      	mov	r0, r2
 8003964:	4798      	blx	r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	461a      	mov	r2, r3
 800396a:	2100      	movs	r1, #0
 800396c:	f001 f85e 	bl	8004a2c <_ZN8XFThread17unscheduleTimeoutEiP11IXFReactive>
                // generate a default transition to get out of here
                GEN(XFNullTransition());
 8003970:	687d      	ldr	r5, [r7, #4]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	330c      	adds	r3, #12
 8003978:	681c      	ldr	r4, [r3, #0]
 800397a:	2014      	movs	r0, #20
 800397c:	f002 ff21 	bl	80067c2 <_Znwj>
 8003980:	4603      	mov	r3, r0
 8003982:	461e      	mov	r6, r3
 8003984:	2200      	movs	r2, #0
 8003986:	2100      	movs	r1, #0
 8003988:	4630      	mov	r0, r6
 800398a:	f000 fd6f 	bl	800446c <_ZN16XFNullTransitionC1EiP11IXFReactive>
 800398e:	4631      	mov	r1, r6
 8003990:	4628      	mov	r0, r5
 8003992:	47a0      	blx	r4
                break;
 8003994:	e01d      	b.n	80039d2 <_ZN13ButtonManager12processEventEv+0x222>
            case STATE_LONG:
            	Trace::outln("-- button manager sees a long button press -- ");
 8003996:	4815      	ldr	r0, [pc, #84]	; (80039ec <_ZN13ButtonManager12processEventEv+0x23c>)
 8003998:	f000 fac6 	bl	8003f28 <_ZN5Trace5outlnEPKcz>
                // generate a default transition to get out of here
                GEN(XFNullTransition());
 800399c:	687d      	ldr	r5, [r7, #4]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	330c      	adds	r3, #12
 80039a4:	681c      	ldr	r4, [r3, #0]
 80039a6:	2014      	movs	r0, #20
 80039a8:	f002 ff0b 	bl	80067c2 <_Znwj>
 80039ac:	4603      	mov	r3, r0
 80039ae:	461e      	mov	r6, r3
 80039b0:	2200      	movs	r2, #0
 80039b2:	2100      	movs	r1, #0
 80039b4:	4630      	mov	r0, r6
 80039b6:	f000 fd59 	bl	800446c <_ZN16XFNullTransitionC1EiP11IXFReactive>
 80039ba:	4631      	mov	r1, r6
 80039bc:	4628      	mov	r0, r5
 80039be:	47a0      	blx	r4
                break;
 80039c0:	e007      	b.n	80039d2 <_ZN13ButtonManager12processEventEv+0x222>
        }
    }
    else
    {
        result = EventStatus::NotConsumed;
 80039c2:	f107 0310 	add.w	r3, r7, #16
 80039c6:	2102      	movs	r1, #2
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7ff fdf1 	bl	80035b0 <_ZN11EventStatusC1ENS_12eEventStatusE>
 80039ce:	7c3b      	ldrb	r3, [r7, #16]
 80039d0:	723b      	strb	r3, [r7, #8]
    }
    return result;
 80039d2:	7a3b      	ldrb	r3, [r7, #8]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	371c      	adds	r7, #28
 80039d8:	46bd      	mov	sp, r7
 80039da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039dc:	08007d6c 	.word	0x08007d6c
 80039e0:	08007d8c 	.word	0x08007d8c
 80039e4:	2000000c 	.word	0x2000000c
 80039e8:	08007db8 	.word	0x08007db8
 80039ec:	08007de4 	.word	0x08007de4

080039f0 <_ZN13ButtonManager5startEv>:

void ButtonManager::start()
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
    this->startBehavior();
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	3308      	adds	r3, #8
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4610      	mov	r0, r2
 8003a04:	4798      	blx	r3
}
 8003a06:	bf00      	nop
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <_ZN7Factory16buildApplicationEv>:
#include "board/button.h"
//#include "board/display/simpledisplay.h"
#include "factory.h"

void Factory::buildApplication()
{
 8003a0e:	b5b0      	push	{r4, r5, r7, lr}
 8003a10:	b082      	sub	sp, #8
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
	board::initialize();	// Initialize board specific stuff
 8003a16:	f000 f8e5 	bl	8003be4 <_ZN5board10initializeEv>

	//
	// Initialize objects
	//
	led().initialize();
 8003a1a:	f000 f8cf 	bl	8003bbc <_ZN7Factory3ledEv>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	4618      	mov	r0, r3
 8003a22:	f000 f9d4 	bl	8003dce <_ZN3Led10initializeEv>
	button().initialize();
 8003a26:	f000 f89b 	bl	8003b60 <_ZN7Factory6buttonEv>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f000 f967 	bl	8003d00 <_ZN6Button10initializeEv>
	buttonManager().initialize();
 8003a32:	f000 f85f 	bl	8003af4 <_ZN7Factory13buttonManagerEv>
 8003a36:	4603      	mov	r3, r0
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7ff fdc9 	bl	80035d0 <_ZN13ButtonManager10initializeEv>
#endif // USE_DISPLAY

	//
	// Initialize relations
	//
	buttonManager().initializeRelations(&button(), &led());
 8003a3e:	f000 f859 	bl	8003af4 <_ZN7Factory13buttonManagerEv>
 8003a42:	4604      	mov	r4, r0
 8003a44:	f000 f88c 	bl	8003b60 <_ZN7Factory6buttonEv>
 8003a48:	4605      	mov	r5, r0
 8003a4a:	f000 f8b7 	bl	8003bbc <_ZN7Factory3ledEv>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	461a      	mov	r2, r3
 8003a52:	4629      	mov	r1, r5
 8003a54:	4620      	mov	r0, r4
 8003a56:	f7ff fdc8 	bl	80035ea <_ZN13ButtonManager19initializeRelationsEP8ToButtonP3Led>
	button().initializeRelations(&buttonManager());
 8003a5a:	f000 f881 	bl	8003b60 <_ZN7Factory6buttonEv>
 8003a5e:	4604      	mov	r4, r0
 8003a60:	f000 f848 	bl	8003af4 <_ZN7Factory13buttonManagerEv>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d001      	beq.n	8003a6e <_ZN7Factory16buildApplicationEv+0x60>
 8003a6a:	330c      	adds	r3, #12
 8003a6c:	e000      	b.n	8003a70 <_ZN7Factory16buildApplicationEv+0x62>
 8003a6e:	2300      	movs	r3, #0
 8003a70:	4619      	mov	r1, r3
 8003a72:	4620      	mov	r0, r4
 8003a74:	f000 f962 	bl	8003d3c <_ZN6Button19initializeRelationsEP15ToButtonManager>
#endif // USE_DISPLAY

	//
	// Start state machines
	//
	buttonManager().start();
 8003a78:	f000 f83c 	bl	8003af4 <_ZN7Factory13buttonManagerEv>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7ff ffb6 	bl	80039f0 <_ZN13ButtonManager5startEv>
	button().start();
 8003a84:	f000 f86c 	bl	8003b60 <_ZN7Factory6buttonEv>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 f971 	bl	8003d72 <_ZN6Button5startEv>
}
 8003a90:	bf00      	nop
 8003a92:	3708      	adds	r7, #8
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bdb0      	pop	{r4, r5, r7, pc}

08003a98 <_ZN7Factory8instanceEv>:

//static
Factory & Factory::instance()
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
    static Factory theInstance;
 8003a9c:	4b0f      	ldr	r3, [pc, #60]	; (8003adc <_ZN7Factory8instanceEv+0x44>)
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	f3bf 8f5b 	dmb	ish
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	bf0c      	ite	eq
 8003aae:	2301      	moveq	r3, #1
 8003ab0:	2300      	movne	r3, #0
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00d      	beq.n	8003ad4 <_ZN7Factory8instanceEv+0x3c>
 8003ab8:	4808      	ldr	r0, [pc, #32]	; (8003adc <_ZN7Factory8instanceEv+0x44>)
 8003aba:	f002 fe73 	bl	80067a4 <__cxa_guard_acquire>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	bf14      	ite	ne
 8003ac4:	2301      	movne	r3, #1
 8003ac6:	2300      	moveq	r3, #0
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d002      	beq.n	8003ad4 <_ZN7Factory8instanceEv+0x3c>
 8003ace:	4803      	ldr	r0, [pc, #12]	; (8003adc <_ZN7Factory8instanceEv+0x44>)
 8003ad0:	f002 fe74 	bl	80067bc <__cxa_guard_release>
    return theInstance;
 8003ad4:	4b02      	ldr	r3, [pc, #8]	; (8003ae0 <_ZN7Factory8instanceEv+0x48>)
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	20000128 	.word	0x20000128
 8003ae0:	20000124 	.word	0x20000124

08003ae4 <__tcf_0>:

//static
ButtonManager & Factory::buttonManager()
{
	static ButtonManager bm;
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	4801      	ldr	r0, [pc, #4]	; (8003af0 <__tcf_0+0xc>)
 8003aea:	f7ff fde1 	bl	80036b0 <_ZN13ButtonManagerD1Ev>
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	2000012c 	.word	0x2000012c

08003af4 <_ZN7Factory13buttonManagerEv>:
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0
	static ButtonManager bm;
 8003af8:	4b12      	ldr	r3, [pc, #72]	; (8003b44 <_ZN7Factory13buttonManagerEv+0x50>)
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	f3bf 8f5b 	dmb	ish
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	bf0c      	ite	eq
 8003b0a:	2301      	moveq	r3, #1
 8003b0c:	2300      	movne	r3, #0
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d013      	beq.n	8003b3c <_ZN7Factory13buttonManagerEv+0x48>
 8003b14:	480b      	ldr	r0, [pc, #44]	; (8003b44 <_ZN7Factory13buttonManagerEv+0x50>)
 8003b16:	f002 fe45 	bl	80067a4 <__cxa_guard_acquire>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	bf14      	ite	ne
 8003b20:	2301      	movne	r3, #1
 8003b22:	2300      	moveq	r3, #0
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d008      	beq.n	8003b3c <_ZN7Factory13buttonManagerEv+0x48>
 8003b2a:	4807      	ldr	r0, [pc, #28]	; (8003b48 <_ZN7Factory13buttonManagerEv+0x54>)
 8003b2c:	f7ff fd9c 	bl	8003668 <_ZN13ButtonManagerC1Ev>
 8003b30:	4806      	ldr	r0, [pc, #24]	; (8003b4c <_ZN7Factory13buttonManagerEv+0x58>)
 8003b32:	f002 feaf 	bl	8006894 <atexit>
 8003b36:	4803      	ldr	r0, [pc, #12]	; (8003b44 <_ZN7Factory13buttonManagerEv+0x50>)
 8003b38:	f002 fe40 	bl	80067bc <__cxa_guard_release>

	return bm;
 8003b3c:	4b02      	ldr	r3, [pc, #8]	; (8003b48 <_ZN7Factory13buttonManagerEv+0x54>)
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	20000144 	.word	0x20000144
 8003b48:	2000012c 	.word	0x2000012c
 8003b4c:	08003ae5 	.word	0x08003ae5

08003b50 <__tcf_1>:

//static
Button & Factory::button()
{
	static Button button;
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	4801      	ldr	r0, [pc, #4]	; (8003b5c <__tcf_1+0xc>)
 8003b56:	f000 f89f 	bl	8003c98 <_ZN6ButtonD1Ev>
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	20000148 	.word	0x20000148

08003b60 <_ZN7Factory6buttonEv>:
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0
	static Button button;
 8003b64:	4b12      	ldr	r3, [pc, #72]	; (8003bb0 <_ZN7Factory6buttonEv+0x50>)
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	f3bf 8f5b 	dmb	ish
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	bf0c      	ite	eq
 8003b76:	2301      	moveq	r3, #1
 8003b78:	2300      	movne	r3, #0
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d013      	beq.n	8003ba8 <_ZN7Factory6buttonEv+0x48>
 8003b80:	480b      	ldr	r0, [pc, #44]	; (8003bb0 <_ZN7Factory6buttonEv+0x50>)
 8003b82:	f002 fe0f 	bl	80067a4 <__cxa_guard_acquire>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	bf14      	ite	ne
 8003b8c:	2301      	movne	r3, #1
 8003b8e:	2300      	moveq	r3, #0
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d008      	beq.n	8003ba8 <_ZN7Factory6buttonEv+0x48>
 8003b96:	4807      	ldr	r0, [pc, #28]	; (8003bb4 <_ZN7Factory6buttonEv+0x54>)
 8003b98:	f000 f85a 	bl	8003c50 <_ZN6ButtonC1Ev>
 8003b9c:	4806      	ldr	r0, [pc, #24]	; (8003bb8 <_ZN7Factory6buttonEv+0x58>)
 8003b9e:	f002 fe79 	bl	8006894 <atexit>
 8003ba2:	4803      	ldr	r0, [pc, #12]	; (8003bb0 <_ZN7Factory6buttonEv+0x50>)
 8003ba4:	f002 fe0a 	bl	80067bc <__cxa_guard_release>

	return button;
 8003ba8:	4b02      	ldr	r3, [pc, #8]	; (8003bb4 <_ZN7Factory6buttonEv+0x54>)
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	20000160 	.word	0x20000160
 8003bb4:	20000148 	.word	0x20000148
 8003bb8:	08003b51 	.word	0x08003b51

08003bbc <_ZN7Factory3ledEv>:

//static
Led & Factory::led()
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
	static Led led;

	return led;
 8003bc0:	4b02      	ldr	r3, [pc, #8]	; (8003bcc <_ZN7Factory3ledEv+0x10>)
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr
 8003bcc:	20000164 	.word	0x20000164

08003bd0 <Factory_buildApplication>:
	return display;
}
#endif // USE_DISPLAY

void Factory_buildApplication()
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
    Factory::instance().buildApplication();
 8003bd4:	f7ff ff60 	bl	8003a98 <_ZN7Factory8instanceEv>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7ff ff17 	bl	8003a0e <_ZN7Factory16buildApplicationEv>
}
 8003be0:	bf00      	nop
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <_ZN5board10initializeEv>:
#include "platform-config.h"
#include "trace/trace.h"
#include "board.h"

void board::initialize()
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
#if (USE_TRACE != 0)
	Trace::initialize();
 8003be8:	f000 f922 	bl	8003e30 <_ZN5Trace10initializeEv>
#endif // USE_TRACE
}
 8003bec:	bf00      	nop
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <_ZN8ToButtonC1Ev>:
{
	PRESSED,
	RELEASED
};

class ToButton
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	4a04      	ldr	r2, [pc, #16]	; (8003c0c <_ZN8ToButtonC1Ev+0x1c>)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	601a      	str	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4618      	mov	r0, r3
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr
 8003c0c:	080082f4 	.word	0x080082f4

08003c10 <_ZN8ToButtonD1Ev>:
{
public:
	virtual BState checkButtonState() = 0;

public:
	virtual ~ToButton() = default;
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	4a04      	ldr	r2, [pc, #16]	; (8003c2c <_ZN8ToButtonD1Ev+0x1c>)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	601a      	str	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4618      	mov	r0, r3
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr
 8003c2c:	080082f4 	.word	0x080082f4

08003c30 <_ZN8ToButtonD0Ev>:
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f7ff ffe9 	bl	8003c10 <_ZN8ToButtonD1Ev>
 8003c3e:	2104      	movs	r1, #4
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f002 fdad 	bl	80067a0 <_ZdlPvj>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3708      	adds	r7, #8
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <_ZN6ButtonC1Ev>:
#include "mcu/mcu.h"
#include "main.h"
#include "button.h"

Button::Button()
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 : pManager(nullptr),
   state(RELEASED)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7ff ffc8 	bl	8003bf0 <_ZN8ToButtonC1Ev>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	3304      	adds	r3, #4
 8003c64:	2100      	movs	r1, #0
 8003c66:	4618      	mov	r0, r3
 8003c68:	f000 fc78 	bl	800455c <_ZN10XFReactiveC1EP8XFThread>
 8003c6c:	4a08      	ldr	r2, [pc, #32]	; (8003c90 <_ZN6ButtonC1Ev+0x40>)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	601a      	str	r2, [r3, #0]
 8003c72:	4a08      	ldr	r2, [pc, #32]	; (8003c94 <_ZN6ButtonC1Ev+0x44>)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	605a      	str	r2, [r3, #4]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	611a      	str	r2, [r3, #16]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	751a      	strb	r2, [r3, #20]
{
}
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4618      	mov	r0, r3
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	080082b8 	.word	0x080082b8
 8003c94:	080082d0 	.word	0x080082d0

08003c98 <_ZN6ButtonD1Ev>:

Button::~Button()
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	4a09      	ldr	r2, [pc, #36]	; (8003cc8 <_ZN6ButtonD1Ev+0x30>)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	601a      	str	r2, [r3, #0]
 8003ca6:	4a09      	ldr	r2, [pc, #36]	; (8003ccc <_ZN6ButtonD1Ev+0x34>)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	605a      	str	r2, [r3, #4]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	3304      	adds	r3, #4
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f000 fc75 	bl	80045a0 <_ZN10XFReactiveD1Ev>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7ff ffa9 	bl	8003c10 <_ZN8ToButtonD1Ev>
{
}
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3708      	adds	r7, #8
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	080082b8 	.word	0x080082b8
 8003ccc:	080082d0 	.word	0x080082d0

08003cd0 <_ZThn4_N6ButtonD1Ev>:
class Button : public ToButton,
			   public XFReactive
{
public:
	Button();
    virtual ~Button();
 8003cd0:	f1a0 0004 	sub.w	r0, r0, #4
 8003cd4:	f7ff bfe0 	b.w	8003c98 <_ZN6ButtonD1Ev>

08003cd8 <_ZN6ButtonD0Ev>:
Button::~Button()
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
}
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f7ff ffd9 	bl	8003c98 <_ZN6ButtonD1Ev>
 8003ce6:	2118      	movs	r1, #24
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f002 fd59 	bl	80067a0 <_ZdlPvj>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3708      	adds	r7, #8
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <_ZThn4_N6ButtonD0Ev>:
 8003cf8:	f1a0 0004 	sub.w	r0, r0, #4
 8003cfc:	f7ff bfec 	b.w	8003cd8 <_ZN6ButtonD0Ev>

08003d00 <_ZN6Button10initializeEv>:

void Button::initialize()
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
	// Initialize hardware
	initializeHardware();
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 f80d 	bl	8003d28 <_ZN6Button18initializeHardwareEv>

	// Read actual button state (GPIO state)
	// (It may be pressed already at start up!)
	state = checkButtonState();
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	4798      	blx	r3
 8003d18:	4603      	mov	r3, r0
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	751a      	strb	r2, [r3, #20]
}
 8003d20:	bf00      	nop
 8003d22:	3708      	adds	r7, #8
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <_ZN6Button18initializeHardwareEv>:

void Button::initializeHardware()
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
    //
    // This means that in this method no additional hardware initialization
    // code must be called. It is already implemented in the MX_GPIO_Init()
    // function in the 'Core/Src/main.c' file and also called in the main()
    // function!
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <_ZN6Button19initializeRelationsEP15ToButtonManager>:

void Button::initializeRelations(ToButtonManager * p)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
	setButtonManager(p);
 8003d46:	6839      	ldr	r1, [r7, #0]
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f000 f804 	bl	8003d56 <_ZN6Button16setButtonManagerEP15ToButtonManager>
}
 8003d4e:	bf00      	nop
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <_ZN6Button16setButtonManagerEP15ToButtonManager>:

void Button::setButtonManager(ToButtonManager * p)
{
 8003d56:	b480      	push	{r7}
 8003d58:	b083      	sub	sp, #12
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
 8003d5e:	6039      	str	r1, [r7, #0]
	pManager = p;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	611a      	str	r2, [r3, #16]
}
 8003d66:	bf00      	nop
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr

08003d72 <_ZN6Button5startEv>:

void Button::start()
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b082      	sub	sp, #8
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
	startBehavior();	// Start state machine
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	1d1a      	adds	r2, r3, #4
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	3308      	adds	r3, #8
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4610      	mov	r0, r2
 8003d88:	4798      	blx	r3
}
 8003d8a:	bf00      	nop
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <_ZN6Button16checkButtonStateEv>:

BState Button::checkButtonState()
{
 8003d92:	b480      	push	{r7}
 8003d94:	b083      	sub	sp, #12
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
	// TODO: Implement method accordingly.
	return RELEASED;
 8003d9a:	2301      	movs	r3, #1
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <_ZN6Button12processEventEv>:
    // TODO: Call HAL_GPIO_ReadPin(...) function to get actual GPIO level of the button.
	return false;
}

EventStatus Button::processEvent()
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
    // Do we handle the event?
    EventStatus result = EventStatus::Unknown;
 8003db0:	f107 030c 	add.w	r3, r7, #12
 8003db4:	2100      	movs	r1, #0
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7ff fbfa 	bl	80035b0 <_ZN11EventStatusC1ENS_12eEventStatusE>

    // TODO: Implement state-machine here.
    return result;
 8003dbc:	7b3b      	ldrb	r3, [r7, #12]
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <_ZThn4_N6Button12processEventEv>:

    void start();							///< Starts the state-machine.

protected:
    void initializeHardware();				///< Initializes hardware needed by this class.
    virtual EventStatus processEvent(); 	///< Implements the state machine for this class.
 8003dc6:	f1a0 0004 	sub.w	r0, r0, #4
 8003dca:	f7ff bfed 	b.w	8003da8 <_ZN6Button12processEventEv>

08003dce <_ZN3Led10initializeEv>:
#include "mcu/mcu.h"
#include "main.h"
#include "board/led.h"

void Led::initialize()
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b083      	sub	sp, #12
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
    //
    // This means that in this method no additional hardware initialization
    // code must be called. It is already implemented in the MX_GPIO_Init()
    // function in the 'Core/Src/main.c' file and also called in the main()
    // function!
}
 8003dd6:	bf00      	nop
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
	...

08003de4 <_ZN4Uart4uartEh>:
	/**
	 * Static accessor to the instances of UART. Used by the factory.
	 * You should not use this method directly. Use the factory to
	 * access an UART instead.
	 */
	static inline Uart & uart(const unsigned char uartNbr)
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	4603      	mov	r3, r0
 8003dec:	71fb      	strb	r3, [r7, #7]
	{
		assert(uartNbr < UART_COUNT);
 8003dee:	79fb      	ldrb	r3, [r7, #7]
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d905      	bls.n	8003e00 <_ZN4Uart4uartEh+0x1c>
 8003df4:	4b06      	ldr	r3, [pc, #24]	; (8003e10 <_ZN4Uart4uartEh+0x2c>)
 8003df6:	4a07      	ldr	r2, [pc, #28]	; (8003e14 <_ZN4Uart4uartEh+0x30>)
 8003df8:	2125      	movs	r1, #37	; 0x25
 8003dfa:	4807      	ldr	r0, [pc, #28]	; (8003e18 <_ZN4Uart4uartEh+0x34>)
 8003dfc:	f002 fd2c 	bl	8006858 <__assert_func>
		return *_sUart[uartNbr];
 8003e00:	79fb      	ldrb	r3, [r7, #7]
 8003e02:	4a06      	ldr	r2, [pc, #24]	; (8003e1c <_ZN4Uart4uartEh+0x38>)
 8003e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3708      	adds	r7, #8
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	08007e14 	.word	0x08007e14
 8003e14:	08007e2c 	.word	0x08007e2c
 8003e18:	08007e54 	.word	0x08007e54
 8003e1c:	20000300 	.word	0x20000300

08003e20 <__tcf_0>:
	static Uart uart(1);	// UART2

	uart.initialize(115200);
#endif // TC_STM32
#ifdef TC_STM32CUBEIDE
	static Uart uart(TRACE_UART_INDEX, &huart2);    // UART2
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	4801      	ldr	r0, [pc, #4]	; (8003e2c <__tcf_0+0xc>)
 8003e26:	f000 f921 	bl	800406c <_ZN4UartD1Ev>
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	20000268 	.word	0x20000268

08003e30 <_ZN5Trace10initializeEv>:
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	af00      	add	r7, sp, #0
	static Uart uart(TRACE_UART_INDEX, &huart2);    // UART2
 8003e34:	4b14      	ldr	r3, [pc, #80]	; (8003e88 <_ZN5Trace10initializeEv+0x58>)
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	f3bf 8f5b 	dmb	ish
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	bf0c      	ite	eq
 8003e46:	2301      	moveq	r3, #1
 8003e48:	2300      	movne	r3, #0
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d016      	beq.n	8003e7e <_ZN5Trace10initializeEv+0x4e>
 8003e50:	480d      	ldr	r0, [pc, #52]	; (8003e88 <_ZN5Trace10initializeEv+0x58>)
 8003e52:	f002 fca7 	bl	80067a4 <__cxa_guard_acquire>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	bf14      	ite	ne
 8003e5c:	2301      	movne	r3, #1
 8003e5e:	2300      	moveq	r3, #0
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00b      	beq.n	8003e7e <_ZN5Trace10initializeEv+0x4e>
 8003e66:	2300      	movs	r3, #0
 8003e68:	4a08      	ldr	r2, [pc, #32]	; (8003e8c <_ZN5Trace10initializeEv+0x5c>)
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	4808      	ldr	r0, [pc, #32]	; (8003e90 <_ZN5Trace10initializeEv+0x60>)
 8003e6e:	f000 f8b1 	bl	8003fd4 <_ZN4UartC1EhP20__UART_HandleTypeDefb>
 8003e72:	4808      	ldr	r0, [pc, #32]	; (8003e94 <_ZN5Trace10initializeEv+0x64>)
 8003e74:	f002 fd0e 	bl	8006894 <atexit>
 8003e78:	4803      	ldr	r0, [pc, #12]	; (8003e88 <_ZN5Trace10initializeEv+0x58>)
 8003e7a:	f002 fc9f 	bl	80067bc <__cxa_guard_release>

	// Baud-rate is defined by STM32CubeIDE's .ioc file
    uart.initialize();
 8003e7e:	4804      	ldr	r0, [pc, #16]	; (8003e90 <_ZN5Trace10initializeEv+0x60>)
 8003e80:	f000 f914 	bl	80040ac <_ZN4Uart10initializeEv>
#endif // TC_STM32CUBEIDE
#endif
#endif
}
 8003e84:	bf00      	nop
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	200002f8 	.word	0x200002f8
 8003e8c:	20000098 	.word	0x20000098
 8003e90:	20000268 	.word	0x20000268
 8003e94:	08003e21 	.word	0x08003e21

08003e98 <_ZN5Trace6_printEPcb>:
 * @param str The string to print
 * @param addEndLine If true check if the string ends with a new line.
 */
// static
void Trace::_print(char * str, bool addEndLine /* = false */)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	70fb      	strb	r3, [r7, #3]
#if (USE_TRACE != 0)
	const int len = strlen(str);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f7fc f993 	bl	80001d0 <strlen>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	60fb      	str	r3, [r7, #12]

	if (addEndLine && (str[len - 1] != '\n'))
 8003eae:	78fb      	ldrb	r3, [r7, #3]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d01a      	beq.n	8003eea <_ZN5Trace6_printEPcb+0x52>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	4413      	add	r3, r2
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	2b0a      	cmp	r3, #10
 8003ec0:	d013      	beq.n	8003eea <_ZN5Trace6_printEPcb+0x52>
		str[len + 1] = '\n';
		str[len + 2] = '\0';
		assert(len < TRACE_BUFFER_SIZE - 2);	// String too long for buffer
#else
		// Add "\r" (linux host)
		str[len] 	 = '\r';
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	220d      	movs	r2, #13
 8003eca:	701a      	strb	r2, [r3, #0]
		str[len + 1] = '\0';
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	3301      	adds	r3, #1
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	701a      	strb	r2, [r3, #0]
		assert(len < TRACE_BUFFER_SIZE - 1);	// String too long for buffer
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2bfe      	cmp	r3, #254	; 0xfe
 8003edc:	dd0e      	ble.n	8003efc <_ZN5Trace6_printEPcb+0x64>
 8003ede:	4b0e      	ldr	r3, [pc, #56]	; (8003f18 <_ZN5Trace6_printEPcb+0x80>)
 8003ee0:	4a0e      	ldr	r2, [pc, #56]	; (8003f1c <_ZN5Trace6_printEPcb+0x84>)
 8003ee2:	2143      	movs	r1, #67	; 0x43
 8003ee4:	480e      	ldr	r0, [pc, #56]	; (8003f20 <_ZN5Trace6_printEPcb+0x88>)
 8003ee6:	f002 fcb7 	bl	8006858 <__assert_func>
#endif
	}
	else
	{
		assert(len < TRACE_BUFFER_SIZE);		// String too long for buffer
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2bff      	cmp	r3, #255	; 0xff
 8003eee:	dd05      	ble.n	8003efc <_ZN5Trace6_printEPcb+0x64>
 8003ef0:	4b0c      	ldr	r3, [pc, #48]	; (8003f24 <_ZN5Trace6_printEPcb+0x8c>)
 8003ef2:	4a0a      	ldr	r2, [pc, #40]	; (8003f1c <_ZN5Trace6_printEPcb+0x84>)
 8003ef4:	2148      	movs	r1, #72	; 0x48
 8003ef6:	480a      	ldr	r0, [pc, #40]	; (8003f20 <_ZN5Trace6_printEPcb+0x88>)
 8003ef8:	f002 fcae 	bl	8006858 <__assert_func>
	}

	Uart::uart(TRACE_UART_INDEX).write(str);
 8003efc:	2001      	movs	r0, #1
 8003efe:	f7ff ff71 	bl	8003de4 <_ZN4Uart4uartEh>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2200      	movs	r2, #0
 8003f06:	6879      	ldr	r1, [r7, #4]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f000 f8da 	bl	80040c2 <_ZN4Uart5writeEPKcj>
#endif // USE_TRACE
}
 8003f0e:	bf00      	nop
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	08007ecc 	.word	0x08007ecc
 8003f1c:	08007ee8 	.word	0x08007ee8
 8003f20:	08007f10 	.word	0x08007f10
 8003f24:	08007f48 	.word	0x08007f48

08003f28 <_ZN5Trace5outlnEPKcz>:

// static
void Trace::outln(const char * const format, ...)
{
 8003f28:	b40f      	push	{r0, r1, r2, r3}
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b082      	sub	sp, #8
 8003f2e:	af00      	add	r7, sp, #0
#if (USE_TRACE != 0)
	va_list args;

	va_start(args, format);
 8003f30:	f107 0314 	add.w	r3, r7, #20
 8003f34:	607b      	str	r3, [r7, #4]
	vsiprintf(strTrace, format, args);
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	6939      	ldr	r1, [r7, #16]
 8003f3a:	4807      	ldr	r0, [pc, #28]	; (8003f58 <_ZN5Trace5outlnEPKcz+0x30>)
 8003f3c:	f003 f964 	bl	8007208 <vsiprintf>
	va_end(args);

	_print(strTrace, true);
 8003f40:	2101      	movs	r1, #1
 8003f42:	4805      	ldr	r0, [pc, #20]	; (8003f58 <_ZN5Trace5outlnEPKcz+0x30>)
 8003f44:	f7ff ffa8 	bl	8003e98 <_ZN5Trace6_printEPcb>
#endif // USE_TRACE
}
 8003f48:	bf00      	nop
 8003f4a:	3708      	adds	r7, #8
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f52:	b004      	add	sp, #16
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	20000168 	.word	0x20000168

08003f5c <enterCritical>:
volatile unsigned char bInISR = 0;
volatile unsigned char bEnterCriticalRegionNested = 0;


void enterCritical()
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	af00      	add	r7, sp, #0
	// Only disable interrupts when not calling from an ISR
	if (!inISR())
 8003f60:	4b0b      	ldr	r3, [pc, #44]	; (8003f90 <enterCritical+0x34>)
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10c      	bne.n	8003f84 <enterCritical+0x28>
	{
		if (!bEnterCriticalRegionNested)
 8003f6a:	4b0a      	ldr	r3, [pc, #40]	; (8003f94 <enterCritical+0x38>)
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d100      	bne.n	8003f76 <enterCritical+0x1a>
		{
			// Turn off the priority configurable interrupts
			asm volatile ("cpsid i");
 8003f74:	b672      	cpsid	i
		}
		bEnterCriticalRegionNested++;
 8003f76:	4b07      	ldr	r3, [pc, #28]	; (8003f94 <enterCritical+0x38>)
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	b2da      	uxtb	r2, r3
 8003f80:	4b04      	ldr	r3, [pc, #16]	; (8003f94 <enterCritical+0x38>)
 8003f82:	701a      	strb	r2, [r3, #0]
	}

}
 8003f84:	bf00      	nop
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	200002fc 	.word	0x200002fc
 8003f94:	200002fd 	.word	0x200002fd

08003f98 <exitCritical>:

void exitCritical()
{
 8003f98:	b480      	push	{r7}
 8003f9a:	af00      	add	r7, sp, #0
	// Only enable interrupts when not calling from an ISR
	if (!inISR())
 8003f9c:	4b0b      	ldr	r3, [pc, #44]	; (8003fcc <exitCritical+0x34>)
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10c      	bne.n	8003fc0 <exitCritical+0x28>
	{
		bEnterCriticalRegionNested--;
 8003fa6:	4b0a      	ldr	r3, [pc, #40]	; (8003fd0 <exitCritical+0x38>)
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	3b01      	subs	r3, #1
 8003fae:	b2da      	uxtb	r2, r3
 8003fb0:	4b07      	ldr	r3, [pc, #28]	; (8003fd0 <exitCritical+0x38>)
 8003fb2:	701a      	strb	r2, [r3, #0]

		if (!bEnterCriticalRegionNested)
 8003fb4:	4b06      	ldr	r3, [pc, #24]	; (8003fd0 <exitCritical+0x38>)
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d100      	bne.n	8003fc0 <exitCritical+0x28>
		{
			// Turn on the interrupts with configurable priority
			asm volatile("cpsie i");
 8003fbe:	b662      	cpsie	i
		}
	}
}
 8003fc0:	bf00      	nop
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	200002fc 	.word	0x200002fc
 8003fd0:	200002fd 	.word	0x200002fd

08003fd4 <_ZN4UartC1EhP20__UART_HandleTypeDefb>:
#endif

Uart * Uart::_sUart[Uart::UART_COUNT];				// Comment: Startup script should initialize pointers to zero (.bss section)
bool Uart::_sInitialized[Uart::UART_COUNT];			// Same for other arrays

Uart::Uart(const unsigned char uartNbr, UART_HandleTypeDef * uartHandle, bool bTxDMA /* = false */)
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	607a      	str	r2, [r7, #4]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	72fb      	strb	r3, [r7, #11]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	72bb      	strb	r3, [r7, #10]
 : _uartNbr(-1),
   _pUartHandle(NULL),
   _bTxDMA(bTxDMA)
 8003fe8:	4a1a      	ldr	r2, [pc, #104]	; (8004054 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x80>)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	601a      	str	r2, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	22ff      	movs	r2, #255	; 0xff
 8003ff2:	711a      	strb	r2, [r3, #4]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	609a      	str	r2, [r3, #8]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	7aba      	ldrb	r2, [r7, #10]
 8003ffe:	731a      	strb	r2, [r3, #12]
{
	assert(uartNbr < UART_COUNT);
 8004000:	7afb      	ldrb	r3, [r7, #11]
 8004002:	2b02      	cmp	r3, #2
 8004004:	d905      	bls.n	8004012 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x3e>
 8004006:	4b14      	ldr	r3, [pc, #80]	; (8004058 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x84>)
 8004008:	4a14      	ldr	r2, [pc, #80]	; (800405c <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x88>)
 800400a:	2111      	movs	r1, #17
 800400c:	4814      	ldr	r0, [pc, #80]	; (8004060 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x8c>)
 800400e:	f002 fc23 	bl	8006858 <__assert_func>

	if (uartNbr < UART_COUNT)
 8004012:	7afb      	ldrb	r3, [r7, #11]
 8004014:	2b02      	cmp	r3, #2
 8004016:	d817      	bhi.n	8004048 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x74>
    {
        if (!_sUart[uartNbr])
 8004018:	7afb      	ldrb	r3, [r7, #11]
 800401a:	4a12      	ldr	r2, [pc, #72]	; (8004064 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x90>)
 800401c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d10b      	bne.n	800403c <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x68>
        {
            // Register instance
            _sUart[uartNbr] = this;
 8004024:	7afb      	ldrb	r3, [r7, #11]
 8004026:	490f      	ldr	r1, [pc, #60]	; (8004064 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x90>)
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            _uartNbr = uartNbr;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	7afa      	ldrb	r2, [r7, #11]
 8004032:	711a      	strb	r2, [r3, #4]

            _pUartHandle = uartHandle;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	609a      	str	r2, [r3, #8]
 800403a:	e005      	b.n	8004048 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x74>
        }
        else
        {
            assert(false);  // Error: Instance for specified UART already exists.
 800403c:	4b0a      	ldr	r3, [pc, #40]	; (8004068 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x94>)
 800403e:	4a07      	ldr	r2, [pc, #28]	; (800405c <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x88>)
 8004040:	211f      	movs	r1, #31
 8004042:	4807      	ldr	r0, [pc, #28]	; (8004060 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x8c>)
 8004044:	f002 fc08 	bl	8006858 <__assert_func>
        }
    }
}
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	4618      	mov	r0, r3
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	08008308 	.word	0x08008308
 8004058:	08007f60 	.word	0x08007f60
 800405c:	08007f78 	.word	0x08007f78
 8004060:	08007fb0 	.word	0x08007fb0
 8004064:	20000300 	.word	0x20000300
 8004068:	08007fe8 	.word	0x08007fe8

0800406c <_ZN4UartD1Ev>:

Uart::~Uart()
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	4a04      	ldr	r2, [pc, #16]	; (8004088 <_ZN4UartD1Ev+0x1c>)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	601a      	str	r2, [r3, #0]
{

}
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4618      	mov	r0, r3
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr
 8004088:	08008308 	.word	0x08008308

0800408c <_ZN4UartD0Ev>:
Uart::~Uart()
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
}
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f7ff ffe9 	bl	800406c <_ZN4UartD1Ev>
 800409a:	2190      	movs	r1, #144	; 0x90
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f002 fb7f 	bl	80067a0 <_ZdlPvj>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4618      	mov	r0, r3
 80040a6:	3708      	adds	r7, #8
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <_ZN4Uart10initializeEv>:

bool Uart::initialize()
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
	return true;
 80040b4:	2301      	movs	r3, #1
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	370c      	adds	r7, #12
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr

080040c2 <_ZN4Uart5writeEPKcj>:
    __HAL_UART_DISABLE(_pUartHandle);
    return true;
}

void Uart::write(const char * str, unsigned int length /* = 0 */)
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b084      	sub	sp, #16
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	60f8      	str	r0, [r7, #12]
 80040ca:	60b9      	str	r1, [r7, #8]
 80040cc:	607a      	str	r2, [r7, #4]
	if (!length)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d103      	bne.n	80040dc <_ZN4Uart5writeEPKcj+0x1a>
	{
		length = strlen(str);
 80040d4:	68b8      	ldr	r0, [r7, #8]
 80040d6:	f7fc f87b 	bl	80001d0 <strlen>
 80040da:	6078      	str	r0, [r7, #4]
	}

    if (!_bTxDMA)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	7b1b      	ldrb	r3, [r3, #12]
 80040e0:	f083 0301 	eor.w	r3, r3, #1
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d008      	beq.n	80040fc <_ZN4Uart5writeEPKcj+0x3a>
    {   // Transmit without DMA
        // Send next character
        HAL_UART_Transmit(_pUartHandle, (uint8_t *)str, length, 50);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6898      	ldr	r0, [r3, #8]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	2332      	movs	r3, #50	; 0x32
 80040f4:	68b9      	ldr	r1, [r7, #8]
 80040f6:	f7fe fc37 	bl	8002968 <HAL_UART_Transmit>
    }
    else
    {   // TX DMA enabled
        writeUsingDMA((const uint8_t *)str, length);
    }
}
 80040fa:	e004      	b.n	8004106 <_ZN4Uart5writeEPKcj+0x44>
        writeUsingDMA((const uint8_t *)str, length);
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	68b9      	ldr	r1, [r7, #8]
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f000 f805 	bl	8004110 <_ZN4Uart13writeUsingDMAEPKhm>
}
 8004106:	bf00      	nop
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
	...

08004110 <_ZN4Uart13writeUsingDMAEPKhm>:

void Uart::writeUsingDMA(const uint8_t * str, uint32_t length)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
    assert(length <= sizeof(_pTxDmaBuffer));
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b80      	cmp	r3, #128	; 0x80
 8004120:	d905      	bls.n	800412e <_ZN4Uart13writeUsingDMAEPKhm+0x1e>
 8004122:	4b13      	ldr	r3, [pc, #76]	; (8004170 <_ZN4Uart13writeUsingDMAEPKhm+0x60>)
 8004124:	4a13      	ldr	r2, [pc, #76]	; (8004174 <_ZN4Uart13writeUsingDMAEPKhm+0x64>)
 8004126:	2150      	movs	r1, #80	; 0x50
 8004128:	4813      	ldr	r0, [pc, #76]	; (8004178 <_ZN4Uart13writeUsingDMAEPKhm+0x68>)
 800412a:	f002 fb95 	bl	8006858 <__assert_func>

    // Copy data to TX DMA buffer
    ::memcpy(_pTxDmaBuffer, str, length);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	330d      	adds	r3, #13
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	68b9      	ldr	r1, [r7, #8]
 8004136:	4618      	mov	r0, r3
 8004138:	f002 fbfe 	bl	8006938 <memcpy>

    // Check that a Tx process is not already ongoing
    // (should never happen, but who knows!)
    while (_pUartHandle->gState != HAL_UART_STATE_READY)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004142:	2b20      	cmp	r3, #32
 8004144:	bf14      	ite	ne
 8004146:	2301      	movne	r3, #1
 8004148:	2300      	moveq	r3, #0
 800414a:	b2db      	uxtb	r3, r3
 800414c:	2b00      	cmp	r3, #0
 800414e:	d001      	beq.n	8004154 <_ZN4Uart13writeUsingDMAEPKhm+0x44>
    { continue; }
 8004150:	bf00      	nop
    while (_pUartHandle->gState != HAL_UART_STATE_READY)
 8004152:	e7f3      	b.n	800413c <_ZN4Uart13writeUsingDMAEPKhm+0x2c>

    // Give data to TX DMA
    HAL_UART_Transmit_DMA(_pUartHandle, _pTxDmaBuffer, length);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6898      	ldr	r0, [r3, #8]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	330d      	adds	r3, #13
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	b292      	uxth	r2, r2
 8004160:	4619      	mov	r1, r3
 8004162:	f7fe fc95 	bl	8002a90 <HAL_UART_Transmit_DMA>
}
 8004166:	bf00      	nop
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	08007ff0 	.word	0x08007ff0
 8004174:	08008010 	.word	0x08008010
 8004178:	08007fb0 	.word	0x08007fb0

0800417c <_ZN8IXFEventC1ENS_10eEventTypeEiP11IXFReactive>:

public :
    /**
     * Default class constructor
     */
    IXFEvent(eEventType eventType, int id, IXFReactive * pBehavior) : _eventType(eventType), _id(id), _pBehavior(pBehavior) { _eventStatus.shouldDelete = true; }
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	607a      	str	r2, [r7, #4]
 8004186:	603b      	str	r3, [r7, #0]
 8004188:	460b      	mov	r3, r1
 800418a:	72fb      	strb	r3, [r7, #11]
 800418c:	4a0d      	ldr	r2, [pc, #52]	; (80041c4 <_ZN8IXFEventC1ENS_10eEventTypeEiP11IXFReactive+0x48>)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	601a      	str	r2, [r3, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	7afa      	ldrb	r2, [r7, #11]
 8004196:	711a      	strb	r2, [r3, #4]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	609a      	str	r2, [r3, #8]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	330c      	adds	r3, #12
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 f830 	bl	8004208 <_ZN8IXFEvent13_tEventStatusC1Ev>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	683a      	ldr	r2, [r7, #0]
 80041ac:	611a      	str	r2, [r3, #16]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	7b13      	ldrb	r3, [r2, #12]
 80041b2:	f043 0301 	orr.w	r3, r3, #1
 80041b6:	7313      	strb	r3, [r2, #12]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	4618      	mov	r0, r3
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	08008328 	.word	0x08008328

080041c8 <_ZN8IXFEventD1Ev>:
    virtual ~IXFEvent() {}		///< Class destructor
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	4a04      	ldr	r2, [pc, #16]	; (80041e4 <_ZN8IXFEventD1Ev+0x1c>)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	601a      	str	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4618      	mov	r0, r3
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	08008328 	.word	0x08008328

080041e8 <_ZN8IXFEventD0Ev>:
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f7ff ffe9 	bl	80041c8 <_ZN8IXFEventD1Ev>
 80041f6:	2114      	movs	r1, #20
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f002 fad1 	bl	80067a0 <_ZdlPvj>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4618      	mov	r0, r3
 8004202:	3708      	adds	r7, #8
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <_ZN8IXFEvent13_tEventStatusC1Ev>:
protected:
    typedef struct _tEventStatus
    {
        unsigned char shouldDelete : 1;	///< True in case the event should be deleted after consume.

        _tEventStatus()
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
        {
            shouldDelete = true;
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	7813      	ldrb	r3, [r2, #0]
 8004214:	f043 0301 	orr.w	r3, r3, #1
 8004218:	7013      	strb	r3, [r2, #0]
        }
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4618      	mov	r0, r3
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <_ZN12InitialEventC1Ev>:
#include "xf.h"
#include "initialevent.h"

InitialEvent::InitialEvent()
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
    : IXFEvent(IXFEvent::Initial, 0, NULL)
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	2300      	movs	r3, #0
 8004234:	2200      	movs	r2, #0
 8004236:	2101      	movs	r1, #1
 8004238:	f7ff ffa0 	bl	800417c <_ZN8IXFEventC1ENS_10eEventTypeEiP11IXFReactive>
 800423c:	4a03      	ldr	r2, [pc, #12]	; (800424c <_ZN12InitialEventC1Ev+0x24>)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	601a      	str	r2, [r3, #0]
{
}
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4618      	mov	r0, r3
 8004246:	3708      	adds	r7, #8
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	08008318 	.word	0x08008318

08004250 <_ZN12InitialEventD1Ev>:

InitialEvent::~InitialEvent()
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	4a05      	ldr	r2, [pc, #20]	; (8004270 <_ZN12InitialEventD1Ev+0x20>)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	601a      	str	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4618      	mov	r0, r3
 8004262:	f7ff ffb1 	bl	80041c8 <_ZN8IXFEventD1Ev>
{

}
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4618      	mov	r0, r3
 800426a:	3708      	adds	r7, #8
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	08008318 	.word	0x08008318

08004274 <_ZN12InitialEventD0Ev>:
InitialEvent::~InitialEvent()
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
}
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f7ff ffe7 	bl	8004250 <_ZN12InitialEventD1Ev>
 8004282:	2114      	movs	r1, #20
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f002 fa8b 	bl	80067a0 <_ZdlPvj>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4618      	mov	r0, r3
 800428e:	3708      	adds	r7, #8
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <_ZNK16XFTimeoutManager12tickIntervalEv>:
    void start();

    void scheduleTimeout(int timeoutId, int interval, IXFReactive * pReactive);
    void unscheduleTimeout(int timeoutId, IXFReactive * pReactive);
    void tick();														///< Called regularly in XFTimeoutManager::_tickInterval time
    inline int tickInterval() const { return _tickInterval; }			///< Returns tick time interval in milliseconds.
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	4618      	mov	r0, r3
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <_ZN2XF4initEi>:
/**
 * Initializes the eXecution Framework (XF). Call
 * this method prior to initialize the other objects of the system.
 */
void XF::init(int timeInterval)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
    // Create and initialize XFTimeoutManager
    XFTimeoutManager::getInstance()->setTickInterval(timeInterval);
 80042b4:	f001 fc3e 	bl	8005b34 <_ZN16XFTimeoutManager11getInstanceEv>
 80042b8:	4603      	mov	r3, r0
 80042ba:	6879      	ldr	r1, [r7, #4]
 80042bc:	4618      	mov	r0, r3
 80042be:	f001 fc4f 	bl	8005b60 <_ZN16XFTimeoutManager15setTickIntervalEi>
    // Start it
    XFTimeoutManager::getInstance()->start();
 80042c2:	f001 fc37 	bl	8005b34 <_ZN16XFTimeoutManager11getInstanceEv>
 80042c6:	4603      	mov	r3, r0
 80042c8:	4618      	mov	r0, r3
 80042ca:	f001 fc57 	bl	8005b7c <_ZN16XFTimeoutManager5startEv>
}
 80042ce:	bf00      	nop
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
	...

080042d8 <_ZN2XF5startEv>:


#if defined(TC_STM32) || defined(TC_STM32CUBEIDE) /*******************************************************************/

void XF::start()
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0
    _isRunning = true;     // From here the XF is running
 80042dc:	4b03      	ldr	r3, [pc, #12]	; (80042ec <_ZN2XF5startEv+0x14>)
 80042de:	2201      	movs	r2, #1
 80042e0:	701a      	strb	r2, [r3, #0]

    _mainThread.start();
 80042e2:	4803      	ldr	r0, [pc, #12]	; (80042f0 <_ZN2XF5startEv+0x18>)
 80042e4:	f000 fb36 	bl	8004954 <_ZN8XFThread5startEv>
}
 80042e8:	bf00      	nop
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	2000030c 	.word	0x2000030c
 80042f0:	20000310 	.word	0x20000310

080042f4 <_ZN2XF13getMainThreadEv>:

#endif /**************************************************************************************************************/


XFThread * XF::getMainThread()
{
 80042f4:	b480      	push	{r7}
 80042f6:	af00      	add	r7, sp, #0
    return &_mainThread;
 80042f8:	4b02      	ldr	r3, [pc, #8]	; (8004304 <_ZN2XF13getMainThreadEv+0x10>)
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	20000310 	.word	0x20000310

08004308 <_ZN2XF9isRunningEv>:

bool XF::isRunning()
{
 8004308:	b480      	push	{r7}
 800430a:	af00      	add	r7, sp, #0
    return _isRunning;
 800430c:	4b03      	ldr	r3, [pc, #12]	; (800431c <_ZN2XF9isRunningEv+0x14>)
 800430e:	781b      	ldrb	r3, [r3, #0]
}
 8004310:	4618      	mov	r0, r3
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	2000030c 	.word	0x2000030c

08004320 <XF_init>:

void XF_init(int timeInterval)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
    XF::init(timeInterval);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f7ff ffbf 	bl	80042ac <_ZN2XF4initEi>
}
 800432e:	bf00      	nop
 8004330:	3708      	adds	r7, #8
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <XF_start>:

void XF_start()
{
 8004336:	b580      	push	{r7, lr}
 8004338:	af00      	add	r7, sp, #0
    XF::start();
 800433a:	f7ff ffcd 	bl	80042d8 <_ZN2XF5startEv>
}
 800433e:	bf00      	nop
 8004340:	bd80      	pop	{r7, pc}

08004342 <XF_isRunning>:

bool XF_isRunning()
{
 8004342:	b580      	push	{r7, lr}
 8004344:	af00      	add	r7, sp, #0
    return XF::isRunning();
 8004346:	f7ff ffdf 	bl	8004308 <_ZN2XF9isRunningEv>
 800434a:	4603      	mov	r3, r0
}
 800434c:	4618      	mov	r0, r3
 800434e:	bd80      	pop	{r7, pc}

08004350 <XF_tick>:

void XF_tick()
{
 8004350:	b580      	push	{r7, lr}
 8004352:	af00      	add	r7, sp, #0
    enterISR();                                     // Tell critical section we are in an ISR
 8004354:	4b09      	ldr	r3, [pc, #36]	; (800437c <XF_tick+0x2c>)
 8004356:	2201      	movs	r2, #1
 8004358:	701a      	strb	r2, [r3, #0]
    if (XF::isRunning())                            // Call tick only if XF is running
 800435a:	f7ff ffd5 	bl	8004308 <_ZN2XF9isRunningEv>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d005      	beq.n	8004370 <XF_tick+0x20>
    {
        XFTimeoutManager::getInstance()->tick();    // Call framework hook tick function
 8004364:	f001 fbe6 	bl	8005b34 <_ZN16XFTimeoutManager11getInstanceEv>
 8004368:	4603      	mov	r3, r0
 800436a:	4618      	mov	r0, r3
 800436c:	f001 fc48 	bl	8005c00 <_ZN16XFTimeoutManager4tickEv>
    }
    exitISR();
 8004370:	4b02      	ldr	r3, [pc, #8]	; (800437c <XF_tick+0x2c>)
 8004372:	2200      	movs	r2, #0
 8004374:	701a      	strb	r2, [r3, #0]
}
 8004376:	bf00      	nop
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	200002fc 	.word	0x200002fc

08004380 <XF_tickIntervalInMilliseconds>:

int32_t XF_tickIntervalInMilliseconds()
{
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0
    return XFTimeoutManager::getInstance()->tickInterval();
 8004384:	f001 fbd6 	bl	8005b34 <_ZN16XFTimeoutManager11getInstanceEv>
 8004388:	4603      	mov	r3, r0
 800438a:	4618      	mov	r0, r3
 800438c:	f7ff ff82 	bl	8004294 <_ZNK16XFTimeoutManager12tickIntervalEv>
 8004390:	4603      	mov	r3, r0
}
 8004392:	4618      	mov	r0, r3
 8004394:	bd80      	pop	{r7, pc}
	...

08004398 <_Z41__static_initialization_and_destruction_0ii>:
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d107      	bne.n	80043b8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d102      	bne.n	80043b8 <_Z41__static_initialization_and_destruction_0ii+0x20>
XFThread XF::_mainThread;
 80043b2:	4809      	ldr	r0, [pc, #36]	; (80043d8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80043b4:	f000 fa94 	bl	80048e0 <_ZN8XFThreadC1Ev>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d107      	bne.n	80043ce <_Z41__static_initialization_and_destruction_0ii+0x36>
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d102      	bne.n	80043ce <_Z41__static_initialization_and_destruction_0ii+0x36>
 80043c8:	4803      	ldr	r0, [pc, #12]	; (80043d8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80043ca:	f000 fa9f 	bl	800490c <_ZN8XFThreadD1Ev>
}
 80043ce:	bf00      	nop
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	20000310 	.word	0x20000310

080043dc <_GLOBAL__sub_I__ZN2XF13_bInitializedE>:
 80043dc:	b580      	push	{r7, lr}
 80043de:	af00      	add	r7, sp, #0
 80043e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80043e4:	2001      	movs	r0, #1
 80043e6:	f7ff ffd7 	bl	8004398 <_Z41__static_initialization_and_destruction_0ii>
 80043ea:	bd80      	pop	{r7, pc}

080043ec <_GLOBAL__sub_D__ZN2XF13_bInitializedE>:
 80043ec:	b580      	push	{r7, lr}
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80043f4:	2000      	movs	r0, #0
 80043f6:	f7ff ffcf 	bl	8004398 <_Z41__static_initialization_and_destruction_0ii>
 80043fa:	bd80      	pop	{r7, pc}

080043fc <_ZN7XFEventC1EiP11IXFReactive>:
 * Constructor for the class
 *
 * \param id Identifier uniquely identifying the event in the context of the behavior
 * \param pBehavior The Behavior for which the event was constructed (will consume the event)
 **/
XFEvent::XFEvent(int id, IXFReactive * pBehavior)
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
    : IXFEvent(IXFEvent::Event, id, pBehavior)
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	68ba      	ldr	r2, [r7, #8]
 800440e:	2103      	movs	r1, #3
 8004410:	f7ff feb4 	bl	800417c <_ZN8IXFEventC1ENS_10eEventTypeEiP11IXFReactive>
 8004414:	4a03      	ldr	r2, [pc, #12]	; (8004424 <_ZN7XFEventC1EiP11IXFReactive+0x28>)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	601a      	str	r2, [r3, #0]
{

}
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	4618      	mov	r0, r3
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	08008338 	.word	0x08008338

08004428 <_ZN7XFEventD1Ev>:

XFEvent::~XFEvent()
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	4a05      	ldr	r2, [pc, #20]	; (8004448 <_ZN7XFEventD1Ev+0x20>)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	601a      	str	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4618      	mov	r0, r3
 800443a:	f7ff fec5 	bl	80041c8 <_ZN8IXFEventD1Ev>
{

}
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4618      	mov	r0, r3
 8004442:	3708      	adds	r7, #8
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	08008338 	.word	0x08008338

0800444c <_ZN7XFEventD0Ev>:
XFEvent::~XFEvent()
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
}
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f7ff ffe7 	bl	8004428 <_ZN7XFEventD1Ev>
 800445a:	2114      	movs	r1, #20
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f002 f99f 	bl	80067a0 <_ZdlPvj>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4618      	mov	r0, r3
 8004466:	3708      	adds	r7, #8
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <_ZN16XFNullTransitionC1EiP11IXFReactive>:
 * Constuctor
 *
 * @param id		ID of the null transition.
 * \param pBehavior Behavior in which the null transition will be executed.
 */
XFNullTransition::XFNullTransition( int id , IXFReactive * pBehavior)
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
 : IXFEvent(IXFEvent::NullTransition, id , pBehavior)
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68ba      	ldr	r2, [r7, #8]
 800447e:	2102      	movs	r1, #2
 8004480:	f7ff fe7c 	bl	800417c <_ZN8IXFEventC1ENS_10eEventTypeEiP11IXFReactive>
 8004484:	4a03      	ldr	r2, [pc, #12]	; (8004494 <_ZN16XFNullTransitionC1EiP11IXFReactive+0x28>)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	601a      	str	r2, [r3, #0]
{
}
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	4618      	mov	r0, r3
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	08008348 	.word	0x08008348

08004498 <_ZN16XFNullTransitionD1Ev>:

XFNullTransition::~XFNullTransition()
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	4a05      	ldr	r2, [pc, #20]	; (80044b8 <_ZN16XFNullTransitionD1Ev+0x20>)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	601a      	str	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7ff fe8d 	bl	80041c8 <_ZN8IXFEventD1Ev>
{

}
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4618      	mov	r0, r3
 80044b2:	3708      	adds	r7, #8
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	08008348 	.word	0x08008348

080044bc <_ZN16XFNullTransitionD0Ev>:
XFNullTransition::~XFNullTransition()
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
}
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f7ff ffe7 	bl	8004498 <_ZN16XFNullTransitionD1Ev>
 80044ca:	2114      	movs	r1, #20
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f002 f967 	bl	80067a0 <_ZdlPvj>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4618      	mov	r0, r3
 80044d6:	3708      	adds	r7, #8
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <_ZN8IXFEvent11setBehaviorEP11IXFReactive>:
    inline void setBehavior(IXFReactive * pBehavior) { _pBehavior = pBehavior; }
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	683a      	ldr	r2, [r7, #0]
 80044ea:	611a      	str	r2, [r3, #16]
 80044ec:	bf00      	nop
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <_ZN11IXFReactiveC1EP9IXFThread>:
    /**
     * Constructor
     *
     * \param pThread Reference to thread executing the behavior of this class.
     */
    IXFReactive(IXFThread * pThread = NULL) { (void)pThread; }
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
 8004502:	4a05      	ldr	r2, [pc, #20]	; (8004518 <_ZN11IXFReactiveC1EP9IXFThread+0x20>)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	601a      	str	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4618      	mov	r0, r3
 800450c:	370c      	adds	r7, #12
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	0800837c 	.word	0x0800837c

0800451c <_ZN11IXFReactiveD1Ev>:
    virtual ~IXFReactive() {}
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	4a04      	ldr	r2, [pc, #16]	; (8004538 <_ZN11IXFReactiveD1Ev+0x1c>)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	601a      	str	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4618      	mov	r0, r3
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr
 8004538:	0800837c 	.word	0x0800837c

0800453c <_ZN11IXFReactiveD0Ev>:
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f7ff ffe9 	bl	800451c <_ZN11IXFReactiveD1Ev>
 800454a:	2104      	movs	r1, #4
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f002 f927 	bl	80067a0 <_ZdlPvj>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4618      	mov	r0, r3
 8004556:	3708      	adds	r7, #8
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <_ZN10XFReactiveC1EP8XFThread>:
/**
 * Constructor
 *
 * \param pThread Reference to thread who will process the behavioral part of this reactive class.
 */
XFReactive::XFReactive(XFThread * pThread)
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
 : _pThread((pThread) ? pThread : XF::getMainThread()),
   _pCurrentEvent(nullptr)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2100      	movs	r1, #0
 800456a:	4618      	mov	r0, r3
 800456c:	f7ff ffc4 	bl	80044f8 <_ZN11IXFReactiveC1EP9IXFThread>
 8004570:	4a0a      	ldr	r2, [pc, #40]	; (800459c <_ZN10XFReactiveC1EP8XFThread+0x40>)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	601a      	str	r2, [r3, #0]
 : _pThread((pThread) ? pThread : XF::getMainThread()),
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d103      	bne.n	8004584 <_ZN10XFReactiveC1EP8XFThread+0x28>
 800457c:	f7ff feba 	bl	80042f4 <_ZN2XF13getMainThreadEv>
 8004580:	4603      	mov	r3, r0
 8004582:	e000      	b.n	8004586 <_ZN10XFReactiveC1EP8XFThread+0x2a>
 8004584:	683b      	ldr	r3, [r7, #0]
   _pCurrentEvent(nullptr)
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	6053      	str	r3, [r2, #4]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	609a      	str	r2, [r3, #8]
{
}
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4618      	mov	r0, r3
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	08008358 	.word	0x08008358

080045a0 <_ZN10XFReactiveD1Ev>:

XFReactive::~XFReactive()
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	4a05      	ldr	r2, [pc, #20]	; (80045c0 <_ZN10XFReactiveD1Ev+0x20>)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	601a      	str	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7ff ffb3 	bl	800451c <_ZN11IXFReactiveD1Ev>
{

}
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4618      	mov	r0, r3
 80045ba:	3708      	adds	r7, #8
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	08008358 	.word	0x08008358

080045c4 <_ZN10XFReactiveD0Ev>:
XFReactive::~XFReactive()
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
}
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f7ff ffe7 	bl	80045a0 <_ZN10XFReactiveD1Ev>
 80045d2:	210c      	movs	r1, #12
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f002 f8e3 	bl	80067a0 <_ZdlPvj>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4618      	mov	r0, r3
 80045de:	3708      	adds	r7, #8
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <_ZN10XFReactive13startBehaviorEv>:

void XFReactive::startBehavior()
{
 80045e4:	b5b0      	push	{r4, r5, r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
    GEN(InitialEvent());
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	330c      	adds	r3, #12
 80045f2:	681c      	ldr	r4, [r3, #0]
 80045f4:	2014      	movs	r0, #20
 80045f6:	f002 f8e4 	bl	80067c2 <_Znwj>
 80045fa:	4603      	mov	r3, r0
 80045fc:	461d      	mov	r5, r3
 80045fe:	4628      	mov	r0, r5
 8004600:	f7ff fe12 	bl	8004228 <_ZN12InitialEventC1Ev>
 8004604:	4629      	mov	r1, r5
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	47a0      	blx	r4
}
 800460a:	bf00      	nop
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004614 <_ZN10XFReactive9pushEventEP8IXFEvent>:


void XFReactive::pushEvent(IXFEvent * pEvent)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
    assert(pEvent);
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d105      	bne.n	8004630 <_ZN10XFReactive9pushEventEP8IXFEvent+0x1c>
 8004624:	4b0c      	ldr	r3, [pc, #48]	; (8004658 <_ZN10XFReactive9pushEventEP8IXFEvent+0x44>)
 8004626:	4a0d      	ldr	r2, [pc, #52]	; (800465c <_ZN10XFReactive9pushEventEP8IXFEvent+0x48>)
 8004628:	2120      	movs	r1, #32
 800462a:	480d      	ldr	r0, [pc, #52]	; (8004660 <_ZN10XFReactive9pushEventEP8IXFEvent+0x4c>)
 800462c:	f002 f914 	bl	8006858 <__assert_func>

    // Set owner
    pEvent->setBehavior(this);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4619      	mov	r1, r3
 8004634:	6838      	ldr	r0, [r7, #0]
 8004636:	f7ff ff51 	bl	80044dc <_ZN8IXFEvent11setBehaviorEP11IXFReactive>
    // Push to threads event queue
    getThread()->pushEvent(pEvent);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	3318      	adds	r3, #24
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	4798      	blx	r3
 8004646:	4603      	mov	r3, r0
 8004648:	6839      	ldr	r1, [r7, #0]
 800464a:	4618      	mov	r0, r3
 800464c:	f000 f9cb 	bl	80049e6 <_ZN8XFThread9pushEventEP8IXFEvent>
}
 8004650:	bf00      	nop
 8004652:	3708      	adds	r7, #8
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	08008044 	.word	0x08008044
 800465c:	0800804c 	.word	0x0800804c
 8004660:	0800807c 	.word	0x0800807c

08004664 <_ZN10XFReactive7processEP8IXFEvent>:
 * Must only be called by the associated thread (see #_pThread).
 *
 * \param pEvent The event to process.
 */
EventStatus XFReactive::process(IXFEvent * pEvent)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
    EventStatus eventStatus;
 800466e:	f107 030c 	add.w	r3, r7, #12
 8004672:	2100      	movs	r1, #0
 8004674:	4618      	mov	r0, r3
 8004676:	f7fe ff9b 	bl	80035b0 <_ZN11EventStatusC1ENS_12eEventStatusE>

    assert(pEvent);
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d105      	bne.n	800468c <_ZN10XFReactive7processEP8IXFEvent+0x28>
 8004680:	4b0d      	ldr	r3, [pc, #52]	; (80046b8 <_ZN10XFReactive7processEP8IXFEvent+0x54>)
 8004682:	4a0e      	ldr	r2, [pc, #56]	; (80046bc <_ZN10XFReactive7processEP8IXFEvent+0x58>)
 8004684:	2136      	movs	r1, #54	; 0x36
 8004686:	480e      	ldr	r0, [pc, #56]	; (80046c0 <_ZN10XFReactive7processEP8IXFEvent+0x5c>)
 8004688:	f002 f8e6 	bl	8006858 <__assert_func>

    setCurrentEvent(pEvent);
 800468c:	6839      	ldr	r1, [r7, #0]
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f833 	bl	80046fa <_ZN10XFReactive15setCurrentEventEP8IXFEvent>

    eventStatus = processEvent();
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	3314      	adds	r3, #20
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	4798      	blx	r3
 80046a0:	4603      	mov	r3, r0
 80046a2:	733b      	strb	r3, [r7, #12]

    setCurrentEvent(NULL);
 80046a4:	2100      	movs	r1, #0
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 f827 	bl	80046fa <_ZN10XFReactive15setCurrentEventEP8IXFEvent>

    return eventStatus;
 80046ac:	7b3b      	ldrb	r3, [r7, #12]
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3710      	adds	r7, #16
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	08008044 	.word	0x08008044
 80046bc:	08008098 	.word	0x08008098
 80046c0:	0800807c 	.word	0x0800807c

080046c4 <_ZN10XFReactive12processEventEv>:
/**
 * Executes the current event in its implemented behavior.
 * This method needs to be overridden to implement the behavior needed.
 */
EventStatus XFReactive::processEvent()
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
    // You should really implement this function in
    // the derived class!

    return EventStatus::Unknown;
 80046cc:	f107 030c 	add.w	r3, r7, #12
 80046d0:	2100      	movs	r1, #0
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7fe ff6c 	bl	80035b0 <_ZN11EventStatusC1ENS_12eEventStatusE>
 80046d8:	7b3b      	ldrb	r3, [r7, #12]
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <_ZN10XFReactive9getThreadEv>:


XFThread * XFReactive::getThread()
{
 80046e2:	b480      	push	{r7}
 80046e4:	b083      	sub	sp, #12
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
    return _pThread;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	370c      	adds	r7, #12
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr

080046fa <_ZN10XFReactive15setCurrentEventEP8IXFEvent>:

void XFReactive::setCurrentEvent(IXFEvent * pEvent)
{
 80046fa:	b480      	push	{r7}
 80046fc:	b083      	sub	sp, #12
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
 8004702:	6039      	str	r1, [r7, #0]
    _pCurrentEvent = pEvent;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	683a      	ldr	r2, [r7, #0]
 8004708:	609a      	str	r2, [r3, #8]
}
 800470a:	bf00      	nop
 800470c:	370c      	adds	r7, #12
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
	...

08004718 <_ZNK10XFReactive15getCurrentEventEv>:

IXFEvent * XFReactive::getCurrentEvent() const
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
    assert(_pCurrentEvent);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d105      	bne.n	8004734 <_ZNK10XFReactive15getCurrentEventEv+0x1c>
 8004728:	4b05      	ldr	r3, [pc, #20]	; (8004740 <_ZNK10XFReactive15getCurrentEventEv+0x28>)
 800472a:	4a06      	ldr	r2, [pc, #24]	; (8004744 <_ZNK10XFReactive15getCurrentEventEv+0x2c>)
 800472c:	215a      	movs	r1, #90	; 0x5a
 800472e:	4806      	ldr	r0, [pc, #24]	; (8004748 <_ZNK10XFReactive15getCurrentEventEv+0x30>)
 8004730:	f002 f892 	bl	8006858 <__assert_func>
    return _pCurrentEvent;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689b      	ldr	r3, [r3, #8]
}
 8004738:	4618      	mov	r0, r3
 800473a:	3708      	adds	r7, #8
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	080080cc 	.word	0x080080cc
 8004744:	080080dc 	.word	0x080080dc
 8004748:	0800807c 	.word	0x0800807c

0800474c <_ZN10XFReactive17getCurrentTimeoutEv>:
/** \brief Returns a reference to the actually processed timeout.
 *
 * Will work only if the current event is of type IXFEvent::Timeout.
 */
XFTimeout * XFReactive::getCurrentTimeout()
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
    assert(getCurrentEvent()->getEventType() == IXFEvent::Timeout);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f7ff ffdf 	bl	8004718 <_ZNK10XFReactive15getCurrentEventEv>
 800475a:	4603      	mov	r3, r0
 800475c:	4618      	mov	r0, r3
 800475e:	f7fe ff0e 	bl	800357e <_ZNK8IXFEvent12getEventTypeEv>
 8004762:	4603      	mov	r3, r0
 8004764:	2b04      	cmp	r3, #4
 8004766:	d005      	beq.n	8004774 <_ZN10XFReactive17getCurrentTimeoutEv+0x28>
 8004768:	4b06      	ldr	r3, [pc, #24]	; (8004784 <_ZN10XFReactive17getCurrentTimeoutEv+0x38>)
 800476a:	4a07      	ldr	r2, [pc, #28]	; (8004788 <_ZN10XFReactive17getCurrentTimeoutEv+0x3c>)
 800476c:	2164      	movs	r1, #100	; 0x64
 800476e:	4807      	ldr	r0, [pc, #28]	; (800478c <_ZN10XFReactive17getCurrentTimeoutEv+0x40>)
 8004770:	f002 f872 	bl	8006858 <__assert_func>

    return (XFTimeout *)getCurrentEvent();
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f7ff ffcf 	bl	8004718 <_ZNK10XFReactive15getCurrentEventEv>
 800477a:	4603      	mov	r3, r0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3708      	adds	r7, #8
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	0800810c 	.word	0x0800810c
 8004788:	08008144 	.word	0x08008144
 800478c:	0800807c 	.word	0x0800807c

08004790 <_ZNK8IXFEvent11getBehaviorEv>:
    inline IXFReactive * getBehavior() const { return _pBehavior; }
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	4618      	mov	r0, r3
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <_ZNK8IXFEvent12shouldDeleteEv>:
    inline bool shouldDelete() const { return _eventStatus.shouldDelete; }
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	7b1b      	ldrb	r3, [r3, #12]
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	bf14      	ite	ne
 80047be:	2301      	movne	r3, #1
 80047c0:	2300      	moveq	r3, #0
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	4618      	mov	r0, r3
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	4618      	mov	r0, r3
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047f6:	d205      	bcs.n	8004804 <_ZSt16__deque_buf_sizej+0x1c>
 80047f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004802:	e000      	b.n	8004806 <_ZSt16__deque_buf_sizej+0x1e>
 8004804:	2301      	movs	r3, #1
 8004806:	4618      	mov	r0, r3
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr

08004812 <_ZNSt5queueIP8IXFEventSt5dequeIS1_SaIS1_EEED1Ev>:
   *  Members not found in @a normal containers are @c container_type,
   *  which is a typedef for the second Sequence parameter, and @c push and
   *  @c pop, which are standard %queue/FIFO operations.
  */
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class queue
 8004812:	b580      	push	{r7, lr}
 8004814:	b082      	sub	sp, #8
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4618      	mov	r0, r3
 800481e:	f000 f980 	bl	8004b22 <_ZNSt5dequeIP8IXFEventSaIS1_EED1Ev>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4618      	mov	r0, r3
 8004826:	3708      	adds	r7, #8
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <_ZN12XFEventQueueC1Ev>:
 * Queue for pending events.
 */
class XFEventQueue : public std::queue<IXFEvent *>
{
public:
	XFEventQueue() {}
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	3304      	adds	r3, #4
 8004838:	4618      	mov	r0, r3
 800483a:	f000 f95e 	bl	8004afa <_ZNSt5queueIP8IXFEventSt5dequeIS1_SaIS1_EEEC1IS4_vEEv>
 800483e:	4a04      	ldr	r2, [pc, #16]	; (8004850 <_ZN12XFEventQueueC1Ev+0x24>)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4618      	mov	r0, r3
 8004848:	3708      	adds	r7, #8
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	080083a8 	.word	0x080083a8

08004854 <_ZN12XFEventQueueD1Ev>:
	virtual ~XFEventQueue() {}
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	4a06      	ldr	r2, [pc, #24]	; (8004878 <_ZN12XFEventQueueD1Ev+0x24>)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	601a      	str	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	3304      	adds	r3, #4
 8004866:	4618      	mov	r0, r3
 8004868:	f7ff ffd3 	bl	8004812 <_ZNSt5queueIP8IXFEventSt5dequeIS1_SaIS1_EEED1Ev>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4618      	mov	r0, r3
 8004870:	3708      	adds	r7, #8
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	080083a8 	.word	0x080083a8

0800487c <_ZN12XFEventQueueD0Ev>:
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f7ff ffe5 	bl	8004854 <_ZN12XFEventQueueD1Ev>
 800488a:	212c      	movs	r1, #44	; 0x2c
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f001 ff87 	bl	80067a0 <_ZdlPvj>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4618      	mov	r0, r3
 8004896:	3708      	adds	r7, #8
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <_ZN12XFEventQueue5emptyEv>:

	typedef std::queue<IXFEvent *> BaseClass;

	bool empty() __attribute__ ((noinline)) { return BaseClass::empty(); }	// Prevent gcc from optimizing this operation
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	3304      	adds	r3, #4
 80048a8:	4618      	mov	r0, r3
 80048aa:	f000 f95f 	bl	8004b6c <_ZNKSt5queueIP8IXFEventSt5dequeIS1_SaIS1_EEE5emptyEv>
 80048ae:	4603      	mov	r3, r0
 80048b0:	4618      	mov	r0, r3
 80048b2:	3708      	adds	r7, #8
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <_ZNK11EventStatuseqERKNS_12eEventStatusE>:
    EventStatus(eEventStatus eventStatus = Unknown) : _status(eventStatus) {}

    /**
     * Check if both variables contain the same event status
     */
    bool operator == (const EventStatus::eEventStatus & eventStatus) const
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
    {
        return (this->_status == eventStatus);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	781a      	ldrb	r2, [r3, #0]
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	bf0c      	ite	eq
 80048ce:	2301      	moveq	r3, #1
 80048d0:	2300      	movne	r3, #0
 80048d2:	b2db      	uxtb	r3, r3
    }
 80048d4:	4618      	mov	r0, r3
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <_ZN8XFThreadC1Ev>:
#ifdef TC_STM32
  #include "mcu/mcu.h"
#endif


XFThread::XFThread()
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 : _bExecuting(true)
 80048e8:	4a07      	ldr	r2, [pc, #28]	; (8004908 <_ZN8XFThreadC1Ev+0x28>)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	601a      	str	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	711a      	strb	r2, [r3, #4]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	3308      	adds	r3, #8
 80048f8:	4618      	mov	r0, r3
 80048fa:	f7ff ff97 	bl	800482c <_ZN12XFEventQueueC1Ev>

#endif /**************************************************************************************************************/


{
}
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4618      	mov	r0, r3
 8004902:	3708      	adds	r7, #8
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	08008398 	.word	0x08008398

0800490c <_ZN8XFThreadD1Ev>:

XFThread::~XFThread()
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	4a06      	ldr	r2, [pc, #24]	; (8004930 <_ZN8XFThreadD1Ev+0x24>)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	601a      	str	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	3308      	adds	r3, #8
 800491e:	4618      	mov	r0, r3
 8004920:	f7ff ff98 	bl	8004854 <_ZN12XFEventQueueD1Ev>
{
}
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4618      	mov	r0, r3
 8004928:	3708      	adds	r7, #8
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	08008398 	.word	0x08008398

08004934 <_ZN8XFThreadD0Ev>:
XFThread::~XFThread()
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
}
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f7ff ffe5 	bl	800490c <_ZN8XFThreadD1Ev>
 8004942:	2134      	movs	r1, #52	; 0x34
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f001 ff2b 	bl	80067a0 <_ZdlPvj>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4618      	mov	r0, r3
 800494e:	3708      	adds	r7, #8
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <_ZN8XFThread5startEv>:

void XFThread::start()
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
    execute();
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 f878 	bl	8004a52 <_ZN8XFThread7executeEv>
}
 8004962:	bf00      	nop
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <_ZNK8XFThread17getTimeoutManagerEv>:

XFTimeoutManager * XFThread::getTimeoutManager() const
{
 800496a:	b580      	push	{r7, lr}
 800496c:	b082      	sub	sp, #8
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
    return XFTimeoutManager::getInstance();
 8004972:	f001 f8df 	bl	8005b34 <_ZN16XFTimeoutManager11getInstanceEv>
 8004976:	4603      	mov	r3, r0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3708      	adds	r7, #8
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <_ZNK8XFThread13dispatchEventEP8IXFEvent>:
 * Dispatchs the event to the corresponding behavioral part. For example
 * the state machine which sould process the event.
 * \param pEvent The event to dispatch
 */
void XFThread::dispatchEvent(IXFEvent * pEvent) const
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
    EventStatus eventStatus;
 800498a:	f107 030c 	add.w	r3, r7, #12
 800498e:	2100      	movs	r1, #0
 8004990:	4618      	mov	r0, r3
 8004992:	f7fe fe0d 	bl	80035b0 <_ZN11EventStatusC1ENS_12eEventStatusE>

    eventStatus = pEvent->getBehavior()->process(pEvent);
 8004996:	6838      	ldr	r0, [r7, #0]
 8004998:	f7ff fefa 	bl	8004790 <_ZNK8IXFEvent11getBehaviorEv>
 800499c:	4603      	mov	r3, r0
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	3210      	adds	r2, #16
 80049a2:	6812      	ldr	r2, [r2, #0]
 80049a4:	6839      	ldr	r1, [r7, #0]
 80049a6:	4618      	mov	r0, r3
 80049a8:	4790      	blx	r2
 80049aa:	4603      	mov	r3, r0
 80049ac:	733b      	strb	r3, [r7, #12]

    // Check if behavior should be deleted
    if (eventStatus == EventStatus::Terminate)
 80049ae:	2304      	movs	r3, #4
 80049b0:	73fb      	strb	r3, [r7, #15]
 80049b2:	f107 020f 	add.w	r2, r7, #15
 80049b6:	f107 030c 	add.w	r3, r7, #12
 80049ba:	4611      	mov	r1, r2
 80049bc:	4618      	mov	r0, r3
 80049be:	f7ff ff7b 	bl	80048b8 <_ZNK11EventStatuseqERKNS_12eEventStatusE>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00a      	beq.n	80049de <_ZNK8XFThread13dispatchEventEP8IXFEvent+0x5e>
    {
        delete pEvent->getBehavior();
 80049c8:	6838      	ldr	r0, [r7, #0]
 80049ca:	f7ff fee1 	bl	8004790 <_ZNK8IXFEvent11getBehaviorEv>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d004      	beq.n	80049de <_ZNK8XFThread13dispatchEventEP8IXFEvent+0x5e>
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	3204      	adds	r2, #4
 80049d8:	6812      	ldr	r2, [r2, #0]
 80049da:	4618      	mov	r0, r3
 80049dc:	4790      	blx	r2
    }
}
 80049de:	bf00      	nop
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <_ZN8XFThread9pushEventEP8IXFEvent>:

void XFThread::pushEvent(IXFEvent * pEvent)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b082      	sub	sp, #8
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
 80049ee:	6039      	str	r1, [r7, #0]
    _events.push(pEvent);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	330c      	adds	r3, #12
 80049f4:	463a      	mov	r2, r7
 80049f6:	4611      	mov	r1, r2
 80049f8:	4618      	mov	r0, r3
 80049fa:	f000 f8c4 	bl	8004b86 <_ZNSt5queueIP8IXFEventSt5dequeIS1_SaIS1_EEE4pushERKS1_>
    }

#endif /**************************************************************************************************************/


}
 80049fe:	bf00      	nop
 8004a00:	3708      	adds	r7, #8
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}

08004a06 <_ZN8XFThread15scheduleTimeoutEiiP11IXFReactive>:
/**
 * Adds a new timeout to be handled. The XFThread will forward the timeout
 * information to the timeout manager which is responsible to handle all timeouts.
 */
void XFThread::scheduleTimeout(int timeoutId, int interval, IXFReactive * pReactive)
{
 8004a06:	b580      	push	{r7, lr}
 8004a08:	b084      	sub	sp, #16
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	60f8      	str	r0, [r7, #12]
 8004a0e:	60b9      	str	r1, [r7, #8]
 8004a10:	607a      	str	r2, [r7, #4]
 8004a12:	603b      	str	r3, [r7, #0]
    // Forward timeout to the timeout manager
    getTimeoutManager()->scheduleTimeout(timeoutId, interval, pReactive);
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f7ff ffa8 	bl	800496a <_ZNK8XFThread17getTimeoutManagerEv>
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	68b9      	ldr	r1, [r7, #8]
 8004a20:	f001 f8c1 	bl	8005ba6 <_ZN16XFTimeoutManager15scheduleTimeoutEiiP11IXFReactive>
}
 8004a24:	bf00      	nop
 8004a26:	3710      	adds	r7, #16
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <_ZN8XFThread17unscheduleTimeoutEiP11IXFReactive>:

/**
 * Removes all timeouts corresponding the given parameters.
 */
void XFThread::unscheduleTimeout(int timeoutId, IXFReactive * pReactive)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
    // Forward timeout to the timeout manager
    getTimeoutManager()->unscheduleTimeout(timeoutId, pReactive);
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f7ff ff96 	bl	800496a <_ZNK8XFThread17getTimeoutManagerEv>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	68b9      	ldr	r1, [r7, #8]
 8004a44:	4618      	mov	r0, r3
 8004a46:	f001 f8cc 	bl	8005be2 <_ZN16XFTimeoutManager17unscheduleTimeoutEiP11IXFReactive>
}
 8004a4a:	bf00      	nop
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <_ZN8XFThread7executeEv>:

/**
 * Main loop of the thread. Implements event loop processing.
 */
void XFThread::execute()
{
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b084      	sub	sp, #16
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
    while(_bExecuting)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	791b      	ldrb	r3, [r3, #4]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d03a      	beq.n	8004ad8 <_ZN8XFThread7executeEv+0x86>
    {
        IXFEvent * pEvent;

        while (_events.empty())
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	3308      	adds	r3, #8
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7ff ff18 	bl	800489c <_ZN12XFEventQueue5emptyEv>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d000      	beq.n	8004a74 <_ZN8XFThread7executeEv+0x22>
 8004a72:	e7f6      	b.n	8004a62 <_ZN8XFThread7executeEv+0x10>

#endif /**************************************************************************************************************/
        }

        // Deque next event from queue
        pEvent = _events.front(); _events.pop();
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	330c      	adds	r3, #12
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f000 f892 	bl	8004ba2 <_ZNSt5queueIP8IXFEventSt5dequeIS1_SaIS1_EEE5frontEv>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	60fb      	str	r3, [r7, #12]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	330c      	adds	r3, #12
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f000 f897 	bl	8004bbc <_ZNSt5queueIP8IXFEventSt5dequeIS1_SaIS1_EEE3popEv>

        if (pEvent)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d003      	beq.n	8004a9c <_ZN8XFThread7executeEv+0x4a>
        {
            // Forward the event to the behavioral class
            dispatchEvent(pEvent);
 8004a94:	68f9      	ldr	r1, [r7, #12]
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f7ff ff72 	bl	8004980 <_ZNK8XFThread13dispatchEventEP8IXFEvent>
        }

        if (pEvent->getEventType() == IXFEvent::Terminate)
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f7fe fd6e 	bl	800357e <_ZNK8IXFEvent12getEventTypeEv>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa8:	bf0c      	ite	eq
 8004aaa:	2301      	moveq	r3, #1
 8004aac:	2300      	movne	r3, #0
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d002      	beq.n	8004aba <_ZN8XFThread7executeEv+0x68>
        {
            // Exit the event loop
            _bExecuting = false;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	711a      	strb	r2, [r3, #4]
        }

        if (pEvent->shouldDelete())
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	f7ff fe74 	bl	80047a8 <_ZNK8IXFEvent12shouldDeleteEv>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d0c9      	beq.n	8004a5a <_ZN8XFThread7executeEv+0x8>
        {
            // Delete consumed event
            delete pEvent;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d0c6      	beq.n	8004a5a <_ZN8XFThread7executeEv+0x8>
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	3204      	adds	r2, #4
 8004ad0:	6812      	ldr	r2, [r2, #0]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	4790      	blx	r2
    while(_bExecuting)
 8004ad6:	e7c0      	b.n	8004a5a <_ZN8XFThread7executeEv+0x8>
        }
    }
}
 8004ad8:	bf00      	nop
 8004ada:	3710      	adds	r7, #16
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <_ZNSt5dequeIP8IXFEventSaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f000 f87e 	bl	8004bec <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EEC1Ev>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4618      	mov	r0, r3
 8004af4:	3708      	adds	r7, #8
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <_ZNSt5queueIP8IXFEventSt5dequeIS1_SaIS1_EEEC1IS4_vEEv>:
      queue(const _Sequence& __c = _Sequence())
      : c(__c) { }
#else
      template<typename _Seq = _Sequence, typename _Requires = typename
	       enable_if<is_default_constructible<_Seq>::value>::type>
	queue()
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b082      	sub	sp, #8
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
	: c() { }
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4618      	mov	r0, r3
 8004b06:	2328      	movs	r3, #40	; 0x28
 8004b08:	461a      	mov	r2, r3
 8004b0a:	2100      	movs	r1, #0
 8004b0c:	f001 ff3c 	bl	8006988 <memset>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7ff ffe4 	bl	8004ae0 <_ZNSt5dequeIP8IXFEventSaIS1_EEC1Ev>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3708      	adds	r7, #8
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <_ZNSt5dequeIP8IXFEventSaIS1_EED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b08a      	sub	sp, #40	; 0x28
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8004b2a:	f107 0308 	add.w	r3, r7, #8
 8004b2e:	6879      	ldr	r1, [r7, #4]
 8004b30:	4618      	mov	r0, r3
 8004b32:	f000 f88e 	bl	8004c52 <_ZNSt5dequeIP8IXFEventSaIS1_EE5beginEv>
 8004b36:	f107 0318 	add.w	r3, r7, #24
 8004b3a:	6879      	ldr	r1, [r7, #4]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f000 f897 	bl	8004c70 <_ZNSt5dequeIP8IXFEventSaIS1_EE3endEv>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f000 f8a2 	bl	8004c8e <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE19_M_get_Tp_allocatorEv>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	f107 0218 	add.w	r2, r7, #24
 8004b50:	f107 0108 	add.w	r1, r7, #8
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 f8c1 	bl	8004cdc <_ZNSt5dequeIP8IXFEventSaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f000 f856 	bl	8004c0e <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EED1Ev>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4618      	mov	r0, r3
 8004b66:	3728      	adds	r7, #40	; 0x28
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <_ZNKSt5queueIP8IXFEventSt5dequeIS1_SaIS1_EEE5emptyEv>:

      /**
       *  Returns true if the %queue is empty.
       */
      _GLIBCXX_NODISCARD bool
      empty() const
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f000 f8bd 	bl	8004cf6 <_ZNKSt5dequeIP8IXFEventSaIS1_EE5emptyEv>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3708      	adds	r7, #8
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}

08004b86 <_ZNSt5queueIP8IXFEventSt5dequeIS1_SaIS1_EEE4pushERKS1_>:
       *  element at the end of the %queue and assigns the given data
       *  to it.  The time complexity of the operation depends on the
       *  underlying sequence.
       */
      void
      push(const value_type& __x)
 8004b86:	b580      	push	{r7, lr}
 8004b88:	b082      	sub	sp, #8
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
 8004b8e:	6039      	str	r1, [r7, #0]
      { c.push_back(__x); }
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6839      	ldr	r1, [r7, #0]
 8004b94:	4618      	mov	r0, r3
 8004b96:	f000 f8c0 	bl	8004d1a <_ZNSt5dequeIP8IXFEventSaIS1_EE9push_backERKS1_>
 8004b9a:	bf00      	nop
 8004b9c:	3708      	adds	r7, #8
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <_ZNSt5queueIP8IXFEventSt5dequeIS1_SaIS1_EEE5frontEv>:
      front()
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b082      	sub	sp, #8
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
	return c.front();
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4618      	mov	r0, r3
 8004bae:	f000 f8d5 	bl	8004d5c <_ZNSt5dequeIP8IXFEventSaIS1_EE5frontEv>
 8004bb2:	4603      	mov	r3, r0
      }
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3708      	adds	r7, #8
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <_ZNSt5queueIP8IXFEventSt5dequeIS1_SaIS1_EEE3popEv>:
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */
      void
      pop()
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	c.pop_front();
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f000 f8dc 	bl	8004d84 <_ZNSt5dequeIP8IXFEventSaIS1_EE9pop_frontEv>
      }
 8004bcc:	bf00      	nop
 8004bce:	3708      	adds	r7, #8
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 f904 	bl	8004dea <_ZNSaIP8IXFEventED1Ev>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4618      	mov	r0, r3
 8004be6:	3708      	adds	r7, #8
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EEC1Ev>:
      _Deque_base()
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 f8e7 	bl	8004dca <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 f8ff 	bl	8004e02 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE17_M_initialize_mapEj>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4618      	mov	r0, r3
 8004c08:	3708      	adds	r7, #8
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b082      	sub	sp, #8
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d010      	beq.n	8004c40 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8004c26:	3304      	adds	r3, #4
 8004c28:	461a      	mov	r2, r3
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f94c 	bl	8004ec8 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE16_M_destroy_nodesEPPS1_S5_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6819      	ldr	r1, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	461a      	mov	r2, r3
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 f95e 	bl	8004efc <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE17_M_deallocate_mapEPPS1_j>
    }
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7ff ffc6 	bl	8004bd4 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE11_Deque_implD1Ev>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3708      	adds	r7, #8
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <_ZNSt5dequeIP8IXFEventSaIS1_EE5beginEv>:
      /**
       *  Returns a read/write iterator that points to the first element in the
       *  %deque.  Iteration is done in ordinary element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b082      	sub	sp, #8
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
 8004c5a:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	3308      	adds	r3, #8
 8004c60:	4619      	mov	r1, r3
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 f81e 	bl	8004ca4 <_ZNSt15_Deque_iteratorIP8IXFEventRS1_PS1_EC1ERKS4_>
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	3708      	adds	r7, #8
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <_ZNSt5dequeIP8IXFEventSaIS1_EE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %deque.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	3318      	adds	r3, #24
 8004c7e:	4619      	mov	r1, r3
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 f80f 	bl	8004ca4 <_ZNSt15_Deque_iteratorIP8IXFEventRS1_PS1_EC1ERKS4_>
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	3708      	adds	r7, #8
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8004c8e:	b480      	push	{r7}
 8004c90:	b083      	sub	sp, #12
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <_ZNSt15_Deque_iteratorIP8IXFEventRS1_PS1_EC1ERKS4_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	605a      	str	r2, [r3, #4]
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	689a      	ldr	r2, [r3, #8]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	609a      	str	r2, [r3, #8]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	68da      	ldr	r2, [r3, #12]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	60da      	str	r2, [r3, #12]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <_ZNSt5dequeIP8IXFEventSaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 8004cdc:	b480      	push	{r7}
 8004cde:	b08d      	sub	sp, #52	; 0x34
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
 8004ce8:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
      }
 8004cea:	bf00      	nop
 8004cec:	3734      	adds	r7, #52	; 0x34
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr

08004cf6 <_ZNKSt5dequeIP8IXFEventSaIS1_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b082      	sub	sp, #8
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f103 0218 	add.w	r2, r3, #24
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	3308      	adds	r3, #8
 8004d08:	4619      	mov	r1, r3
 8004d0a:	4610      	mov	r0, r2
 8004d0c:	f000 f912 	bl	8004f34 <_ZSteqRKSt15_Deque_iteratorIP8IXFEventRS1_PS1_ES6_>
 8004d10:	4603      	mov	r3, r0
 8004d12:	4618      	mov	r0, r3
 8004d14:	3708      	adds	r7, #8
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <_ZNSt5dequeIP8IXFEventSaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b082      	sub	sp, #8
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
 8004d22:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a1b      	ldr	r3, [r3, #32]
 8004d2c:	3b04      	subs	r3, #4
	if (this->_M_impl._M_finish._M_cur
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d00c      	beq.n	8004d4c <_ZNSt5dequeIP8IXFEventSaIS1_EE9push_backERKS1_+0x32>
	    _Alloc_traits::construct(this->_M_impl,
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	683a      	ldr	r2, [r7, #0]
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	f000 f90e 	bl	8004f5c <_ZNSt16allocator_traitsISaIP8IXFEventEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	1d1a      	adds	r2, r3, #4
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	619a      	str	r2, [r3, #24]
      }
 8004d4a:	e003      	b.n	8004d54 <_ZNSt5dequeIP8IXFEventSaIS1_EE9push_backERKS1_+0x3a>
	  _M_push_back_aux(__x);
 8004d4c:	6839      	ldr	r1, [r7, #0]
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f918 	bl	8004f84 <_ZNSt5dequeIP8IXFEventSaIS1_EE16_M_push_back_auxIJRKS1_EEEvDpOT_>
      }
 8004d54:	bf00      	nop
 8004d56:	3708      	adds	r7, #8
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <_ZNSt5dequeIP8IXFEventSaIS1_EE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b086      	sub	sp, #24
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
	return *begin();
 8004d64:	f107 0308 	add.w	r3, r7, #8
 8004d68:	6879      	ldr	r1, [r7, #4]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7ff ff71 	bl	8004c52 <_ZNSt5dequeIP8IXFEventSaIS1_EE5beginEv>
 8004d70:	f107 0308 	add.w	r3, r7, #8
 8004d74:	4618      	mov	r0, r3
 8004d76:	f000 f949 	bl	800500c <_ZNKSt15_Deque_iteratorIP8IXFEventRS1_PS1_EdeEv>
 8004d7a:	4603      	mov	r3, r0
      }
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3718      	adds	r7, #24
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <_ZNSt5dequeIP8IXFEventSaIS1_EE9pop_frontEv>:
      pop_front() _GLIBCXX_NOEXCEPT
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_start._M_cur
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	3b04      	subs	r3, #4
	if (this->_M_impl._M_start._M_cur
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d010      	beq.n	8004dbc <_ZNSt5dequeIP8IXFEventSaIS1_EE9pop_frontEv+0x38>
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7ff ff76 	bl	8004c8e <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE19_M_get_Tp_allocatorEv>
 8004da2:	4602      	mov	r2, r0
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	4619      	mov	r1, r3
 8004daa:	4610      	mov	r0, r2
 8004dac:	f000 f93a 	bl	8005024 <_ZNSt16allocator_traitsISaIP8IXFEventEE7destroyIS1_EEvRS2_PT_>
	    ++this->_M_impl._M_start._M_cur;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	1d1a      	adds	r2, r3, #4
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	609a      	str	r2, [r3, #8]
      }
 8004dba:	e002      	b.n	8004dc2 <_ZNSt5dequeIP8IXFEventSaIS1_EE9pop_frontEv+0x3e>
	  _M_pop_front_aux();
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 f93e 	bl	800503e <_ZNSt5dequeIP8IXFEventSaIS1_EE16_M_pop_front_auxEv>
      }
 8004dc2:	bf00      	nop
 8004dc4:	3708      	adds	r7, #8
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	b082      	sub	sp, #8
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f95b 	bl	800508e <_ZNSaIP8IXFEventEC1Ev>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 f963 	bl	80050a6 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE16_Deque_impl_dataC1Ev>
	{ }
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4618      	mov	r0, r3
 8004de4:	3708      	adds	r7, #8
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <_ZNSaIP8IXFEventED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b082      	sub	sp, #8
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 f970 	bl	80050d8 <_ZN9__gnu_cxx13new_allocatorIP8IXFEventED1Ev>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3708      	adds	r7, #8
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8004e02:	b590      	push	{r4, r7, lr}
 8004e04:	b089      	sub	sp, #36	; 0x24
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
 8004e0a:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8004e0c:	2004      	movs	r0, #4
 8004e0e:	f7ff fceb 	bl	80047e8 <_ZSt16__deque_buf_sizej>
 8004e12:	4602      	mov	r2, r0
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8004e1e:	2308      	movs	r3, #8
 8004e20:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	3302      	adds	r3, #2
 8004e26:	613b      	str	r3, [r7, #16]
 8004e28:	f107 0210 	add.w	r2, r7, #16
 8004e2c:	f107 030c 	add.w	r3, r7, #12
 8004e30:	4611      	mov	r1, r2
 8004e32:	4618      	mov	r0, r3
 8004e34:	f000 f95b 	bl	80050ee <_ZSt3maxIjERKT_S2_S2_>
 8004e38:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	4619      	mov	r1, r3
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f965 	bl	8005116 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE15_M_allocate_mapEj>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6859      	ldr	r1, [r3, #4]
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	1acb      	subs	r3, r1, r3
 8004e5e:	085b      	lsrs	r3, r3, #1
 8004e60:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8004e62:	4413      	add	r3, r2
 8004e64:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	69ba      	ldr	r2, [r7, #24]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	69b9      	ldr	r1, [r7, #24]
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 f96b 	bl	8005150 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE15_M_create_nodesEPPS1_S5_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	3308      	adds	r3, #8
 8004e7e:	69b9      	ldr	r1, [r7, #24]
 8004e80:	4618      	mov	r0, r3
 8004e82:	f000 f97f 	bl	8005184 <_ZNSt15_Deque_iteratorIP8IXFEventRS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f103 0218 	add.w	r2, r3, #24
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	3b04      	subs	r3, #4
 8004e90:	4619      	mov	r1, r3
 8004e92:	4610      	mov	r0, r2
 8004e94:	f000 f976 	bl	8005184 <_ZNSt15_Deque_iteratorIP8IXFEventRS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	68da      	ldr	r2, [r3, #12]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8004ea4:	2004      	movs	r0, #4
 8004ea6:	f7ff fc9f 	bl	80047e8 <_ZSt16__deque_buf_sizej>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	fbb3 f1f2 	udiv	r1, r3, r2
 8004eb2:	fb01 f202 	mul.w	r2, r1, r2
 8004eb6:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	619a      	str	r2, [r3, #24]
    }
 8004ec0:	bf00      	nop
 8004ec2:	3724      	adds	r7, #36	; 0x24
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd90      	pop	{r4, r7, pc}

08004ec8 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE16_M_destroy_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b086      	sub	sp, #24
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	617b      	str	r3, [r7, #20]
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d209      	bcs.n	8004ef4 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x2c>
	_M_deallocate_node(*__n);
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f000 f965 	bl	80051b6 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE18_M_deallocate_nodeEPS1_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	3304      	adds	r3, #4
 8004ef0:	617b      	str	r3, [r7, #20]
 8004ef2:	e7f1      	b.n	8004ed8 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x10>
    }
 8004ef4:	bf00      	nop
 8004ef6:	3718      	adds	r7, #24
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE17_M_deallocate_mapEPPS1_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b086      	sub	sp, #24
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8004f08:	f107 0314 	add.w	r3, r7, #20
 8004f0c:	68f9      	ldr	r1, [r7, #12]
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f000 f964 	bl	80051dc <_ZNKSt11_Deque_baseIP8IXFEventSaIS1_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8004f14:	f107 0314 	add.w	r3, r7, #20
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	68b9      	ldr	r1, [r7, #8]
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f000 f97a 	bl	8005216 <_ZNSt16allocator_traitsISaIPP8IXFEventEE10deallocateERS3_PS2_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8004f22:	f107 0314 	add.w	r3, r7, #20
 8004f26:	4618      	mov	r0, r3
 8004f28:	f000 f969 	bl	80051fe <_ZNSaIPP8IXFEventED1Ev>
      }
 8004f2c:	bf00      	nop
 8004f2e:	3718      	adds	r7, #24
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <_ZSteqRKSt15_Deque_iteratorIP8IXFEventRS1_PS1_ES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	bf0c      	ite	eq
 8004f4a:	2301      	moveq	r3, #1
 8004f4c:	2300      	movne	r3, #0
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	4618      	mov	r0, r3
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <_ZNSt16allocator_traitsISaIP8IXFEventEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
       *  in C++11, C++14 and C++17. Changed in C++20 to call
       *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
      */
      template<typename _Up, typename... _Args>
	static _GLIBCXX20_CONSTEXPR void
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
		  _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f000 f963 	bl	8005234 <_ZSt7forwardIRKP8IXFEventEOT_RNSt16remove_referenceIS4_E4typeE>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	461a      	mov	r2, r3
 8004f72:	68b9      	ldr	r1, [r7, #8]
 8004f74:	68f8      	ldr	r0, [r7, #12]
 8004f76:	f000 f968 	bl	800524a <_ZN9__gnu_cxx13new_allocatorIP8IXFEventE9constructIS2_JRKS2_EEEvPT_DpOT0_>
#else
	  std::construct_at(__p, std::forward<_Args>(__args)...);
#endif
	}
 8004f7a:	bf00      	nop
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
	...

08004f84 <_ZNSt5dequeIP8IXFEventSaIS1_EE16_M_push_back_auxIJRKS1_EEEvDpOT_>:
  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 8004f84:	b5b0      	push	{r4, r5, r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
      void
      deque<_Tp, _Alloc>::
      _M_push_back_aux(const value_type& __t)
#endif
      {
	if (size() == max_size())
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 f971 	bl	8005276 <_ZNKSt5dequeIP8IXFEventSaIS1_EE4sizeEv>
 8004f94:	4604      	mov	r4, r0
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 f97f 	bl	800529a <_ZNKSt5dequeIP8IXFEventSaIS1_EE8max_sizeEv>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	429c      	cmp	r4, r3
 8004fa0:	bf0c      	ite	eq
 8004fa2:	2301      	moveq	r3, #1
 8004fa4:	2300      	movne	r3, #0
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d002      	beq.n	8004fb2 <_ZNSt5dequeIP8IXFEventSaIS1_EE16_M_push_back_auxIJRKS1_EEEvDpOT_+0x2e>
	  __throw_length_error(
 8004fac:	4816      	ldr	r0, [pc, #88]	; (8005008 <_ZNSt5dequeIP8IXFEventSaIS1_EE16_M_push_back_auxIJRKS1_EEEvDpOT_+0x84>)
 8004fae:	f001 fc2b 	bl	8006808 <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::deque larger than max_size()"));

	_M_reserve_map_at_back();
 8004fb2:	2101      	movs	r1, #1
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 f981 	bl	80052bc <_ZNSt5dequeIP8IXFEventSaIS1_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc0:	1d1c      	adds	r4, r3, #4
 8004fc2:	4610      	mov	r0, r2
 8004fc4:	f000 f995 	bl	80052f2 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE16_M_allocate_nodeEv>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	6023      	str	r3, [r4, #0]
	__try
	  {
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 8004fcc:	687c      	ldr	r4, [r7, #4]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	699d      	ldr	r5, [r3, #24]
 8004fd2:	6838      	ldr	r0, [r7, #0]
 8004fd4:	f000 f92e 	bl	8005234 <_ZSt7forwardIRKP8IXFEventEOT_RNSt16remove_referenceIS4_E4typeE>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	461a      	mov	r2, r3
 8004fdc:	4629      	mov	r1, r5
 8004fde:	4620      	mov	r0, r4
 8004fe0:	f7ff ffbc 	bl	8004f5c <_ZNSt16allocator_traitsISaIP8IXFEventEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f103 0218 	add.w	r2, r3, #24
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fee:	3304      	adds	r3, #4
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	4610      	mov	r0, r2
 8004ff4:	f000 f8c6 	bl	8005184 <_ZNSt15_Deque_iteratorIP8IXFEventRS1_PS1_E11_M_set_nodeEPS3_>
						+ 1);
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	69da      	ldr	r2, [r3, #28]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	619a      	str	r2, [r3, #24]
	__catch(...)
	  {
	    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
	    __throw_exception_again;
	  }
      }
 8005000:	bf00      	nop
 8005002:	3708      	adds	r7, #8
 8005004:	46bd      	mov	sp, r7
 8005006:	bdb0      	pop	{r4, r5, r7, pc}
 8005008:	08008170 	.word	0x08008170

0800500c <_ZNKSt15_Deque_iteratorIP8IXFEventRS1_PS1_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4618      	mov	r0, r3
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <_ZNSt16allocator_traitsISaIP8IXFEventEE7destroyIS1_EEvRS2_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
 800502e:	6839      	ldr	r1, [r7, #0]
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f000 f970 	bl	8005316 <_ZN9__gnu_cxx13new_allocatorIP8IXFEventE7destroyIS2_EEvPT_>
#else
	  std::destroy_at(__p);
#endif
	}
 8005036:	bf00      	nop
 8005038:	3708      	adds	r7, #8
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <_ZNSt5dequeIP8IXFEventSaIS1_EE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 800503e:	b580      	push	{r7, lr}
 8005040:	b082      	sub	sp, #8
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4618      	mov	r0, r3
 800504a:	f7ff fe20 	bl	8004c8e <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE19_M_get_Tp_allocatorEv>
 800504e:	4602      	mov	r2, r0
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	4619      	mov	r1, r3
 8005056:	4610      	mov	r0, r2
 8005058:	f7ff ffe4 	bl	8005024 <_ZNSt16allocator_traitsISaIP8IXFEventEE7destroyIS1_EEvRS2_PT_>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	4619      	mov	r1, r3
 8005064:	4610      	mov	r0, r2
 8005066:	f000 f8a6 	bl	80051b6 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE18_M_deallocate_nodeEPS1_>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f103 0208 	add.w	r2, r3, #8
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	695b      	ldr	r3, [r3, #20]
 8005074:	3304      	adds	r3, #4
 8005076:	4619      	mov	r1, r3
 8005078:	4610      	mov	r0, r2
 800507a:	f000 f883 	bl	8005184 <_ZNSt15_Deque_iteratorIP8IXFEventRS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	68da      	ldr	r2, [r3, #12]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	609a      	str	r2, [r3, #8]
    }
 8005086:	bf00      	nop
 8005088:	3708      	adds	r7, #8
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}

0800508e <_ZNSaIP8IXFEventEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800508e:	b580      	push	{r7, lr}
 8005090:	b082      	sub	sp, #8
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 f948 	bl	800532c <_ZN9__gnu_cxx13new_allocatorIP8IXFEventEC1Ev>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4618      	mov	r0, r3
 80050a0:	3708      	adds	r7, #8
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b082      	sub	sp, #8
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	601a      	str	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	605a      	str	r2, [r3, #4]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	3308      	adds	r3, #8
 80050be:	4618      	mov	r0, r3
 80050c0:	f000 f93f 	bl	8005342 <_ZNSt15_Deque_iteratorIP8IXFEventRS1_PS1_EC1Ev>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	3318      	adds	r3, #24
 80050c8:	4618      	mov	r0, r3
 80050ca:	f000 f93a 	bl	8005342 <_ZNSt15_Deque_iteratorIP8IXFEventRS1_PS1_EC1Ev>
	{ }
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4618      	mov	r0, r3
 80050d2:	3708      	adds	r7, #8
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <_ZN9__gnu_cxx13new_allocatorIP8IXFEventED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4618      	mov	r0, r3
 80050e4:	370c      	adds	r7, #12
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr

080050ee <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 80050ee:	b480      	push	{r7}
 80050f0:	b083      	sub	sp, #12
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
 80050f6:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	429a      	cmp	r2, r3
 8005102:	d201      	bcs.n	8005108 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	e000      	b.n	800510a <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8005108:	687b      	ldr	r3, [r7, #4]
    }
 800510a:	4618      	mov	r0, r3
 800510c:	370c      	adds	r7, #12
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr

08005116 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8005116:	b590      	push	{r4, r7, lr}
 8005118:	b085      	sub	sp, #20
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
 800511e:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8005120:	f107 030c 	add.w	r3, r7, #12
 8005124:	6879      	ldr	r1, [r7, #4]
 8005126:	4618      	mov	r0, r3
 8005128:	f000 f858 	bl	80051dc <_ZNKSt11_Deque_baseIP8IXFEventSaIS1_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 800512c:	f107 030c 	add.w	r3, r7, #12
 8005130:	6839      	ldr	r1, [r7, #0]
 8005132:	4618      	mov	r0, r3
 8005134:	f000 f91c 	bl	8005370 <_ZNSt16allocator_traitsISaIPP8IXFEventEE8allocateERS3_j>
 8005138:	4604      	mov	r4, r0
 800513a:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800513c:	f107 030c 	add.w	r3, r7, #12
 8005140:	4618      	mov	r0, r3
 8005142:	f000 f85c 	bl	80051fe <_ZNSaIPP8IXFEventED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8005146:	4623      	mov	r3, r4
      }
 8005148:	4618      	mov	r0, r3
 800514a:	3714      	adds	r7, #20
 800514c:	46bd      	mov	sp, r7
 800514e:	bd90      	pop	{r4, r7, pc}

08005150 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE15_M_create_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	617b      	str	r3, [r7, #20]
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	429a      	cmp	r2, r3
 8005166:	d209      	bcs.n	800517c <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE15_M_create_nodesEPPS1_S5_+0x2c>
	    *__cur = this->_M_allocate_node();
 8005168:	68f8      	ldr	r0, [r7, #12]
 800516a:	f000 f8c2 	bl	80052f2 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE16_M_allocate_nodeEv>
 800516e:	4602      	mov	r2, r0
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	3304      	adds	r3, #4
 8005178:	617b      	str	r3, [r7, #20]
 800517a:	e7f1      	b.n	8005160 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE15_M_create_nodesEPPS1_S5_+0x10>
    }
 800517c:	bf00      	nop
 800517e:	3718      	adds	r7, #24
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <_ZNSt15_Deque_iteratorIP8IXFEventRS1_PS1_E11_M_set_nodeEPS3_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8005184:	b590      	push	{r4, r7, lr}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	683a      	ldr	r2, [r7, #0]
 8005192:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685c      	ldr	r4, [r3, #4]
 80051a0:	f000 f8f5 	bl	800538e <_ZNSt15_Deque_iteratorIP8IXFEventRS1_PS1_E14_S_buffer_sizeEv>
 80051a4:	4603      	mov	r3, r0
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	18e2      	adds	r2, r4, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	609a      	str	r2, [r3, #8]
      }
 80051ae:	bf00      	nop
 80051b0:	370c      	adds	r7, #12
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd90      	pop	{r4, r7, pc}

080051b6 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE18_M_deallocate_nodeEPS1_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 80051b6:	b590      	push	{r4, r7, lr}
 80051b8:	b083      	sub	sp, #12
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
 80051be:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 80051c0:	687c      	ldr	r4, [r7, #4]
 80051c2:	2004      	movs	r0, #4
 80051c4:	f7ff fb10 	bl	80047e8 <_ZSt16__deque_buf_sizej>
 80051c8:	4603      	mov	r3, r0
 80051ca:	461a      	mov	r2, r3
 80051cc:	6839      	ldr	r1, [r7, #0]
 80051ce:	4620      	mov	r0, r4
 80051d0:	f000 f8e5 	bl	800539e <_ZNSt16allocator_traitsISaIP8IXFEventEE10deallocateERS2_PS1_j>
      }
 80051d4:	bf00      	nop
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd90      	pop	{r4, r7, pc}

080051dc <_ZNKSt11_Deque_baseIP8IXFEventSaIS1_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 80051e6:	6838      	ldr	r0, [r7, #0]
 80051e8:	f000 f8e8 	bl	80053bc <_ZNKSt11_Deque_baseIP8IXFEventSaIS1_EE19_M_get_Tp_allocatorEv>
 80051ec:	4603      	mov	r3, r0
 80051ee:	4619      	mov	r1, r3
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 f8ee 	bl	80053d2 <_ZNSaIPP8IXFEventEC1IS0_EERKSaIT_E>
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	3708      	adds	r7, #8
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}

080051fe <_ZNSaIPP8IXFEventED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80051fe:	b580      	push	{r7, lr}
 8005200:	b082      	sub	sp, #8
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 f8f0 	bl	80053ec <_ZN9__gnu_cxx13new_allocatorIPP8IXFEventED1Ev>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4618      	mov	r0, r3
 8005210:	3708      	adds	r7, #8
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <_ZNSt16allocator_traitsISaIPP8IXFEventEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8005216:	b580      	push	{r7, lr}
 8005218:	b084      	sub	sp, #16
 800521a:	af00      	add	r7, sp, #0
 800521c:	60f8      	str	r0, [r7, #12]
 800521e:	60b9      	str	r1, [r7, #8]
 8005220:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	68b9      	ldr	r1, [r7, #8]
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	f000 f8eb 	bl	8005402 <_ZN9__gnu_cxx13new_allocatorIPP8IXFEventE10deallocateEPS3_j>
 800522c:	bf00      	nop
 800522e:	3710      	adds	r7, #16
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <_ZSt7forwardIRKP8IXFEventEOT_RNSt16remove_referenceIS4_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4618      	mov	r0, r3
 8005240:	370c      	adds	r7, #12
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <_ZN9__gnu_cxx13new_allocatorIP8IXFEventE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 800524a:	b590      	push	{r4, r7, lr}
 800524c:	b085      	sub	sp, #20
 800524e:	af00      	add	r7, sp, #0
 8005250:	60f8      	str	r0, [r7, #12]
 8005252:	60b9      	str	r1, [r7, #8]
 8005254:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f7ff ffec 	bl	8005234 <_ZSt7forwardIRKP8IXFEventEOT_RNSt16remove_referenceIS4_E4typeE>
 800525c:	4603      	mov	r3, r0
 800525e:	681c      	ldr	r4, [r3, #0]
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	4619      	mov	r1, r3
 8005264:	2004      	movs	r0, #4
 8005266:	f7ff fab3 	bl	80047d0 <_ZnwjPv>
 800526a:	4603      	mov	r3, r0
 800526c:	601c      	str	r4, [r3, #0]
 800526e:	bf00      	nop
 8005270:	3714      	adds	r7, #20
 8005272:	46bd      	mov	sp, r7
 8005274:	bd90      	pop	{r4, r7, pc}

08005276 <_ZNKSt5dequeIP8IXFEventSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8005276:	b580      	push	{r7, lr}
 8005278:	b082      	sub	sp, #8
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f103 0218 	add.w	r2, r3, #24
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	3308      	adds	r3, #8
 8005288:	4619      	mov	r1, r3
 800528a:	4610      	mov	r0, r2
 800528c:	f000 f8c9 	bl	8005422 <_ZStmiRKSt15_Deque_iteratorIP8IXFEventRS1_PS1_ES6_>
 8005290:	4603      	mov	r3, r0
 8005292:	4618      	mov	r0, r3
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <_ZNKSt5dequeIP8IXFEventSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800529a:	b580      	push	{r7, lr}
 800529c:	b082      	sub	sp, #8
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4618      	mov	r0, r3
 80052a6:	f000 f889 	bl	80053bc <_ZNKSt11_Deque_baseIP8IXFEventSaIS1_EE19_M_get_Tp_allocatorEv>
 80052aa:	4603      	mov	r3, r0
 80052ac:	4618      	mov	r0, r3
 80052ae:	f000 f8dc 	bl	800546a <_ZNSt5dequeIP8IXFEventSaIS1_EE11_S_max_sizeERKS2_>
 80052b2:	4603      	mov	r3, r0
 80052b4:	4618      	mov	r0, r3
 80052b6:	3708      	adds	r7, #8
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <_ZNSt5dequeIP8IXFEventSaIS1_EE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	1c5a      	adds	r2, r3, #1
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 80052ce:	6879      	ldr	r1, [r7, #4]
 80052d0:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80052d2:	6879      	ldr	r1, [r7, #4]
 80052d4:	6809      	ldr	r1, [r1, #0]
 80052d6:	1a41      	subs	r1, r0, r1
 80052d8:	1089      	asrs	r1, r1, #2
 80052da:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80052dc:	429a      	cmp	r2, r3
 80052de:	d904      	bls.n	80052ea <_ZNSt5dequeIP8IXFEventSaIS1_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 80052e0:	2200      	movs	r2, #0
 80052e2:	6839      	ldr	r1, [r7, #0]
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 f8da 	bl	800549e <_ZNSt5dequeIP8IXFEventSaIS1_EE17_M_reallocate_mapEjb>
      }
 80052ea:	bf00      	nop
 80052ec:	3708      	adds	r7, #8
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}

080052f2 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 80052f2:	b590      	push	{r4, r7, lr}
 80052f4:	b083      	sub	sp, #12
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 80052fa:	687c      	ldr	r4, [r7, #4]
 80052fc:	2004      	movs	r0, #4
 80052fe:	f7ff fa73 	bl	80047e8 <_ZSt16__deque_buf_sizej>
 8005302:	4603      	mov	r3, r0
 8005304:	4619      	mov	r1, r3
 8005306:	4620      	mov	r0, r4
 8005308:	f000 f963 	bl	80055d2 <_ZNSt16allocator_traitsISaIP8IXFEventEE8allocateERS2_j>
 800530c:	4603      	mov	r3, r0
      }
 800530e:	4618      	mov	r0, r3
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	bd90      	pop	{r4, r7, pc}

08005316 <_ZN9__gnu_cxx13new_allocatorIP8IXFEventE7destroyIS2_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 8005316:	b480      	push	{r7}
 8005318:	b083      	sub	sp, #12
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
 800531e:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8005320:	bf00      	nop
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <_ZN9__gnu_cxx13new_allocatorIP8IXFEventEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4618      	mov	r0, r3
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr

08005342 <_ZNSt15_Deque_iteratorIP8IXFEventRS1_PS1_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8005342:	b480      	push	{r7}
 8005344:	b083      	sub	sp, #12
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	601a      	str	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	605a      	str	r2, [r3, #4]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	609a      	str	r2, [r3, #8]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	60da      	str	r2, [r3, #12]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4618      	mov	r0, r3
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <_ZNSt16allocator_traitsISaIPP8IXFEventEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800537a:	2200      	movs	r2, #0
 800537c:	6839      	ldr	r1, [r7, #0]
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f936 	bl	80055f0 <_ZN9__gnu_cxx13new_allocatorIPP8IXFEventE8allocateEjPKv>
 8005384:	4603      	mov	r3, r0
 8005386:	4618      	mov	r0, r3
 8005388:	3708      	adds	r7, #8
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}

0800538e <_ZNSt15_Deque_iteratorIP8IXFEventRS1_PS1_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 800538e:	b580      	push	{r7, lr}
 8005390:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8005392:	2004      	movs	r0, #4
 8005394:	f7ff fa28 	bl	80047e8 <_ZSt16__deque_buf_sizej>
 8005398:	4603      	mov	r3, r0
 800539a:	4618      	mov	r0, r3
 800539c:	bd80      	pop	{r7, pc}

0800539e <_ZNSt16allocator_traitsISaIP8IXFEventEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800539e:	b580      	push	{r7, lr}
 80053a0:	b084      	sub	sp, #16
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	60f8      	str	r0, [r7, #12]
 80053a6:	60b9      	str	r1, [r7, #8]
 80053a8:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	68b9      	ldr	r1, [r7, #8]
 80053ae:	68f8      	ldr	r0, [r7, #12]
 80053b0:	f000 f93c 	bl	800562c <_ZN9__gnu_cxx13new_allocatorIP8IXFEventE10deallocateEPS2_j>
 80053b4:	bf00      	nop
 80053b6:	3710      	adds	r7, #16
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <_ZNKSt11_Deque_baseIP8IXFEventSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4618      	mov	r0, r3
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr

080053d2 <_ZNSaIPP8IXFEventEC1IS0_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 80053d2:	b580      	push	{r7, lr}
 80053d4:	b082      	sub	sp, #8
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
 80053da:	6039      	str	r1, [r7, #0]
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 f935 	bl	800564c <_ZN9__gnu_cxx13new_allocatorIPP8IXFEventEC1Ev>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4618      	mov	r0, r3
 80053e6:	3708      	adds	r7, #8
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <_ZN9__gnu_cxx13new_allocatorIPP8IXFEventED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4618      	mov	r0, r3
 80053f8:	370c      	adds	r7, #12
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr

08005402 <_ZN9__gnu_cxx13new_allocatorIPP8IXFEventE10deallocateEPS3_j>:
      deallocate(_Tp* __p, size_type __t)
 8005402:	b580      	push	{r7, lr}
 8005404:	b084      	sub	sp, #16
 8005406:	af00      	add	r7, sp, #0
 8005408:	60f8      	str	r0, [r7, #12]
 800540a:	60b9      	str	r1, [r7, #8]
 800540c:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	4619      	mov	r1, r3
 8005414:	68b8      	ldr	r0, [r7, #8]
 8005416:	f001 f9c3 	bl	80067a0 <_ZdlPvj>
      }
 800541a:	bf00      	nop
 800541c:	3710      	adds	r7, #16
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}

08005422 <_ZStmiRKSt15_Deque_iteratorIP8IXFEventRS1_PS1_ES6_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8005422:	b580      	push	{r7, lr}
 8005424:	b082      	sub	sp, #8
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
 800542a:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 800542c:	f7ff ffaf 	bl	800538e <_ZNSt15_Deque_iteratorIP8IXFEventRS1_PS1_E14_S_buffer_sizeEv>
 8005430:	4603      	mov	r3, r0
 8005432:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	68da      	ldr	r2, [r3, #12]
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	109b      	asrs	r3, r3, #2
 8005440:	3b01      	subs	r3, #1
 8005442:	fb01 f303 	mul.w	r3, r1, r3
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	6811      	ldr	r1, [r2, #0]
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	6852      	ldr	r2, [r2, #4]
 800544e:	1a8a      	subs	r2, r1, r2
 8005450:	1092      	asrs	r2, r2, #2
 8005452:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8005454:	683a      	ldr	r2, [r7, #0]
 8005456:	6891      	ldr	r1, [r2, #8]
 8005458:	683a      	ldr	r2, [r7, #0]
 800545a:	6812      	ldr	r2, [r2, #0]
 800545c:	1a8a      	subs	r2, r1, r2
 800545e:	1092      	asrs	r2, r2, #2
 8005460:	4413      	add	r3, r2
      }
 8005462:	4618      	mov	r0, r3
 8005464:	3708      	adds	r7, #8
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <_ZNSt5dequeIP8IXFEventSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800546a:	b580      	push	{r7, lr}
 800546c:	b084      	sub	sp, #16
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8005472:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8005476:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 f8f2 	bl	8005662 <_ZNSt16allocator_traitsISaIP8IXFEventEE8max_sizeERKS2_>
 800547e:	4603      	mov	r3, r0
 8005480:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8005482:	f107 0208 	add.w	r2, r7, #8
 8005486:	f107 030c 	add.w	r3, r7, #12
 800548a:	4611      	mov	r1, r2
 800548c:	4618      	mov	r0, r3
 800548e:	f000 f8f4 	bl	800567a <_ZSt3minIjERKT_S2_S2_>
 8005492:	4603      	mov	r3, r0
 8005494:	681b      	ldr	r3, [r3, #0]
      }
 8005496:	4618      	mov	r0, r3
 8005498:	3710      	adds	r7, #16
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}

0800549e <_ZNSt5dequeIP8IXFEventSaIS1_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 800549e:	b590      	push	{r4, r7, lr}
 80054a0:	b08b      	sub	sp, #44	; 0x2c
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	60f8      	str	r0, [r7, #12]
 80054a6:	60b9      	str	r1, [r7, #8]
 80054a8:	4613      	mov	r3, r2
 80054aa:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	695b      	ldr	r3, [r3, #20]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	109b      	asrs	r3, r3, #2
 80054b8:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 80054ba:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	6a3a      	ldr	r2, [r7, #32]
 80054c0:	4413      	add	r3, r2
 80054c2:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	685a      	ldr	r2, [r3, #4]
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	005b      	lsls	r3, r3, #1
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d92d      	bls.n	800552c <_ZNSt5dequeIP8IXFEventSaIS1_EE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	1acb      	subs	r3, r1, r3
 80054dc:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80054de:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 80054e0:	79fb      	ldrb	r3, [r7, #7]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d002      	beq.n	80054ec <_ZNSt5dequeIP8IXFEventSaIS1_EE17_M_reallocate_mapEjb+0x4e>
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	e000      	b.n	80054ee <_ZNSt5dequeIP8IXFEventSaIS1_EE17_M_reallocate_mapEjb+0x50>
 80054ec:	2300      	movs	r3, #0
 80054ee:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80054f0:	4413      	add	r3, r2
 80054f2:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	695b      	ldr	r3, [r3, #20]
 80054f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d209      	bcs.n	8005512 <_ZNSt5dequeIP8IXFEventSaIS1_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8005506:	3304      	adds	r3, #4
 8005508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800550a:	4619      	mov	r1, r3
 800550c:	f000 f8c9 	bl	80056a2 <_ZSt4copyIPPP8IXFEventS3_ET0_T_S5_S4_>
 8005510:	e048      	b.n	80055a4 <_ZNSt5dequeIP8IXFEventSaIS1_EE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800551a:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 800551c:	6a3b      	ldr	r3, [r7, #32]
 800551e:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8005520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005522:	4413      	add	r3, r2
 8005524:	461a      	mov	r2, r3
 8005526:	f000 f8d4 	bl	80056d2 <_ZSt13copy_backwardIPPP8IXFEventS3_ET0_T_S5_S4_>
 800552a:	e03b      	b.n	80055a4 <_ZNSt5dequeIP8IXFEventSaIS1_EE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	3304      	adds	r3, #4
 8005534:	f107 0208 	add.w	r2, r7, #8
 8005538:	4611      	mov	r1, r2
 800553a:	4618      	mov	r0, r3
 800553c:	f7ff fdd7 	bl	80050ee <_ZSt3maxIjERKT_S2_S2_>
 8005540:	4603      	mov	r3, r0
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8005546:	3302      	adds	r3, #2
 8005548:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	69b9      	ldr	r1, [r7, #24]
 800554e:	4618      	mov	r0, r3
 8005550:	f7ff fde1 	bl	8005116 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE15_M_allocate_mapEj>
 8005554:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8005556:	69ba      	ldr	r2, [r7, #24]
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	085b      	lsrs	r3, r3, #1
 800555e:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8005560:	79fb      	ldrb	r3, [r7, #7]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d002      	beq.n	800556c <_ZNSt5dequeIP8IXFEventSaIS1_EE17_M_reallocate_mapEjb+0xce>
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	e000      	b.n	800556e <_ZNSt5dequeIP8IXFEventSaIS1_EE17_M_reallocate_mapEjb+0xd0>
 800556c:	2300      	movs	r3, #0
 800556e:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8005570:	697a      	ldr	r2, [r7, #20]
 8005572:	4413      	add	r3, r2
 8005574:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 800557e:	3304      	adds	r3, #4
 8005580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005582:	4619      	mov	r1, r3
 8005584:	f000 f88d 	bl	80056a2 <_ZSt4copyIPPP8IXFEventS3_ET0_T_S5_S4_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8005588:	68f8      	ldr	r0, [r7, #12]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6819      	ldr	r1, [r3, #0]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	461a      	mov	r2, r3
 8005594:	f7ff fcb2 	bl	8004efc <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE17_M_deallocate_mapEPPS1_j>

	  this->_M_impl._M_map = __new_map;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	69ba      	ldr	r2, [r7, #24]
 80055a2:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	3308      	adds	r3, #8
 80055a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7ff fdea 	bl	8005184 <_ZNSt15_Deque_iteratorIP8IXFEventRS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f103 0018 	add.w	r0, r3, #24
 80055b6:	6a3b      	ldr	r3, [r7, #32]
 80055b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80055bc:	3b01      	subs	r3, #1
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055c2:	4413      	add	r3, r2
 80055c4:	4619      	mov	r1, r3
 80055c6:	f7ff fddd 	bl	8005184 <_ZNSt15_Deque_iteratorIP8IXFEventRS1_PS1_E11_M_set_nodeEPS3_>
    }
 80055ca:	bf00      	nop
 80055cc:	372c      	adds	r7, #44	; 0x2c
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd90      	pop	{r4, r7, pc}

080055d2 <_ZNSt16allocator_traitsISaIP8IXFEventEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b082      	sub	sp, #8
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
 80055da:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80055dc:	2200      	movs	r2, #0
 80055de:	6839      	ldr	r1, [r7, #0]
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 f88e 	bl	8005702 <_ZN9__gnu_cxx13new_allocatorIP8IXFEventE8allocateEjPKv>
 80055e6:	4603      	mov	r3, r0
 80055e8:	4618      	mov	r0, r3
 80055ea:	3708      	adds	r7, #8
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <_ZN9__gnu_cxx13new_allocatorIPP8IXFEventE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80055fc:	68f8      	ldr	r0, [r7, #12]
 80055fe:	f000 f89e 	bl	800573e <_ZNK9__gnu_cxx13new_allocatorIPP8IXFEventE11_M_max_sizeEv>
 8005602:	4602      	mov	r2, r0
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	4293      	cmp	r3, r2
 8005608:	bf8c      	ite	hi
 800560a:	2301      	movhi	r3, #1
 800560c:	2300      	movls	r3, #0
 800560e:	b2db      	uxtb	r3, r3
 8005610:	2b00      	cmp	r3, #0
 8005612:	d001      	beq.n	8005618 <_ZN9__gnu_cxx13new_allocatorIPP8IXFEventE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8005614:	f001 f8f5 	bl	8006802 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4618      	mov	r0, r3
 800561e:	f001 f8d0 	bl	80067c2 <_Znwj>
 8005622:	4603      	mov	r3, r0
      }
 8005624:	4618      	mov	r0, r3
 8005626:	3710      	adds	r7, #16
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <_ZN9__gnu_cxx13new_allocatorIP8IXFEventE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	4619      	mov	r1, r3
 800563e:	68b8      	ldr	r0, [r7, #8]
 8005640:	f001 f8ae 	bl	80067a0 <_ZdlPvj>
      }
 8005644:	bf00      	nop
 8005646:	3710      	adds	r7, #16
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <_ZN9__gnu_cxx13new_allocatorIPP8IXFEventEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4618      	mov	r0, r3
 8005658:	370c      	adds	r7, #12
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr

08005662 <_ZNSt16allocator_traitsISaIP8IXFEventEE8max_sizeERKS2_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static _GLIBCXX20_CONSTEXPR size_type
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8005662:	b580      	push	{r7, lr}
 8005664:	b082      	sub	sp, #8
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus <= 201703L
	return __a.max_size();
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 f873 	bl	8005756 <_ZNK9__gnu_cxx13new_allocatorIP8IXFEventE8max_sizeEv>
 8005670:	4603      	mov	r3, r0
#else
	return size_t(-1) / sizeof(value_type);
#endif
      }
 8005672:	4618      	mov	r0, r3
 8005674:	3708      	adds	r7, #8
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800567a:	b480      	push	{r7}
 800567c:	b083      	sub	sp, #12
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
 8005682:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	429a      	cmp	r2, r3
 800568e:	d201      	bcs.n	8005694 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	e000      	b.n	8005696 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8005694:	687b      	ldr	r3, [r7, #4]
    }
 8005696:	4618      	mov	r0, r3
 8005698:	370c      	adds	r7, #12
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr

080056a2 <_ZSt4copyIPPP8IXFEventS3_ET0_T_S5_S4_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 80056a2:	b590      	push	{r4, r7, lr}
 80056a4:	b085      	sub	sp, #20
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	60f8      	str	r0, [r7, #12]
 80056aa:	60b9      	str	r1, [r7, #8]
 80056ac:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80056ae:	68f8      	ldr	r0, [r7, #12]
 80056b0:	f000 f85d 	bl	800576e <_ZSt12__miter_baseIPPP8IXFEventET_S4_>
 80056b4:	4604      	mov	r4, r0
 80056b6:	68b8      	ldr	r0, [r7, #8]
 80056b8:	f000 f859 	bl	800576e <_ZSt12__miter_baseIPPP8IXFEventET_S4_>
 80056bc:	4603      	mov	r3, r0
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	4619      	mov	r1, r3
 80056c2:	4620      	mov	r0, r4
 80056c4:	f000 f85e 	bl	8005784 <_ZSt13__copy_move_aILb0EPPP8IXFEventS3_ET1_T0_S5_S4_>
 80056c8:	4603      	mov	r3, r0
    }
 80056ca:	4618      	mov	r0, r3
 80056cc:	3714      	adds	r7, #20
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd90      	pop	{r4, r7, pc}

080056d2 <_ZSt13copy_backwardIPPP8IXFEventS3_ET0_T_S5_S4_>:
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    _GLIBCXX20_CONSTEXPR
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 80056d2:	b590      	push	{r4, r7, lr}
 80056d4:	b085      	sub	sp, #20
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	60f8      	str	r0, [r7, #12]
 80056da:	60b9      	str	r1, [r7, #8]
 80056dc:	607a      	str	r2, [r7, #4]
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a<__is_move_iterator<_BI1>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f000 f845 	bl	800576e <_ZSt12__miter_baseIPPP8IXFEventET_S4_>
 80056e4:	4604      	mov	r4, r0
 80056e6:	68b8      	ldr	r0, [r7, #8]
 80056e8:	f000 f841 	bl	800576e <_ZSt12__miter_baseIPPP8IXFEventET_S4_>
 80056ec:	4603      	mov	r3, r0
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	4619      	mov	r1, r3
 80056f2:	4620      	mov	r0, r4
 80056f4:	f000 f869 	bl	80057ca <_ZSt22__copy_move_backward_aILb0EPPP8IXFEventS3_ET1_T0_S5_S4_>
 80056f8:	4603      	mov	r3, r0
    }
 80056fa:	4618      	mov	r0, r3
 80056fc:	3714      	adds	r7, #20
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd90      	pop	{r4, r7, pc}

08005702 <_ZN9__gnu_cxx13new_allocatorIP8IXFEventE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8005702:	b580      	push	{r7, lr}
 8005704:	b084      	sub	sp, #16
 8005706:	af00      	add	r7, sp, #0
 8005708:	60f8      	str	r0, [r7, #12]
 800570a:	60b9      	str	r1, [r7, #8]
 800570c:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800570e:	68f8      	ldr	r0, [r7, #12]
 8005710:	f000 f87e 	bl	8005810 <_ZNK9__gnu_cxx13new_allocatorIP8IXFEventE11_M_max_sizeEv>
 8005714:	4602      	mov	r2, r0
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	4293      	cmp	r3, r2
 800571a:	bf8c      	ite	hi
 800571c:	2301      	movhi	r3, #1
 800571e:	2300      	movls	r3, #0
 8005720:	b2db      	uxtb	r3, r3
 8005722:	2b00      	cmp	r3, #0
 8005724:	d001      	beq.n	800572a <_ZN9__gnu_cxx13new_allocatorIP8IXFEventE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8005726:	f001 f86c 	bl	8006802 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	4618      	mov	r0, r3
 8005730:	f001 f847 	bl	80067c2 <_Znwj>
 8005734:	4603      	mov	r3, r0
      }
 8005736:	4618      	mov	r0, r3
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <_ZNK9__gnu_cxx13new_allocatorIPP8IXFEventE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800573e:	b480      	push	{r7}
 8005740:	b083      	sub	sp, #12
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8005746:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 800574a:	4618      	mov	r0, r3
 800574c:	370c      	adds	r7, #12
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr

08005756 <_ZNK9__gnu_cxx13new_allocatorIP8IXFEventE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8005756:	b580      	push	{r7, lr}
 8005758:	b082      	sub	sp, #8
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 f856 	bl	8005810 <_ZNK9__gnu_cxx13new_allocatorIP8IXFEventE11_M_max_sizeEv>
 8005764:	4603      	mov	r3, r0
 8005766:	4618      	mov	r0, r3
 8005768:	3708      	adds	r7, #8
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}

0800576e <_ZSt12__miter_baseIPPP8IXFEventET_S4_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 800576e:	b480      	push	{r7}
 8005770:	b083      	sub	sp, #12
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
    { return __it; }
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4618      	mov	r0, r3
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <_ZSt13__copy_move_aILb0EPPP8IXFEventS3_ET1_T0_S5_S4_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8005784:	b5b0      	push	{r4, r5, r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	f000 f849 	bl	8005828 <_ZSt12__niter_baseIPPP8IXFEventET_S4_>
 8005796:	4604      	mov	r4, r0
 8005798:	68b8      	ldr	r0, [r7, #8]
 800579a:	f000 f845 	bl	8005828 <_ZSt12__niter_baseIPPP8IXFEventET_S4_>
 800579e:	4605      	mov	r5, r0
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4618      	mov	r0, r3
 80057a4:	f000 f840 	bl	8005828 <_ZSt12__niter_baseIPPP8IXFEventET_S4_>
 80057a8:	4603      	mov	r3, r0
 80057aa:	461a      	mov	r2, r3
 80057ac:	4629      	mov	r1, r5
 80057ae:	4620      	mov	r0, r4
 80057b0:	f000 f845 	bl	800583e <_ZSt14__copy_move_a1ILb0EPPP8IXFEventS3_ET1_T0_S5_S4_>
 80057b4:	4602      	mov	r2, r0
 80057b6:	1d3b      	adds	r3, r7, #4
 80057b8:	4611      	mov	r1, r2
 80057ba:	4618      	mov	r0, r3
 80057bc:	f000 f84f 	bl	800585e <_ZSt12__niter_wrapIPPP8IXFEventET_RKS4_S4_>
 80057c0:	4603      	mov	r3, r0
    }
 80057c2:	4618      	mov	r0, r3
 80057c4:	3710      	adds	r7, #16
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bdb0      	pop	{r4, r5, r7, pc}

080057ca <_ZSt22__copy_move_backward_aILb0EPPP8IXFEventS3_ET1_T0_S5_S4_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 80057ca:	b5b0      	push	{r4, r5, r7, lr}
 80057cc:	b084      	sub	sp, #16
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	60f8      	str	r0, [r7, #12]
 80057d2:	60b9      	str	r1, [r7, #8]
 80057d4:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80057d6:	68f8      	ldr	r0, [r7, #12]
 80057d8:	f000 f826 	bl	8005828 <_ZSt12__niter_baseIPPP8IXFEventET_S4_>
 80057dc:	4604      	mov	r4, r0
 80057de:	68b8      	ldr	r0, [r7, #8]
 80057e0:	f000 f822 	bl	8005828 <_ZSt12__niter_baseIPPP8IXFEventET_S4_>
 80057e4:	4605      	mov	r5, r0
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4618      	mov	r0, r3
 80057ea:	f000 f81d 	bl	8005828 <_ZSt12__niter_baseIPPP8IXFEventET_S4_>
 80057ee:	4603      	mov	r3, r0
 80057f0:	461a      	mov	r2, r3
 80057f2:	4629      	mov	r1, r5
 80057f4:	4620      	mov	r0, r4
 80057f6:	f000 f83e 	bl	8005876 <_ZSt23__copy_move_backward_a1ILb0EPPP8IXFEventS3_ET1_T0_S5_S4_>
 80057fa:	4602      	mov	r2, r0
 80057fc:	1d3b      	adds	r3, r7, #4
 80057fe:	4611      	mov	r1, r2
 8005800:	4618      	mov	r0, r3
 8005802:	f000 f82c 	bl	800585e <_ZSt12__niter_wrapIPPP8IXFEventET_RKS4_S4_>
 8005806:	4603      	mov	r3, r0
    }
 8005808:	4618      	mov	r0, r3
 800580a:	3710      	adds	r7, #16
 800580c:	46bd      	mov	sp, r7
 800580e:	bdb0      	pop	{r4, r5, r7, pc}

08005810 <_ZNK9__gnu_cxx13new_allocatorIP8IXFEventE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8005818:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 800581c:	4618      	mov	r0, r3
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <_ZSt12__niter_baseIPPP8IXFEventET_S4_>:
    __niter_base(_Iterator __it)
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4618      	mov	r0, r3
 8005834:	370c      	adds	r7, #12
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr

0800583e <_ZSt14__copy_move_a1ILb0EPPP8IXFEventS3_ET1_T0_S5_S4_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800583e:	b580      	push	{r7, lr}
 8005840:	b084      	sub	sp, #16
 8005842:	af00      	add	r7, sp, #0
 8005844:	60f8      	str	r0, [r7, #12]
 8005846:	60b9      	str	r1, [r7, #8]
 8005848:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	68b9      	ldr	r1, [r7, #8]
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	f000 f821 	bl	8005896 <_ZSt14__copy_move_a2ILb0EPPP8IXFEventS3_ET1_T0_S5_S4_>
 8005854:	4603      	mov	r3, r0
 8005856:	4618      	mov	r0, r3
 8005858:	3710      	adds	r7, #16
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <_ZSt12__niter_wrapIPPP8IXFEventET_RKS4_S4_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800585e:	b480      	push	{r7}
 8005860:	b083      	sub	sp, #12
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
 8005866:	6039      	str	r1, [r7, #0]
    { return __res; }
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	4618      	mov	r0, r3
 800586c:	370c      	adds	r7, #12
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr

08005876 <_ZSt23__copy_move_backward_a1ILb0EPPP8IXFEventS3_ET1_T0_S5_S4_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8005876:	b580      	push	{r7, lr}
 8005878:	b084      	sub	sp, #16
 800587a:	af00      	add	r7, sp, #0
 800587c:	60f8      	str	r0, [r7, #12]
 800587e:	60b9      	str	r1, [r7, #8]
 8005880:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	68b9      	ldr	r1, [r7, #8]
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f000 f815 	bl	80058b6 <_ZSt23__copy_move_backward_a2ILb0EPPP8IXFEventS3_ET1_T0_S5_S4_>
 800588c:	4603      	mov	r3, r0
 800588e:	4618      	mov	r0, r3
 8005890:	3710      	adds	r7, #16
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}

08005896 <_ZSt14__copy_move_a2ILb0EPPP8IXFEventS3_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8005896:	b580      	push	{r7, lr}
 8005898:	b084      	sub	sp, #16
 800589a:	af00      	add	r7, sp, #0
 800589c:	60f8      	str	r0, [r7, #12]
 800589e:	60b9      	str	r1, [r7, #8]
 80058a0:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	68b9      	ldr	r1, [r7, #8]
 80058a6:	68f8      	ldr	r0, [r7, #12]
 80058a8:	f000 f815 	bl	80058d6 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPP8IXFEventEEPT_PKS6_S9_S7_>
 80058ac:	4603      	mov	r3, r0
    }
 80058ae:	4618      	mov	r0, r3
 80058b0:	3710      	adds	r7, #16
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <_ZSt23__copy_move_backward_a2ILb0EPPP8IXFEventS3_ET1_T0_S5_S4_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b084      	sub	sp, #16
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	60f8      	str	r0, [r7, #12]
 80058be:	60b9      	str	r1, [r7, #8]
 80058c0:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	68b9      	ldr	r1, [r7, #8]
 80058c6:	68f8      	ldr	r0, [r7, #12]
 80058c8:	f000 f822 	bl	8005910 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPP8IXFEventEEPT_PKS6_S9_S7_>
 80058cc:	4603      	mov	r3, r0
    }
 80058ce:	4618      	mov	r0, r3
 80058d0:	3710      	adds	r7, #16
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}

080058d6 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPP8IXFEventEEPT_PKS6_S9_S7_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80058d6:	b580      	push	{r7, lr}
 80058d8:	b086      	sub	sp, #24
 80058da:	af00      	add	r7, sp, #0
 80058dc:	60f8      	str	r0, [r7, #12]
 80058de:	60b9      	str	r1, [r7, #8]
 80058e0:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80058e2:	68ba      	ldr	r2, [r7, #8]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	109b      	asrs	r3, r3, #2
 80058ea:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d006      	beq.n	8005900 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPP8IXFEventEEPT_PKS6_S9_S7_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	461a      	mov	r2, r3
 80058f8:	68f9      	ldr	r1, [r7, #12]
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f001 f82a 	bl	8006954 <memmove>
	  return __result + _Num;
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	4413      	add	r3, r2
	}
 8005908:	4618      	mov	r0, r3
 800590a:	3718      	adds	r7, #24
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPP8IXFEventEEPT_PKS6_S9_S7_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8005910:	b580      	push	{r7, lr}
 8005912:	b086      	sub	sp, #24
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800591c:	68ba      	ldr	r2, [r7, #8]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	109b      	asrs	r3, r3, #2
 8005924:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d00a      	beq.n	8005942 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPP8IXFEventEEPT_PKS6_S9_S7_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	425b      	negs	r3, r3
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	18d0      	adds	r0, r2, r3
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	461a      	mov	r2, r3
 800593c:	68f9      	ldr	r1, [r7, #12]
 800593e:	f001 f809 	bl	8006954 <memmove>
	  return __result - _Num;
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	425b      	negs	r3, r3
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	4413      	add	r3, r2
	}
 800594c:	4618      	mov	r0, r3
 800594e:	3718      	adds	r7, #24
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <_ZN9XFTimeoutC1EiiP11IXFReactive>:
 * Constructor of the class.
 * \param id The id given by the behavioral class to uniquely identifing the timeout
 * \param interval The interval in milliseconds the timeout expires
 * \param pBehavior Pointer to behavioral class to which the timeout belongs.
 */
XFTimeout::XFTimeout(int id, int interval, IXFReactive * pBehavior)
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]
 8005960:	603b      	str	r3, [r7, #0]
 : IXFEvent(IXFEvent::Timeout, id, pBehavior),
   _interval(interval),
   _relTicks(interval)
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	68ba      	ldr	r2, [r7, #8]
 8005968:	2104      	movs	r1, #4
 800596a:	f7fe fc07 	bl	800417c <_ZN8IXFEventC1ENS_10eEventTypeEiP11IXFReactive>
 800596e:	4a07      	ldr	r2, [pc, #28]	; (800598c <_ZN9XFTimeoutC1EiiP11IXFReactive+0x38>)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	601a      	str	r2, [r3, #0]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	615a      	str	r2, [r3, #20]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	619a      	str	r2, [r3, #24]
{
}
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	4618      	mov	r0, r3
 8005984:	3710      	adds	r7, #16
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	080083b8 	.word	0x080083b8

08005990 <_ZN9XFTimeoutD1Ev>:

XFTimeout::~XFTimeout()
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	4a05      	ldr	r2, [pc, #20]	; (80059b0 <_ZN9XFTimeoutD1Ev+0x20>)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	601a      	str	r2, [r3, #0]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4618      	mov	r0, r3
 80059a2:	f7fe fc11 	bl	80041c8 <_ZN8IXFEventD1Ev>
{

}
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4618      	mov	r0, r3
 80059aa:	3708      	adds	r7, #8
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	080083b8 	.word	0x080083b8

080059b4 <_ZN9XFTimeoutD0Ev>:
XFTimeout::~XFTimeout()
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
}
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f7ff ffe7 	bl	8005990 <_ZN9XFTimeoutD1Ev>
 80059c2:	211c      	movs	r1, #28
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 feeb 	bl	80067a0 <_ZdlPvj>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4618      	mov	r0, r3
 80059ce:	3708      	adds	r7, #8
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <_ZNK9XFTimeouteqERKS_>:
/**
 * Operator checks if _pBehavior and _id are equal and returns
 * true if so. All other attributes get no attention.
 */
bool XFTimeout::operator ==(const XFTimeout & timeout) const
{
 80059d4:	b590      	push	{r4, r7, lr}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
    // Check behavior and timeout id attributes, if there are equal
    return (_pBehavior == timeout._pBehavior && getId() == timeout.getId()) ? true : false;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	691a      	ldr	r2, [r3, #16]
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d10d      	bne.n	8005a06 <_ZNK9XFTimeouteqERKS_+0x32>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4618      	mov	r0, r3
 80059ee:	f7fd fdd3 	bl	8003598 <_ZNK8IXFEvent5getIdEv>
 80059f2:	4604      	mov	r4, r0
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7fd fdce 	bl	8003598 <_ZNK8IXFEvent5getIdEv>
 80059fc:	4603      	mov	r3, r0
 80059fe:	429c      	cmp	r4, r3
 8005a00:	d101      	bne.n	8005a06 <_ZNK9XFTimeouteqERKS_+0x32>
 8005a02:	2301      	movs	r3, #1
 8005a04:	e000      	b.n	8005a08 <_ZNK9XFTimeouteqERKS_+0x34>
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd90      	pop	{r4, r7, pc}

08005a10 <_ZNSt8__detail17_List_node_headerC1Ev>:
    {
#if _GLIBCXX_USE_CXX11_ABI
      std::size_t _M_size;
#endif

      _List_node_header() _GLIBCXX_NOEXCEPT
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
      { _M_init(); }
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 f805 	bl	8005a28 <_ZNSt8__detail17_List_node_header7_M_initEv>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4618      	mov	r0, r3
 8005a22:	3708      	adds	r7, #8
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <_ZNSt8__detail17_List_node_header7_M_initEv>:
	  }
      }
#endif

      void
      _M_init() _GLIBCXX_NOEXCEPT
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
      {
	this->_M_next = this->_M_prev = this;
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	605a      	str	r2, [r3, #4]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	685a      	ldr	r2, [r3, #4]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	601a      	str	r2, [r3, #0]
#if _GLIBCXX_USE_CXX11_ABI
	this->_M_size = 0;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	609a      	str	r2, [r3, #8]
#endif
      }
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE10_List_implD1Ev>:
	  }
	return __n;
      }
#endif

      struct _List_impl
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 fb23 	bl	80060a4 <_ZNSaISt10_List_nodeIP9XFTimeoutEED1Ev>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4618      	mov	r0, r3
 8005a62:	3708      	adds	r7, #8
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EEC1Ev>:
      const _Node_alloc_type&
      _M_get_Node_allocator() const _GLIBCXX_NOEXCEPT
      { return _M_impl; }

#if __cplusplus >= 201103L
      _List_base() = default;
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4618      	mov	r0, r3
 8005a74:	f000 fb06 	bl	8006084 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE10_List_implC1Ev>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3708      	adds	r7, #8
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EEC1Ev>:

      /**
       *  @brief  Creates a %list with no elements.
       */
#if __cplusplus >= 201103L
      list() = default;
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b082      	sub	sp, #8
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f7ff ffeb 	bl	8005a68 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EEC1Ev>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4618      	mov	r0, r3
 8005a96:	3708      	adds	r7, #8
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EED1Ev>:
       *  things.  The _Base dtor only erases the elements, and note
       *  that if the elements themselves are pointers, the pointed-to
       *  memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      ~list() = default;
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f000 fb08 	bl	80060bc <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EED1Ev>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3708      	adds	r7, #8
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
	...

08005ab8 <_ZN16XFTimeoutManagerC1Ev>:

// Initialization of static class attributes
XFTimeoutManager * XFTimeoutManager::_pInstance = NULL;


XFTimeoutManager::XFTimeoutManager()
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 : _tickInterval(0),
   _sysTicksInMs(0)
 8005ac0:	4a09      	ldr	r2, [pc, #36]	; (8005ae8 <_ZN16XFTimeoutManagerC1Ev+0x30>)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	601a      	str	r2, [r3, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	605a      	str	r2, [r3, #4]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	3308      	adds	r3, #8
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f7ff ffd6 	bl	8005a82 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EEC1Ev>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	615a      	str	r2, [r3, #20]
{
}
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3708      	adds	r7, #8
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	080083c8 	.word	0x080083c8

08005aec <_ZN16XFTimeoutManagerD1Ev>:

XFTimeoutManager::~XFTimeoutManager()
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	4a06      	ldr	r2, [pc, #24]	; (8005b10 <_ZN16XFTimeoutManagerD1Ev+0x24>)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	601a      	str	r2, [r3, #0]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	3308      	adds	r3, #8
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7ff ffcc 	bl	8005a9c <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EED1Ev>
{
}
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4618      	mov	r0, r3
 8005b08:	3708      	adds	r7, #8
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	080083c8 	.word	0x080083c8

08005b14 <_ZN16XFTimeoutManagerD0Ev>:
XFTimeoutManager::~XFTimeoutManager()
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
}
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f7ff ffe5 	bl	8005aec <_ZN16XFTimeoutManagerD1Ev>
 8005b22:	2118      	movs	r1, #24
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 fe3b 	bl	80067a0 <_ZdlPvj>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3708      	adds	r7, #8
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <_ZN16XFTimeoutManager11getInstanceEv>:

XFTimeoutManager * XFTimeoutManager::getInstance()
{
 8005b34:	b598      	push	{r3, r4, r7, lr}
 8005b36:	af00      	add	r7, sp, #0
    if (!_pInstance)
 8005b38:	4b08      	ldr	r3, [pc, #32]	; (8005b5c <_ZN16XFTimeoutManager11getInstanceEv+0x28>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d109      	bne.n	8005b54 <_ZN16XFTimeoutManager11getInstanceEv+0x20>
    {
        _pInstance = new XFTimeoutManager;
 8005b40:	2018      	movs	r0, #24
 8005b42:	f000 fe3e 	bl	80067c2 <_Znwj>
 8005b46:	4603      	mov	r3, r0
 8005b48:	461c      	mov	r4, r3
 8005b4a:	4620      	mov	r0, r4
 8005b4c:	f7ff ffb4 	bl	8005ab8 <_ZN16XFTimeoutManagerC1Ev>
 8005b50:	4b02      	ldr	r3, [pc, #8]	; (8005b5c <_ZN16XFTimeoutManager11getInstanceEv+0x28>)
 8005b52:	601c      	str	r4, [r3, #0]
    }

    return _pInstance;
 8005b54:	4b01      	ldr	r3, [pc, #4]	; (8005b5c <_ZN16XFTimeoutManager11getInstanceEv+0x28>)
 8005b56:	681b      	ldr	r3, [r3, #0]
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	bd98      	pop	{r3, r4, r7, pc}
 8005b5c:	20000344 	.word	0x20000344

08005b60 <_ZN16XFTimeoutManager15setTickIntervalEi>:
/**
 * Sets the time interval in milliseconds in which the timeout manager
 * should handle the timeouts.
 */
void XFTimeoutManager::setTickInterval(int tickInterval)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
    _tickInterval = tickInterval;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	683a      	ldr	r2, [r7, #0]
 8005b6e:	605a      	str	r2, [r3, #4]
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <_ZN16XFTimeoutManager5startEv>:

/**
 * Starts the timeout manager.
 */
void XFTimeoutManager::start()
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
    // Check tickInterval. Set default value if not set
    if (_tickInterval == 0)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d102      	bne.n	8005b92 <_ZN16XFTimeoutManager5startEv+0x16>
    {
        _tickInterval = 10;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	220a      	movs	r2, #10
 8005b90:	605a      	str	r2, [r3, #4]
    }

    startHardwareTimer(_tickInterval);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	4619      	mov	r1, r3
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f000 fa68 	bl	800606e <_ZN16XFTimeoutManager18startHardwareTimerEi>
}
 8005b9e:	bf00      	nop
 8005ba0:	3708      	adds	r7, #8
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}

08005ba6 <_ZN16XFTimeoutManager15scheduleTimeoutEiiP11IXFReactive>:
 * \param timeoutId The timeout id known by the reactive parameter. Is needed by the reactive part to uniquely identify the timeout.
 * \param interval The time in milliseconds to wait until the timeout expires.
 * \param pReactive The reactive instance where to inject the timeout when it timeouts.
 */
void XFTimeoutManager::scheduleTimeout(int timeoutId, int interval, IXFReactive * pReactive)
{
 8005ba6:	b590      	push	{r4, r7, lr}
 8005ba8:	b087      	sub	sp, #28
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	60f8      	str	r0, [r7, #12]
 8005bae:	60b9      	str	r1, [r7, #8]
 8005bb0:	607a      	str	r2, [r7, #4]
 8005bb2:	603b      	str	r3, [r7, #0]
    XFTimeout * pTimeout = new XFTimeout(timeoutId, interval, pReactive);
 8005bb4:	201c      	movs	r0, #28
 8005bb6:	f000 fe04 	bl	80067c2 <_Znwj>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	461c      	mov	r4, r3
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	68b9      	ldr	r1, [r7, #8]
 8005bc4:	4620      	mov	r0, r4
 8005bc6:	f7ff fec5 	bl	8005954 <_ZN9XFTimeoutC1EiiP11IXFReactive>
 8005bca:	617c      	str	r4, [r7, #20]

    if (pTimeout)
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d003      	beq.n	8005bda <_ZN16XFTimeoutManager15scheduleTimeoutEiiP11IXFReactive+0x34>
    {
        addTimeout(pTimeout);
 8005bd2:	6979      	ldr	r1, [r7, #20]
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f000 f8bb 	bl	8005d50 <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout>
    }
}
 8005bda:	bf00      	nop
 8005bdc:	371c      	adds	r7, #28
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd90      	pop	{r4, r7, pc}

08005be2 <_ZN16XFTimeoutManager17unscheduleTimeoutEiP11IXFReactive>:

/**
 * Removes all timeouts corresponding the given parameters.
 */
void XFTimeoutManager::unscheduleTimeout(int timeoutId, IXFReactive * pReactive)
{
 8005be2:	b580      	push	{r7, lr}
 8005be4:	b084      	sub	sp, #16
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	60f8      	str	r0, [r7, #12]
 8005bea:	60b9      	str	r1, [r7, #8]
 8005bec:	607a      	str	r2, [r7, #4]
    removeTimeouts(timeoutId, pReactive);
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	68b9      	ldr	r1, [r7, #8]
 8005bf2:	68f8      	ldr	r0, [r7, #12]
 8005bf4:	f000 f99e 	bl	8005f34 <_ZN16XFTimeoutManager14removeTimeoutsEiP11IXFReactive>
}
 8005bf8:	bf00      	nop
 8005bfa:	3710      	adds	r7, #16
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <_ZN16XFTimeoutManager4tickEv>:
/**
 * On each call to this method, XFTimeoutManager::_tickInterval will be removed from the
 * timeouts. When a timeout expires it is injected back to its reactive instance.
 */
void XFTimeoutManager::tick()
{
 8005c00:	b590      	push	{r4, r7, lr}
 8005c02:	b089      	sub	sp, #36	; 0x24
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
    _sysTicksInMs += tickInterval();
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f7fe fb43 	bl	8004294 <_ZNK16XFTimeoutManager12tickIntervalEv>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	695b      	ldr	r3, [r3, #20]
 8005c14:	441a      	add	r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	615a      	str	r2, [r3, #20]

    if (!_timeouts.empty())
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	3308      	adds	r3, #8
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f000 fa5c 	bl	80060dc <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE5emptyEv>
 8005c24:	4603      	mov	r3, r0
 8005c26:	f083 0301 	eor.w	r3, r3, #1
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	f000 808a 	beq.w	8005d46 <_ZN16XFTimeoutManager4tickEv+0x146>
    {
        XFTimeout * pFirstTimeout = _timeouts.front();
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	3308      	adds	r3, #8
 8005c36:	4618      	mov	r0, r3
 8005c38:	f000 fa62 	bl	8006100 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5frontEv>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	61fb      	str	r3, [r7, #28]

        // Subtract time elapsed
        pFirstTimeout->_relTicks -= tickInterval();
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f7fe fb26 	bl	8004294 <_ZNK16XFTimeoutManager12tickIntervalEv>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	1a9a      	subs	r2, r3, r2
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	619a      	str	r2, [r3, #24]

        // Check timeout timed out
        if (pFirstTimeout->_relTicks <= 0)
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	dc74      	bgt.n	8005d46 <_ZN16XFTimeoutManager4tickEv+0x146>
        {
            // Check remaining ticks can be given further
            if (_timeouts.size() > 1)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	3308      	adds	r3, #8
 8005c60:	4618      	mov	r0, r3
 8005c62:	f000 fa60 	bl	8006126 <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE4sizeEv>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	bf8c      	ite	hi
 8005c6c:	2301      	movhi	r3, #1
 8005c6e:	2300      	movls	r3, #0
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d018      	beq.n	8005ca8 <_ZN16XFTimeoutManager4tickEv+0xa8>
            {
                TimeoutList::iterator i = _timeouts.begin();
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	3308      	adds	r3, #8
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f000 fa5f 	bl	800613e <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 8005c80:	4603      	mov	r3, r0
 8005c82:	613b      	str	r3, [r7, #16]

                // Add ticks overrun to next timeout
                i++;
 8005c84:	f107 0310 	add.w	r3, r7, #16
 8005c88:	2100      	movs	r1, #0
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f000 fa68 	bl	8006160 <_ZNSt14_List_iteratorIP9XFTimeoutEppEi>
                (*i)->_relTicks -= pFirstTimeout->_relTicks;
 8005c90:	f107 0310 	add.w	r3, r7, #16
 8005c94:	4618      	mov	r0, r3
 8005c96:	f000 fa77 	bl	8006188 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	6999      	ldr	r1, [r3, #24]
 8005ca0:	69fa      	ldr	r2, [r7, #28]
 8005ca2:	6992      	ldr	r2, [r2, #24]
 8005ca4:	1a8a      	subs	r2, r1, r2
 8005ca6:	619a      	str	r2, [r3, #24]
            }

            // Inject the timeout back to the behavioral class
            returnTimeout(pFirstTimeout);
 8005ca8:	69f9      	ldr	r1, [r7, #28]
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 f9cb 	bl	8006046 <_ZN16XFTimeoutManager13returnTimeoutEP9XFTimeout>

            // Remove timeout
            _timeouts.pop_front();
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	3308      	adds	r3, #8
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f000 fa75 	bl	80061a4 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE9pop_frontEv>

            // Check if timeouts with same timeout value are present
            for (TimeoutList::iterator it = _timeouts.begin(); it != _timeouts.end(); /*Do not increment here!*/)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	3308      	adds	r3, #8
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f000 fa3d 	bl	800613e <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	60fb      	str	r3, [r7, #12]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	3308      	adds	r3, #8
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f000 fa79 	bl	80061c4 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	617b      	str	r3, [r7, #20]
 8005cd6:	f107 0214 	add.w	r2, r7, #20
 8005cda:	f107 030c 	add.w	r3, r7, #12
 8005cde:	4611      	mov	r1, r2
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f000 fa7f 	bl	80061e4 <_ZStneRKSt14_List_iteratorIP9XFTimeoutES4_>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d02c      	beq.n	8005d46 <_ZN16XFTimeoutManager4tickEv+0x146>
            {
                if ((*it)->_relTicks == 0)
 8005cec:	f107 030c 	add.w	r3, r7, #12
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f000 fa49 	bl	8006188 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	bf0c      	ite	eq
 8005d00:	2301      	moveq	r3, #1
 8005d02:	2300      	movne	r3, #0
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d01c      	beq.n	8005d44 <_ZN16XFTimeoutManager4tickEv+0x144>
                {
                    returnTimeout(*it);
 8005d0a:	f107 030c 	add.w	r3, r7, #12
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f000 fa3a 	bl	8006188 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8005d14:	4603      	mov	r3, r0
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4619      	mov	r1, r3
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 f993 	bl	8006046 <_ZN16XFTimeoutManager13returnTimeoutEP9XFTimeout>
                    it = _timeouts.erase(it);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f103 0408 	add.w	r4, r3, #8
 8005d26:	f107 020c 	add.w	r2, r7, #12
 8005d2a:	f107 0318 	add.w	r3, r7, #24
 8005d2e:	4611      	mov	r1, r2
 8005d30:	4618      	mov	r0, r3
 8005d32:	f000 fa6b 	bl	800620c <_ZNSt20_List_const_iteratorIP9XFTimeoutEC1ERKSt14_List_iteratorIS1_E>
 8005d36:	69b9      	ldr	r1, [r7, #24]
 8005d38:	4620      	mov	r0, r4
 8005d3a:	f000 fa77 	bl	800622c <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5eraseESt20_List_const_iteratorIS2_E>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	60fb      	str	r3, [r7, #12]
            for (TimeoutList::iterator it = _timeouts.begin(); it != _timeouts.end(); /*Do not increment here!*/)
 8005d42:	e7c1      	b.n	8005cc8 <_ZN16XFTimeoutManager4tickEv+0xc8>
                }
                else
                {
                    break;
 8005d44:	bf00      	nop
                }
            }
        }
    }
}
 8005d46:	bf00      	nop
 8005d48:	3724      	adds	r7, #36	; 0x24
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd90      	pop	{r4, r7, pc}
	...

08005d50 <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout>:

void XFTimeoutManager::addTimeout(XFTimeout * pNewTimeout)
{
 8005d50:	b590      	push	{r4, r7, lr}
 8005d52:	b089      	sub	sp, #36	; 0x24
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
    enterCritical();
 8005d5a:	f7fe f8ff 	bl	8003f5c <enterCritical>

    if (!_timeouts.empty())
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	3308      	adds	r3, #8
 8005d62:	4618      	mov	r0, r3
 8005d64:	f000 f9ba 	bl	80060dc <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE5emptyEv>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	f083 0301 	eor.w	r3, r3, #1
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	f000 80cb 	beq.w	8005f0c <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x1bc>
    {
        // Insert timeout before timeout(s) triggering later
        TimeoutList::iterator i = _timeouts.begin();
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	3308      	adds	r3, #8
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f000 f9df 	bl	800613e <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 8005d80:	4603      	mov	r3, r0
 8005d82:	60fb      	str	r3, [r7, #12]

        if ((*i)->_relTicks >= pNewTimeout->_relTicks)
 8005d84:	f107 030c 	add.w	r3, r7, #12
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f000 f9fd 	bl	8006188 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	699a      	ldr	r2, [r3, #24]
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	699b      	ldr	r3, [r3, #24]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	bfac      	ite	ge
 8005d9c:	2301      	movge	r3, #1
 8005d9e:	2300      	movlt	r3, #0
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d013      	beq.n	8005dce <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x7e>
        {
            // A new timeout at the beginning
            _timeouts.push_front(pNewTimeout);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	3308      	adds	r3, #8
 8005daa:	463a      	mov	r2, r7
 8005dac:	4611      	mov	r1, r2
 8005dae:	4618      	mov	r0, r3
 8005db0:	f000 fa57 	bl	8006262 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE10push_frontERKS2_>

            // Remove time from following timeout
            (*i)->_relTicks -= pNewTimeout->_relTicks;
 8005db4:	f107 030c 	add.w	r3, r7, #12
 8005db8:	4618      	mov	r0, r3
 8005dba:	f000 f9e5 	bl	8006188 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	6999      	ldr	r1, [r3, #24]
 8005dc4:	683a      	ldr	r2, [r7, #0]
 8005dc6:	6992      	ldr	r2, [r2, #24]
 8005dc8:	1a8a      	subs	r2, r1, r2
 8005dca:	619a      	str	r2, [r3, #24]
 8005dcc:	e0a5      	b.n	8005f1a <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x1ca>
        }
        else
        {
            unsigned int index = 0;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	61fb      	str	r3, [r7, #28]

            // Remove time from new timeout
            pNewTimeout->_relTicks -= (*i)->_relTicks;
 8005dd2:	f107 030c 	add.w	r3, r7, #12
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f000 f9d6 	bl	8006188 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	699a      	ldr	r2, [r3, #24]
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	6999      	ldr	r1, [r3, #24]
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	1a8a      	subs	r2, r1, r2
 8005dea:	619a      	str	r2, [r3, #24]
            i++; index++;
 8005dec:	f107 030c 	add.w	r3, r7, #12
 8005df0:	2100      	movs	r1, #0
 8005df2:	4618      	mov	r0, r3
 8005df4:	f000 f9b4 	bl	8006160 <_ZNSt14_List_iteratorIP9XFTimeoutEppEi>
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	61fb      	str	r3, [r7, #28]

            while (i != _timeouts.end() &&
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	3308      	adds	r3, #8
 8005e02:	4618      	mov	r0, r3
 8005e04:	f000 f9de 	bl	80061c4 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	613b      	str	r3, [r7, #16]
 8005e0c:	f107 0210 	add.w	r2, r7, #16
 8005e10:	f107 030c 	add.w	r3, r7, #12
 8005e14:	4611      	mov	r1, r2
 8005e16:	4618      	mov	r0, r3
 8005e18:	f000 f9e4 	bl	80061e4 <_ZStneRKSt14_List_iteratorIP9XFTimeoutES4_>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00d      	beq.n	8005e3e <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0xee>
                   (*i)->_relTicks < pNewTimeout->_relTicks)
 8005e22:	f107 030c 	add.w	r3, r7, #12
 8005e26:	4618      	mov	r0, r3
 8005e28:	f000 f9ae 	bl	8006188 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	699a      	ldr	r2, [r3, #24]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	699b      	ldr	r3, [r3, #24]
            while (i != _timeouts.end() &&
 8005e36:	429a      	cmp	r2, r3
 8005e38:	da01      	bge.n	8005e3e <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0xee>
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e000      	b.n	8005e40 <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0xf0>
 8005e3e:	2300      	movs	r3, #0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d016      	beq.n	8005e72 <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x122>
            {
                pNewTimeout->_relTicks -= (*i)->_relTicks;
 8005e44:	f107 030c 	add.w	r3, r7, #12
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f000 f99d 	bl	8006188 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	699a      	ldr	r2, [r3, #24]
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	6999      	ldr	r1, [r3, #24]
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	1a8a      	subs	r2, r1, r2
 8005e5c:	619a      	str	r2, [r3, #24]
                i++; index++;
 8005e5e:	f107 030c 	add.w	r3, r7, #12
 8005e62:	2100      	movs	r1, #0
 8005e64:	4618      	mov	r0, r3
 8005e66:	f000 f97b 	bl	8006160 <_ZNSt14_List_iteratorIP9XFTimeoutEppEi>
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	61fb      	str	r3, [r7, #28]
            while (i != _timeouts.end() &&
 8005e70:	e7c5      	b.n	8005dfe <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0xae>
            }
            // Insert new timeout before
            i = _timeouts.insert(i, pNewTimeout);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f103 0408 	add.w	r4, r3, #8
 8005e78:	f107 020c 	add.w	r2, r7, #12
 8005e7c:	f107 0314 	add.w	r3, r7, #20
 8005e80:	4611      	mov	r1, r2
 8005e82:	4618      	mov	r0, r3
 8005e84:	f000 f9c2 	bl	800620c <_ZNSt20_List_const_iteratorIP9XFTimeoutEC1ERKSt14_List_iteratorIS1_E>
 8005e88:	463b      	mov	r3, r7
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	6979      	ldr	r1, [r7, #20]
 8005e8e:	4620      	mov	r0, r4
 8005e90:	f000 f9f9 	bl	8006286 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE6insertESt20_List_const_iteratorIS2_ERKS2_>
 8005e94:	4603      	mov	r3, r0
 8005e96:	60fb      	str	r3, [r7, #12]

            if (_timeouts.size() > index + 1)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	3308      	adds	r3, #8
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f000 f942 	bl	8006126 <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE4sizeEv>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	bf8c      	ite	hi
 8005eac:	2301      	movhi	r3, #1
 8005eae:	2300      	movls	r3, #0
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d031      	beq.n	8005f1a <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x1ca>
            {
                // Remove time from following timeout
                i++;
 8005eb6:	f107 030c 	add.w	r3, r7, #12
 8005eba:	2100      	movs	r1, #0
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f000 f94f 	bl	8006160 <_ZNSt14_List_iteratorIP9XFTimeoutEppEi>
                assert(i != _timeouts.end());
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	3308      	adds	r3, #8
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f000 f97c 	bl	80061c4 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	61bb      	str	r3, [r7, #24]
 8005ed0:	f107 0218 	add.w	r2, r7, #24
 8005ed4:	f107 030c 	add.w	r3, r7, #12
 8005ed8:	4611      	mov	r1, r2
 8005eda:	4618      	mov	r0, r3
 8005edc:	f000 f982 	bl	80061e4 <_ZStneRKSt14_List_iteratorIP9XFTimeoutES4_>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d105      	bne.n	8005ef2 <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x1a2>
 8005ee6:	4b10      	ldr	r3, [pc, #64]	; (8005f28 <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x1d8>)
 8005ee8:	4a10      	ldr	r2, [pc, #64]	; (8005f2c <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x1dc>)
 8005eea:	21be      	movs	r1, #190	; 0xbe
 8005eec:	4810      	ldr	r0, [pc, #64]	; (8005f30 <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x1e0>)
 8005eee:	f000 fcb3 	bl	8006858 <__assert_func>
                (*i)->_relTicks -= pNewTimeout->_relTicks;
 8005ef2:	f107 030c 	add.w	r3, r7, #12
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f000 f946 	bl	8006188 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8005efc:	4603      	mov	r3, r0
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	6999      	ldr	r1, [r3, #24]
 8005f02:	683a      	ldr	r2, [r7, #0]
 8005f04:	6992      	ldr	r2, [r2, #24]
 8005f06:	1a8a      	subs	r2, r1, r2
 8005f08:	619a      	str	r2, [r3, #24]
 8005f0a:	e006      	b.n	8005f1a <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x1ca>
            }
        }
    }
    else
    {
        _timeouts.push_front(pNewTimeout);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	3308      	adds	r3, #8
 8005f10:	463a      	mov	r2, r7
 8005f12:	4611      	mov	r1, r2
 8005f14:	4618      	mov	r0, r3
 8005f16:	f000 f9a4 	bl	8006262 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE10push_frontERKS2_>
    }

    exitCritical();
 8005f1a:	f7fe f83d 	bl	8003f98 <exitCritical>
}
 8005f1e:	bf00      	nop
 8005f20:	3724      	adds	r7, #36	; 0x24
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd90      	pop	{r4, r7, pc}
 8005f26:	bf00      	nop
 8005f28:	080081a0 	.word	0x080081a0
 8005f2c:	080081b8 	.word	0x080081b8
 8005f30:	080081e8 	.word	0x080081e8

08005f34 <_ZN16XFTimeoutManager14removeTimeoutsEiP11IXFReactive>:

/**
 * Removes all timeouts corresponding the given parameters.
 */
void XFTimeoutManager::removeTimeouts(int timeoutId, IXFReactive * pReactive)
{
 8005f34:	b590      	push	{r4, r7, lr}
 8005f36:	b093      	sub	sp, #76	; 0x4c
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	607a      	str	r2, [r7, #4]
    const XFTimeout timeout(timeoutId, 0, pReactive);
 8005f40:	f107 001c 	add.w	r0, r7, #28
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	68b9      	ldr	r1, [r7, #8]
 8005f4a:	f7ff fd03 	bl	8005954 <_ZN9XFTimeoutC1EiiP11IXFReactive>
    XFTimeout * pTimeout;

    enterCritical();
 8005f4e:	f7fe f805 	bl	8003f5c <enterCritical>

    for (TimeoutList::iterator i = _timeouts.begin();
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	3308      	adds	r3, #8
 8005f56:	4618      	mov	r0, r3
 8005f58:	f000 f8f1 	bl	800613e <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	61bb      	str	r3, [r7, #24]
         i != _timeouts.end();)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	3308      	adds	r3, #8
 8005f64:	4618      	mov	r0, r3
 8005f66:	f000 f92d 	bl	80061c4 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f6e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005f72:	f107 0318 	add.w	r3, r7, #24
 8005f76:	4611      	mov	r1, r2
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f000 f933 	bl	80061e4 <_ZStneRKSt14_List_iteratorIP9XFTimeoutES4_>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d055      	beq.n	8006030 <_ZN16XFTimeoutManager14removeTimeoutsEiP11IXFReactive+0xfc>
    {
        pTimeout = *i;
 8005f84:	f107 0318 	add.w	r3, r7, #24
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f000 f8fd 	bl	8006188 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	647b      	str	r3, [r7, #68]	; 0x44

        // Check if behavior and timeout id are equal
        if (*pTimeout == timeout)
 8005f94:	f107 031c 	add.w	r3, r7, #28
 8005f98:	4619      	mov	r1, r3
 8005f9a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8005f9c:	f7ff fd1a 	bl	80059d4 <_ZNK9XFTimeouteqERKS_>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d03d      	beq.n	8006022 <_ZN16XFTimeoutManager14removeTimeoutsEiP11IXFReactive+0xee>
        {
            TimeoutList::iterator next = i;
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	617b      	str	r3, [r7, #20]

            // Check if remaining ticks can be given further
            if (++next != _timeouts.end())
 8005faa:	f107 0314 	add.w	r3, r7, #20
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f000 f98f 	bl	80062d2 <_ZNSt14_List_iteratorIP9XFTimeoutEppEv>
 8005fb4:	4604      	mov	r4, r0
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	3308      	adds	r3, #8
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f000 f902 	bl	80061c4 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fc4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005fc8:	4619      	mov	r1, r3
 8005fca:	4620      	mov	r0, r4
 8005fcc:	f000 f90a 	bl	80061e4 <_ZStneRKSt14_List_iteratorIP9XFTimeoutES4_>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d00b      	beq.n	8005fee <_ZN16XFTimeoutManager14removeTimeoutsEiP11IXFReactive+0xba>
            {
                // Add (remaining) ticks to next timeout in list
                (*next)->_relTicks += pTimeout->_relTicks;
 8005fd6:	f107 0314 	add.w	r3, r7, #20
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f000 f8d4 	bl	8006188 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	6999      	ldr	r1, [r3, #24]
 8005fe6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fe8:	6992      	ldr	r2, [r2, #24]
 8005fea:	440a      	add	r2, r1
 8005fec:	619a      	str	r2, [r3, #24]
            }

            i = _timeouts.erase(i);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f103 0408 	add.w	r4, r3, #8
 8005ff4:	f107 0218 	add.w	r2, r7, #24
 8005ff8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005ffc:	4611      	mov	r1, r2
 8005ffe:	4618      	mov	r0, r3
 8006000:	f000 f904 	bl	800620c <_ZNSt20_List_const_iteratorIP9XFTimeoutEC1ERKSt14_List_iteratorIS1_E>
 8006004:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006006:	4620      	mov	r0, r4
 8006008:	f000 f910 	bl	800622c <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5eraseESt20_List_const_iteratorIS2_E>
 800600c:	4603      	mov	r3, r0
 800600e:	61bb      	str	r3, [r7, #24]

            delete pTimeout;
 8006010:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006012:	2b00      	cmp	r3, #0
 8006014:	d0a4      	beq.n	8005f60 <_ZN16XFTimeoutManager14removeTimeoutsEiP11IXFReactive+0x2c>
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	3204      	adds	r2, #4
 800601a:	6812      	ldr	r2, [r2, #0]
 800601c:	4618      	mov	r0, r3
 800601e:	4790      	blx	r2
 8006020:	e79e      	b.n	8005f60 <_ZN16XFTimeoutManager14removeTimeoutsEiP11IXFReactive+0x2c>
        }
        else
        {
            i++;
 8006022:	f107 0318 	add.w	r3, r7, #24
 8006026:	2100      	movs	r1, #0
 8006028:	4618      	mov	r0, r3
 800602a:	f000 f899 	bl	8006160 <_ZNSt14_List_iteratorIP9XFTimeoutEppEi>
    for (TimeoutList::iterator i = _timeouts.begin();
 800602e:	e797      	b.n	8005f60 <_ZN16XFTimeoutManager14removeTimeoutsEiP11IXFReactive+0x2c>
        }
    }

    exitCritical();
 8006030:	f7fd ffb2 	bl	8003f98 <exitCritical>
    const XFTimeout timeout(timeoutId, 0, pReactive);
 8006034:	f107 031c 	add.w	r3, r7, #28
 8006038:	4618      	mov	r0, r3
 800603a:	f7ff fca9 	bl	8005990 <_ZN9XFTimeoutD1Ev>
}
 800603e:	bf00      	nop
 8006040:	374c      	adds	r7, #76	; 0x4c
 8006042:	46bd      	mov	sp, r7
 8006044:	bd90      	pop	{r4, r7, pc}

08006046 <_ZN16XFTimeoutManager13returnTimeoutEP9XFTimeout>:
/**
 * Returns the timeout back to the queue of the thread executing
 * the behavioral instance.
 */
void XFTimeoutManager::returnTimeout(XFTimeout * pTimeout)
{
 8006046:	b580      	push	{r7, lr}
 8006048:	b082      	sub	sp, #8
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
 800604e:	6039      	str	r1, [r7, #0]
    pTimeout->getBehavior()->pushEvent(pTimeout);
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	4618      	mov	r0, r3
 8006054:	f7fe fb9c 	bl	8004790 <_ZNK8IXFEvent11getBehaviorEv>
 8006058:	4603      	mov	r3, r0
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	320c      	adds	r2, #12
 800605e:	6812      	ldr	r2, [r2, #0]
 8006060:	6839      	ldr	r1, [r7, #0]
 8006062:	4618      	mov	r0, r3
 8006064:	4790      	blx	r2
}
 8006066:	bf00      	nop
 8006068:	3708      	adds	r7, #8
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}

0800606e <_ZN16XFTimeoutManager18startHardwareTimerEi>:
 * in a regular interval given by parameter tickTime
 *
 * \param tickTime Time in milliseconds the hardware timer should call XFTimeoutManager::tick()
 */
void XFTimeoutManager::startHardwareTimer(int tickTime)
{
 800606e:	b480      	push	{r7}
 8006070:	b083      	sub	sp, #12
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
 8006076:	6039      	str	r1, [r7, #0]
    startTimer( tickTime );

#endif /**************************************************************************************************************/


}
 8006078:	bf00      	nop
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE10_List_implC1Ev>:
	_List_impl() _GLIBCXX_NOEXCEPT_IF(
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
	: _Node_alloc_type()
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 f930 	bl	80062f2 <_ZNSaISt10_List_nodeIP9XFTimeoutEEC1Ev>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4618      	mov	r0, r3
 8006096:	f7ff fcbb 	bl	8005a10 <_ZNSt8__detail17_List_node_headerC1Ev>
	{ }
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4618      	mov	r0, r3
 800609e:	3708      	adds	r7, #8
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <_ZNSaISt10_List_nodeIP9XFTimeoutEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 f92c 	bl	800630a <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEED1Ev>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4618      	mov	r0, r3
 80060b6:	3708      	adds	r7, #8
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EED1Ev>:
      ~_List_base() _GLIBCXX_NOEXCEPT
 80060bc:	b580      	push	{r7, lr}
 80060be:	b082      	sub	sp, #8
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
      { _M_clear(); }
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 f92b 	bl	8006320 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4618      	mov	r0, r3
 80060ce:	f7ff fcbf 	bl	8005a50 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE10_List_implD1Ev>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4618      	mov	r0, r3
 80060d6:	3708      	adds	r7, #8
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE5emptyEv>:
      /**
       *  Returns true if the %list is empty.  (Thus begin() would equal
       *  end().)
       */
      _GLIBCXX_NODISCARD bool
      empty() const _GLIBCXX_NOEXCEPT
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	bf0c      	ite	eq
 80060ee:	2301      	moveq	r3, #1
 80060f0:	2300      	movne	r3, #0
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	4618      	mov	r0, r3
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5frontEv>:
      /**
       *  Returns a read/write reference to the data at the first
       *  element of the %list.
       */
      reference
      front() _GLIBCXX_NOEXCEPT
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
      { return *begin(); }
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 f818 	bl	800613e <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 800610e:	4603      	mov	r3, r0
 8006110:	60fb      	str	r3, [r7, #12]
 8006112:	f107 030c 	add.w	r3, r7, #12
 8006116:	4618      	mov	r0, r3
 8006118:	f000 f836 	bl	8006188 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 800611c:	4603      	mov	r3, r0
 800611e:	4618      	mov	r0, r3
 8006120:	3710      	adds	r7, #16
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}

08006126 <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8006126:	b580      	push	{r7, lr}
 8006128:	b082      	sub	sp, #8
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
      { return _M_node_count(); }
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 f91b 	bl	800636a <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE13_M_node_countEv>
 8006134:	4603      	mov	r3, r0
 8006136:	4618      	mov	r0, r3
 8006138:	3708      	adds	r7, #8
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}

0800613e <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800613e:	b580      	push	{r7, lr}
 8006140:	b084      	sub	sp, #16
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_node._M_next); }
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	f107 030c 	add.w	r3, r7, #12
 800614e:	4611      	mov	r1, r2
 8006150:	4618      	mov	r0, r3
 8006152:	f000 f917 	bl	8006384 <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	4618      	mov	r0, r3
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <_ZNSt14_List_iteratorIP9XFTimeoutEppEi>:
      operator++(int) _GLIBCXX_NOEXCEPT
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
	_Self __tmp = *this;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	60fb      	str	r3, [r7, #12]
	_M_node = _M_node->_M_next;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	601a      	str	r2, [r3, #0]
	return __tmp;
 800617a:	68fb      	ldr	r3, [r7, #12]
      }
 800617c:	4618      	mov	r0, r3
 800617e:	3714      	adds	r7, #20
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Node*>(_M_node)->_M_valptr(); }
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4618      	mov	r0, r3
 8006196:	f000 f904 	bl	80063a2 <_ZNSt10_List_nodeIP9XFTimeoutE9_M_valptrEv>
 800619a:	4603      	mov	r3, r0
 800619c:	4618      	mov	r0, r3
 800619e:	3708      	adds	r7, #8
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE9pop_frontEv>:
       *  Note that no data is returned, and if the first element's data
       *  is needed, it should be retrieved before pop_front() is
       *  called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
      { this->_M_erase(begin()); }
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f7ff ffc6 	bl	800613e <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 80061b2:	4603      	mov	r3, r0
 80061b4:	4619      	mov	r1, r3
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 f901 	bl	80063be <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE8_M_eraseESt14_List_iteratorIS2_E>
 80061bc:	bf00      	nop
 80061be:	3708      	adds	r7, #8
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_node); }
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	f107 030c 	add.w	r3, r7, #12
 80061d2:	4611      	mov	r1, r2
 80061d4:	4618      	mov	r0, r3
 80061d6:	f000 f8d5 	bl	8006384 <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	4618      	mov	r0, r3
 80061de:	3710      	adds	r7, #16
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <_ZStneRKSt14_List_iteratorIP9XFTimeoutES4_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	bf14      	ite	ne
 80061fa:	2301      	movne	r3, #1
 80061fc:	2300      	moveq	r3, #0
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	4618      	mov	r0, r3
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <_ZNSt20_List_const_iteratorIP9XFTimeoutEC1ERKSt14_List_iteratorIS1_E>:
      _List_const_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
      : _M_node(__x._M_node) { }
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	601a      	str	r2, [r3, #0]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4618      	mov	r0, r3
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5eraseESt20_List_const_iteratorIS2_E>:
      }
#endif

  template<typename _Tp, typename _Alloc>
    typename list<_Tp, _Alloc>::iterator
    list<_Tp, _Alloc>::
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
    erase(const_iterator __position) noexcept
#else
    erase(iterator __position)
#endif
    {
      iterator __ret = iterator(__position._M_node->_M_next);
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	f107 030c 	add.w	r3, r7, #12
 800623e:	4611      	mov	r1, r2
 8006240:	4618      	mov	r0, r3
 8006242:	f000 f89f 	bl	8006384 <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>
      _M_erase(__position._M_const_cast());
 8006246:	463b      	mov	r3, r7
 8006248:	4618      	mov	r0, r3
 800624a:	f000 f8de 	bl	800640a <_ZNKSt20_List_const_iteratorIP9XFTimeoutE13_M_const_castEv>
 800624e:	4603      	mov	r3, r0
 8006250:	4619      	mov	r1, r3
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 f8b3 	bl	80063be <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE8_M_eraseESt14_List_iteratorIS2_E>
      return __ret;
 8006258:	68fb      	ldr	r3, [r7, #12]
    }
 800625a:	4618      	mov	r0, r3
 800625c:	3710      	adds	r7, #16
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE10push_frontERKS2_>:
      push_front(const value_type& __x)
 8006262:	b580      	push	{r7, lr}
 8006264:	b082      	sub	sp, #8
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
 800626a:	6039      	str	r1, [r7, #0]
      { this->_M_insert(begin(), __x); }
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f7ff ff66 	bl	800613e <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 8006272:	4603      	mov	r3, r0
 8006274:	683a      	ldr	r2, [r7, #0]
 8006276:	4619      	mov	r1, r3
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 f8d7 	bl	800642c <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE9_M_insertIJRKS2_EEEvSt14_List_iteratorIS2_EDpOT_>
 800627e:	bf00      	nop
 8006280:	3708      	adds	r7, #8
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}

08006286 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE6insertESt20_List_const_iteratorIS2_ERKS2_>:
    list<_Tp, _Alloc>::
 8006286:	b590      	push	{r4, r7, lr}
 8006288:	b087      	sub	sp, #28
 800628a:	af00      	add	r7, sp, #0
 800628c:	60f8      	str	r0, [r7, #12]
 800628e:	60b9      	str	r1, [r7, #8]
 8006290:	607a      	str	r2, [r7, #4]
      _Node* __tmp = _M_create_node(__x);
 8006292:	6879      	ldr	r1, [r7, #4]
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	f000 f8e7 	bl	8006468 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE14_M_create_nodeIJRKS2_EEEPSt10_List_nodeIS2_EDpOT_>
 800629a:	6178      	str	r0, [r7, #20]
      __tmp->_M_hook(__position._M_const_cast()._M_node);
 800629c:	697c      	ldr	r4, [r7, #20]
 800629e:	f107 0308 	add.w	r3, r7, #8
 80062a2:	4618      	mov	r0, r3
 80062a4:	f000 f8b1 	bl	800640a <_ZNKSt20_List_const_iteratorIP9XFTimeoutE13_M_const_castEv>
 80062a8:	4603      	mov	r3, r0
 80062aa:	4619      	mov	r1, r3
 80062ac:	4620      	mov	r0, r4
 80062ae:	f000 fa9c 	bl	80067ea <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      this->_M_inc_size(1);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2101      	movs	r1, #1
 80062b6:	4618      	mov	r0, r3
 80062b8:	f000 f90a 	bl	80064d0 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_inc_sizeEj>
      return iterator(__tmp);
 80062bc:	f107 0310 	add.w	r3, r7, #16
 80062c0:	6979      	ldr	r1, [r7, #20]
 80062c2:	4618      	mov	r0, r3
 80062c4:	f000 f85e 	bl	8006384 <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>
 80062c8:	693b      	ldr	r3, [r7, #16]
    }
 80062ca:	4618      	mov	r0, r3
 80062cc:	371c      	adds	r7, #28
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd90      	pop	{r4, r7, pc}

080062d2 <_ZNSt14_List_iteratorIP9XFTimeoutEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80062d2:	b480      	push	{r7}
 80062d4:	b083      	sub	sp, #12
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
	_M_node = _M_node->_M_next;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	601a      	str	r2, [r3, #0]
	return *this;
 80062e4:	687b      	ldr	r3, [r7, #4]
      }
 80062e6:	4618      	mov	r0, r3
 80062e8:	370c      	adds	r7, #12
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr

080062f2 <_ZNSaISt10_List_nodeIP9XFTimeoutEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b082      	sub	sp, #8
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 f8f9 	bl	80064f2 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEEC1Ev>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4618      	mov	r0, r3
 8006304:	3708      	adds	r7, #8
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}

0800630a <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800630a:	b480      	push	{r7}
 800630c:	b083      	sub	sp, #12
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4618      	mov	r0, r3
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv>:
    _List_base<_Tp, _Alloc>::
 8006320:	b580      	push	{r7, lr}
 8006322:	b086      	sub	sp, #24
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	617b      	str	r3, [r7, #20]
      while (__cur != &_M_impl._M_node)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	697a      	ldr	r2, [r7, #20]
 8006332:	429a      	cmp	r2, r3
 8006334:	d015      	beq.n	8006362 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv+0x42>
	  _Node* __tmp = static_cast<_Node*>(__cur);
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	613b      	str	r3, [r7, #16]
	  __cur = __tmp->_M_next;
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	617b      	str	r3, [r7, #20]
	  _Tp* __val = __tmp->_M_valptr();
 8006340:	6938      	ldr	r0, [r7, #16]
 8006342:	f000 f82e 	bl	80063a2 <_ZNSt10_List_nodeIP9XFTimeoutE9_M_valptrEv>
 8006346:	60f8      	str	r0, [r7, #12]
	  _Node_alloc_traits::destroy(_M_get_Node_allocator(), __val);
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 f8dd 	bl	8006508 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE21_M_get_Node_allocatorEv>
 800634e:	4603      	mov	r3, r0
 8006350:	68f9      	ldr	r1, [r7, #12]
 8006352:	4618      	mov	r0, r3
 8006354:	f000 f8e3 	bl	800651e <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE7destroyIS2_EEvRS4_PT_>
	  _M_put_node(__tmp);
 8006358:	6939      	ldr	r1, [r7, #16]
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 f8ec 	bl	8006538 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_put_nodeEPSt10_List_nodeIS2_E>
      while (__cur != &_M_impl._M_node)
 8006360:	e7e5      	b.n	800632e <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv+0xe>
    }
 8006362:	bf00      	nop
 8006364:	3718      	adds	r7, #24
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}

0800636a <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE13_M_node_countEv>:
      _M_node_count() const
 800636a:	b580      	push	{r7, lr}
 800636c:	b082      	sub	sp, #8
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
      { return this->_M_get_size(); }
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4618      	mov	r0, r3
 8006376:	f000 f8ee 	bl	8006556 <_ZNKSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_get_sizeEv>
 800637a:	4603      	mov	r3, r0
 800637c:	4618      	mov	r0, r3
 800637e:	3708      	adds	r7, #8
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>:
      _List_iterator(__detail::_List_node_base* __x) _GLIBCXX_NOEXCEPT
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	683a      	ldr	r2, [r7, #0]
 8006392:	601a      	str	r2, [r3, #0]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4618      	mov	r0, r3
 8006398:	370c      	adds	r7, #12
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr

080063a2 <_ZNSt10_List_nodeIP9XFTimeoutE9_M_valptrEv>:
      _Tp*       _M_valptr()       { return _M_storage._M_ptr(); }
 80063a2:	b580      	push	{r7, lr}
 80063a4:	b082      	sub	sp, #8
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	3308      	adds	r3, #8
 80063ae:	4618      	mov	r0, r3
 80063b0:	f000 f8dd 	bl	800656e <_ZN9__gnu_cxx16__aligned_membufIP9XFTimeoutE6_M_ptrEv>
 80063b4:	4603      	mov	r3, r0
 80063b6:	4618      	mov	r0, r3
 80063b8:	3708      	adds	r7, #8
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}

080063be <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE8_M_eraseESt14_List_iteratorIS2_E>:
       }
#endif

      // Erases element at position given.
      void
      _M_erase(iterator __position) _GLIBCXX_NOEXCEPT
 80063be:	b590      	push	{r4, r7, lr}
 80063c0:	b085      	sub	sp, #20
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
 80063c6:	6039      	str	r1, [r7, #0]
      {
	this->_M_dec_size(1);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2101      	movs	r1, #1
 80063cc:	4618      	mov	r0, r3
 80063ce:	f000 f8da 	bl	8006586 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_dec_sizeEj>
	__position._M_node->_M_unhook();
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	4618      	mov	r0, r3
 80063d6:	f000 fa0f 	bl	80067f8 <_ZNSt8__detail15_List_node_base9_M_unhookEv>
	_Node* __n = static_cast<_Node*>(__position._M_node);
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	60fb      	str	r3, [r7, #12]
#if __cplusplus >= 201103L
	_Node_alloc_traits::destroy(_M_get_Node_allocator(), __n->_M_valptr());
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4618      	mov	r0, r3
 80063e2:	f000 f891 	bl	8006508 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE21_M_get_Node_allocatorEv>
 80063e6:	4604      	mov	r4, r0
 80063e8:	68f8      	ldr	r0, [r7, #12]
 80063ea:	f7ff ffda 	bl	80063a2 <_ZNSt10_List_nodeIP9XFTimeoutE9_M_valptrEv>
 80063ee:	4603      	mov	r3, r0
 80063f0:	4619      	mov	r1, r3
 80063f2:	4620      	mov	r0, r4
 80063f4:	f000 f893 	bl	800651e <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE7destroyIS2_EEvRS4_PT_>
#else
	_Tp_alloc_type(_M_get_Node_allocator()).destroy(__n->_M_valptr());
#endif

	_M_put_node(__n);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	68f9      	ldr	r1, [r7, #12]
 80063fc:	4618      	mov	r0, r3
 80063fe:	f000 f89b 	bl	8006538 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_put_nodeEPSt10_List_nodeIS2_E>
      }
 8006402:	bf00      	nop
 8006404:	3714      	adds	r7, #20
 8006406:	46bd      	mov	sp, r7
 8006408:	bd90      	pop	{r4, r7, pc}

0800640a <_ZNKSt20_List_const_iteratorIP9XFTimeoutE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 800640a:	b580      	push	{r7, lr}
 800640c:	b084      	sub	sp, #16
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<__detail::_List_node_base*>(_M_node)); }
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	f107 030c 	add.w	r3, r7, #12
 800641a:	4611      	mov	r1, r2
 800641c:	4618      	mov	r0, r3
 800641e:	f7ff ffb1 	bl	8006384 <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	4618      	mov	r0, r3
 8006426:	3710      	adds	r7, #16
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE9_M_insertIJRKS2_EEEvSt14_List_iteratorIS2_EDpOT_>:
       _M_insert(iterator __position, _Args&&... __args)
 800642c:	b580      	push	{r7, lr}
 800642e:	b086      	sub	sp, #24
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	607a      	str	r2, [r7, #4]
	 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 f8b5 	bl	80065a8 <_ZSt7forwardIRKP9XFTimeoutEOT_RNSt16remove_referenceIS4_E4typeE>
 800643e:	4603      	mov	r3, r0
 8006440:	4619      	mov	r1, r3
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f000 f810 	bl	8006468 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE14_M_create_nodeIJRKS2_EEEPSt10_List_nodeIS2_EDpOT_>
 8006448:	6178      	str	r0, [r7, #20]
	 __tmp->_M_hook(__position._M_node);
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	68ba      	ldr	r2, [r7, #8]
 800644e:	4611      	mov	r1, r2
 8006450:	4618      	mov	r0, r3
 8006452:	f000 f9ca 	bl	80067ea <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
	 this->_M_inc_size(1);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2101      	movs	r1, #1
 800645a:	4618      	mov	r0, r3
 800645c:	f000 f838 	bl	80064d0 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_inc_sizeEj>
       }
 8006460:	bf00      	nop
 8006462:	3718      	adds	r7, #24
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE14_M_create_nodeIJRKS2_EEEPSt10_List_nodeIS2_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8006468:	b590      	push	{r4, r7, lr}
 800646a:	b087      	sub	sp, #28
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
	  auto __p = this->_M_get_node();
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4618      	mov	r0, r3
 8006476:	f000 f8a2 	bl	80065be <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_get_nodeEv>
 800647a:	6178      	str	r0, [r7, #20]
	  auto& __alloc = _M_get_Node_allocator();
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4618      	mov	r0, r3
 8006480:	f000 f842 	bl	8006508 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE21_M_get_Node_allocatorEv>
 8006484:	6138      	str	r0, [r7, #16]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 8006486:	f107 0308 	add.w	r3, r7, #8
 800648a:	697a      	ldr	r2, [r7, #20]
 800648c:	6939      	ldr	r1, [r7, #16]
 800648e:	4618      	mov	r0, r3
 8006490:	f000 f8a3 	bl	80065da <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEEC1ERS4_PS3_>
	  _Node_alloc_traits::construct(__alloc, __p->_M_valptr(),
 8006494:	6978      	ldr	r0, [r7, #20]
 8006496:	f7ff ff84 	bl	80063a2 <_ZNSt10_List_nodeIP9XFTimeoutE9_M_valptrEv>
 800649a:	4604      	mov	r4, r0
 800649c:	6838      	ldr	r0, [r7, #0]
 800649e:	f000 f883 	bl	80065a8 <_ZSt7forwardIRKP9XFTimeoutEOT_RNSt16remove_referenceIS4_E4typeE>
 80064a2:	4603      	mov	r3, r0
 80064a4:	461a      	mov	r2, r3
 80064a6:	4621      	mov	r1, r4
 80064a8:	6938      	ldr	r0, [r7, #16]
 80064aa:	f000 f8bf 	bl	800662c <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE9constructIS2_JRKS2_EEEvRS4_PT_DpOT0_>
	  __guard = nullptr;
 80064ae:	f107 0308 	add.w	r3, r7, #8
 80064b2:	2100      	movs	r1, #0
 80064b4:	4618      	mov	r0, r3
 80064b6:	f000 f8cc 	bl	8006652 <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEEaSEDn>
	  return __p;
 80064ba:	697c      	ldr	r4, [r7, #20]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 80064bc:	f107 0308 	add.w	r3, r7, #8
 80064c0:	4618      	mov	r0, r3
 80064c2:	f000 f89e 	bl	8006602 <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEED1Ev>
	  return __p;
 80064c6:	4623      	mov	r3, r4
	}
 80064c8:	4618      	mov	r0, r3
 80064ca:	371c      	adds	r7, #28
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd90      	pop	{r4, r7, pc}

080064d0 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_inc_sizeEj>:
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 80064d0:	b480      	push	{r7}
 80064d2:	b083      	sub	sp, #12
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	689a      	ldr	r2, [r3, #8]
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	441a      	add	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	609a      	str	r2, [r3, #8]
 80064e6:	bf00      	nop
 80064e8:	370c      	adds	r7, #12
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr

080064f2 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80064f2:	b480      	push	{r7}
 80064f4:	b083      	sub	sp, #12
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4618      	mov	r0, r3
 80064fe:	370c      	adds	r7, #12
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
      { return _M_impl; }
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4618      	mov	r0, r3
 8006514:	370c      	adds	r7, #12
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr

0800651e <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE7destroyIS2_EEvRS4_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800651e:	b580      	push	{r7, lr}
 8006520:	b082      	sub	sp, #8
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
 8006526:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8006528:	6839      	ldr	r1, [r7, #0]
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f8a0 	bl	8006670 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE7destroyIS3_EEvPT_>
	}
 8006530:	bf00      	nop
 8006532:	3708      	adds	r7, #8
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_put_nodeEPSt10_List_nodeIS2_E>:
      _M_put_node(typename _Node_alloc_traits::pointer __p) _GLIBCXX_NOEXCEPT
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
      { _Node_alloc_traits::deallocate(_M_impl, __p, 1); }
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2201      	movs	r2, #1
 8006546:	6839      	ldr	r1, [r7, #0]
 8006548:	4618      	mov	r0, r3
 800654a:	f000 f89c 	bl	8006686 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE10deallocateERS4_PS3_j>
 800654e:	bf00      	nop
 8006550:	3708      	adds	r7, #8
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}

08006556 <_ZNKSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_get_sizeEv>:
      size_t _M_get_size() const { return _M_impl._M_node._M_size; }
 8006556:	b480      	push	{r7}
 8006558:	b083      	sub	sp, #12
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	4618      	mov	r0, r3
 8006564:	370c      	adds	r7, #12
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr

0800656e <_ZN9__gnu_cxx16__aligned_membufIP9XFTimeoutE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 800656e:	b580      	push	{r7, lr}
 8006570:	b082      	sub	sp, #8
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 f894 	bl	80066a4 <_ZN9__gnu_cxx16__aligned_membufIP9XFTimeoutE7_M_addrEv>
 800657c:	4603      	mov	r3, r0
 800657e:	4618      	mov	r0, r3
 8006580:	3708      	adds	r7, #8
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_dec_sizeEj>:
      void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
 8006586:	b480      	push	{r7}
 8006588:	b083      	sub	sp, #12
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
 800658e:	6039      	str	r1, [r7, #0]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	689a      	ldr	r2, [r3, #8]
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	1ad2      	subs	r2, r2, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	609a      	str	r2, [r3, #8]
 800659c:	bf00      	nop
 800659e:	370c      	adds	r7, #12
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <_ZSt7forwardIRKP9XFTimeoutEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4618      	mov	r0, r3
 80065b4:	370c      	adds	r7, #12
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr

080065be <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_get_nodeEv>:
      _M_get_node()
 80065be:	b580      	push	{r7, lr}
 80065c0:	b082      	sub	sp, #8
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
      { return _Node_alloc_traits::allocate(_M_impl, 1); }
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2101      	movs	r1, #1
 80065ca:	4618      	mov	r0, r3
 80065cc:	f000 f875 	bl	80066ba <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE8allocateERS4_j>
 80065d0:	4603      	mov	r3, r0
 80065d2:	4618      	mov	r0, r3
 80065d4:	3708      	adds	r7, #8
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}

080065da <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEEC1ERS4_PS3_>:
    {
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 80065da:	b580      	push	{r7, lr}
 80065dc:	b084      	sub	sp, #16
 80065de:	af00      	add	r7, sp, #0
 80065e0:	60f8      	str	r0, [r7, #12]
 80065e2:	60b9      	str	r1, [r7, #8]
 80065e4:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 80065e6:	68b8      	ldr	r0, [r7, #8]
 80065e8:	f000 f876 	bl	80066d8 <_ZSt11__addressofISaISt10_List_nodeIP9XFTimeoutEEEPT_RS5_>
 80065ec:	4602      	mov	r2, r0
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	601a      	str	r2, [r3, #0]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	605a      	str	r2, [r3, #4]
      { }
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	4618      	mov	r0, r3
 80065fc:	3710      	adds	r7, #16
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}

08006602 <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
 8006602:	b580      	push	{r7, lr}
 8006604:	b082      	sub	sp, #8
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
      {
	if (_M_ptr != nullptr)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d007      	beq.n	8006622 <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6818      	ldr	r0, [r3, #0]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	4619      	mov	r1, r3
 800661e:	f000 f832 	bl	8006686 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE10deallocateERS4_PS3_j>
      }
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4618      	mov	r0, r3
 8006626:	3708      	adds	r7, #8
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE9constructIS2_JRKS2_EEEvRS4_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f7ff ffb5 	bl	80065a8 <_ZSt7forwardIRKP9XFTimeoutEOT_RNSt16remove_referenceIS4_E4typeE>
 800663e:	4603      	mov	r3, r0
 8006640:	461a      	mov	r2, r3
 8006642:	68b9      	ldr	r1, [r7, #8]
 8006644:	68f8      	ldr	r0, [r7, #12]
 8006646:	f000 f852 	bl	80066ee <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE9constructIS3_JRKS3_EEEvPT_DpOT0_>
	}
 800664a:	bf00      	nop
 800664c:	3710      	adds	r7, #16
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}

08006652 <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEEaSEDn>:

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
 8006652:	b480      	push	{r7}
 8006654:	b083      	sub	sp, #12
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
 800665a:	6039      	str	r1, [r7, #0]
      {
	_M_ptr = nullptr;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	605a      	str	r2, [r3, #4]
	return *this;
 8006662:	687b      	ldr	r3, [r7, #4]
      }
 8006664:	4618      	mov	r0, r3
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE7destroyIS3_EEvPT_>:
	destroy(_Up* __p)
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 800667a:	bf00      	nop
 800667c:	370c      	adds	r7, #12
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr

08006686 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE10deallocateERS4_PS3_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8006686:	b580      	push	{r7, lr}
 8006688:	b084      	sub	sp, #16
 800668a:	af00      	add	r7, sp, #0
 800668c:	60f8      	str	r0, [r7, #12]
 800668e:	60b9      	str	r1, [r7, #8]
 8006690:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	68b9      	ldr	r1, [r7, #8]
 8006696:	68f8      	ldr	r0, [r7, #12]
 8006698:	f000 f83f 	bl	800671a <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE10deallocateEPS4_j>
 800669c:	bf00      	nop
 800669e:	3710      	adds	r7, #16
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <_ZN9__gnu_cxx16__aligned_membufIP9XFTimeoutE7_M_addrEv>:
      _M_addr() noexcept
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4618      	mov	r0, r3
 80066b0:	370c      	adds	r7, #12
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr

080066ba <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE8allocateERS4_j>:
      allocate(allocator_type& __a, size_type __n)
 80066ba:	b580      	push	{r7, lr}
 80066bc:	b082      	sub	sp, #8
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
 80066c2:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80066c4:	2200      	movs	r2, #0
 80066c6:	6839      	ldr	r1, [r7, #0]
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f000 f839 	bl	8006740 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8allocateEjPKv>
 80066ce:	4603      	mov	r3, r0
 80066d0:	4618      	mov	r0, r3
 80066d2:	3708      	adds	r7, #8
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <_ZSt11__addressofISaISt10_List_nodeIP9XFTimeoutEEEPT_RS5_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4618      	mov	r0, r3
 80066e4:	370c      	adds	r7, #12
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr

080066ee <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE9constructIS3_JRKS3_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80066ee:	b590      	push	{r4, r7, lr}
 80066f0:	b085      	sub	sp, #20
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	60f8      	str	r0, [r7, #12]
 80066f6:	60b9      	str	r1, [r7, #8]
 80066f8:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f7ff ff54 	bl	80065a8 <_ZSt7forwardIRKP9XFTimeoutEOT_RNSt16remove_referenceIS4_E4typeE>
 8006700:	4603      	mov	r3, r0
 8006702:	681c      	ldr	r4, [r3, #0]
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	4619      	mov	r1, r3
 8006708:	2004      	movs	r0, #4
 800670a:	f7fe f861 	bl	80047d0 <_ZnwjPv>
 800670e:	4603      	mov	r3, r0
 8006710:	601c      	str	r4, [r3, #0]
 8006712:	bf00      	nop
 8006714:	3714      	adds	r7, #20
 8006716:	46bd      	mov	sp, r7
 8006718:	bd90      	pop	{r4, r7, pc}

0800671a <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE10deallocateEPS4_j>:
      deallocate(_Tp* __p, size_type __t)
 800671a:	b580      	push	{r7, lr}
 800671c:	b084      	sub	sp, #16
 800671e:	af00      	add	r7, sp, #0
 8006720:	60f8      	str	r0, [r7, #12]
 8006722:	60b9      	str	r1, [r7, #8]
 8006724:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	4613      	mov	r3, r2
 800672a:	005b      	lsls	r3, r3, #1
 800672c:	4413      	add	r3, r2
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	4619      	mov	r1, r3
 8006732:	68b8      	ldr	r0, [r7, #8]
 8006734:	f000 f834 	bl	80067a0 <_ZdlPvj>
      }
 8006738:	bf00      	nop
 800673a:	3710      	adds	r7, #16
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800674c:	68f8      	ldr	r0, [r7, #12]
 800674e:	f000 f819 	bl	8006784 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE11_M_max_sizeEv>
 8006752:	4602      	mov	r2, r0
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	4293      	cmp	r3, r2
 8006758:	bf8c      	ite	hi
 800675a:	2301      	movhi	r3, #1
 800675c:	2300      	movls	r3, #0
 800675e:	b2db      	uxtb	r3, r3
 8006760:	2b00      	cmp	r3, #0
 8006762:	d001      	beq.n	8006768 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8006764:	f000 f84d 	bl	8006802 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006768:	68ba      	ldr	r2, [r7, #8]
 800676a:	4613      	mov	r3, r2
 800676c:	005b      	lsls	r3, r3, #1
 800676e:	4413      	add	r3, r2
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	4618      	mov	r0, r3
 8006774:	f000 f825 	bl	80067c2 <_Znwj>
 8006778:	4603      	mov	r3, r0
      }
 800677a:	4618      	mov	r0, r3
 800677c:	3710      	adds	r7, #16
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
	...

08006784 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800678c:	4b03      	ldr	r3, [pc, #12]	; (800679c <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE11_M_max_sizeEv+0x18>)
      }
 800678e:	4618      	mov	r0, r3
 8006790:	370c      	adds	r7, #12
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	0aaaaaaa 	.word	0x0aaaaaaa

080067a0 <_ZdlPvj>:
 80067a0:	f000 b835 	b.w	800680e <_ZdlPv>

080067a4 <__cxa_guard_acquire>:
 80067a4:	6803      	ldr	r3, [r0, #0]
 80067a6:	07db      	lsls	r3, r3, #31
 80067a8:	d406      	bmi.n	80067b8 <__cxa_guard_acquire+0x14>
 80067aa:	7843      	ldrb	r3, [r0, #1]
 80067ac:	b103      	cbz	r3, 80067b0 <__cxa_guard_acquire+0xc>
 80067ae:	deff      	udf	#255	; 0xff
 80067b0:	2301      	movs	r3, #1
 80067b2:	7043      	strb	r3, [r0, #1]
 80067b4:	4618      	mov	r0, r3
 80067b6:	4770      	bx	lr
 80067b8:	2000      	movs	r0, #0
 80067ba:	4770      	bx	lr

080067bc <__cxa_guard_release>:
 80067bc:	2301      	movs	r3, #1
 80067be:	6003      	str	r3, [r0, #0]
 80067c0:	4770      	bx	lr

080067c2 <_Znwj>:
 80067c2:	2801      	cmp	r0, #1
 80067c4:	bf38      	it	cc
 80067c6:	2001      	movcc	r0, #1
 80067c8:	b510      	push	{r4, lr}
 80067ca:	4604      	mov	r4, r0
 80067cc:	4620      	mov	r0, r4
 80067ce:	f000 f8a3 	bl	8006918 <malloc>
 80067d2:	b930      	cbnz	r0, 80067e2 <_Znwj+0x20>
 80067d4:	f000 f830 	bl	8006838 <_ZSt15get_new_handlerv>
 80067d8:	b908      	cbnz	r0, 80067de <_Znwj+0x1c>
 80067da:	f000 f835 	bl	8006848 <abort>
 80067de:	4780      	blx	r0
 80067e0:	e7f4      	b.n	80067cc <_Znwj+0xa>
 80067e2:	bd10      	pop	{r4, pc}

080067e4 <__cxa_pure_virtual>:
 80067e4:	b508      	push	{r3, lr}
 80067e6:	f000 f821 	bl	800682c <_ZSt9terminatev>

080067ea <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>:
 80067ea:	684b      	ldr	r3, [r1, #4]
 80067ec:	6043      	str	r3, [r0, #4]
 80067ee:	684b      	ldr	r3, [r1, #4]
 80067f0:	6001      	str	r1, [r0, #0]
 80067f2:	6018      	str	r0, [r3, #0]
 80067f4:	6048      	str	r0, [r1, #4]
 80067f6:	4770      	bx	lr

080067f8 <_ZNSt8__detail15_List_node_base9_M_unhookEv>:
 80067f8:	e9d0 3200 	ldrd	r3, r2, [r0]
 80067fc:	6013      	str	r3, [r2, #0]
 80067fe:	605a      	str	r2, [r3, #4]
 8006800:	4770      	bx	lr

08006802 <_ZSt17__throw_bad_allocv>:
 8006802:	b508      	push	{r3, lr}
 8006804:	f000 f820 	bl	8006848 <abort>

08006808 <_ZSt20__throw_length_errorPKc>:
 8006808:	b508      	push	{r3, lr}
 800680a:	f000 f81d 	bl	8006848 <abort>

0800680e <_ZdlPv>:
 800680e:	f000 b88b 	b.w	8006928 <free>

08006812 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8006812:	b508      	push	{r3, lr}
 8006814:	4780      	blx	r0
 8006816:	f000 f817 	bl	8006848 <abort>
	...

0800681c <_ZSt13get_terminatev>:
 800681c:	4b02      	ldr	r3, [pc, #8]	; (8006828 <_ZSt13get_terminatev+0xc>)
 800681e:	6818      	ldr	r0, [r3, #0]
 8006820:	f3bf 8f5b 	dmb	ish
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	20000010 	.word	0x20000010

0800682c <_ZSt9terminatev>:
 800682c:	b508      	push	{r3, lr}
 800682e:	f7ff fff5 	bl	800681c <_ZSt13get_terminatev>
 8006832:	f7ff ffee 	bl	8006812 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08006838 <_ZSt15get_new_handlerv>:
 8006838:	4b02      	ldr	r3, [pc, #8]	; (8006844 <_ZSt15get_new_handlerv+0xc>)
 800683a:	6818      	ldr	r0, [r3, #0]
 800683c:	f3bf 8f5b 	dmb	ish
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	20000348 	.word	0x20000348

08006848 <abort>:
 8006848:	b508      	push	{r3, lr}
 800684a:	2006      	movs	r0, #6
 800684c:	f000 fcaa 	bl	80071a4 <raise>
 8006850:	2001      	movs	r0, #1
 8006852:	f7fa f86f 	bl	8000934 <_exit>
	...

08006858 <__assert_func>:
 8006858:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800685a:	4614      	mov	r4, r2
 800685c:	461a      	mov	r2, r3
 800685e:	4b09      	ldr	r3, [pc, #36]	; (8006884 <__assert_func+0x2c>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4605      	mov	r5, r0
 8006864:	68d8      	ldr	r0, [r3, #12]
 8006866:	b14c      	cbz	r4, 800687c <__assert_func+0x24>
 8006868:	4b07      	ldr	r3, [pc, #28]	; (8006888 <__assert_func+0x30>)
 800686a:	9100      	str	r1, [sp, #0]
 800686c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006870:	4906      	ldr	r1, [pc, #24]	; (800688c <__assert_func+0x34>)
 8006872:	462b      	mov	r3, r5
 8006874:	f000 f81a 	bl	80068ac <fiprintf>
 8006878:	f7ff ffe6 	bl	8006848 <abort>
 800687c:	4b04      	ldr	r3, [pc, #16]	; (8006890 <__assert_func+0x38>)
 800687e:	461c      	mov	r4, r3
 8006880:	e7f3      	b.n	800686a <__assert_func+0x12>
 8006882:	bf00      	nop
 8006884:	20000014 	.word	0x20000014
 8006888:	080083d0 	.word	0x080083d0
 800688c:	080083dd 	.word	0x080083dd
 8006890:	0800840b 	.word	0x0800840b

08006894 <atexit>:
 8006894:	2300      	movs	r3, #0
 8006896:	4601      	mov	r1, r0
 8006898:	461a      	mov	r2, r3
 800689a:	4618      	mov	r0, r3
 800689c:	f000 bd7e 	b.w	800739c <__register_exitproc>

080068a0 <__errno>:
 80068a0:	4b01      	ldr	r3, [pc, #4]	; (80068a8 <__errno+0x8>)
 80068a2:	6818      	ldr	r0, [r3, #0]
 80068a4:	4770      	bx	lr
 80068a6:	bf00      	nop
 80068a8:	20000014 	.word	0x20000014

080068ac <fiprintf>:
 80068ac:	b40e      	push	{r1, r2, r3}
 80068ae:	b503      	push	{r0, r1, lr}
 80068b0:	4601      	mov	r1, r0
 80068b2:	ab03      	add	r3, sp, #12
 80068b4:	4805      	ldr	r0, [pc, #20]	; (80068cc <fiprintf+0x20>)
 80068b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80068ba:	6800      	ldr	r0, [r0, #0]
 80068bc:	9301      	str	r3, [sp, #4]
 80068be:	f000 f975 	bl	8006bac <_vfiprintf_r>
 80068c2:	b002      	add	sp, #8
 80068c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80068c8:	b003      	add	sp, #12
 80068ca:	4770      	bx	lr
 80068cc:	20000014 	.word	0x20000014

080068d0 <__libc_init_array>:
 80068d0:	b570      	push	{r4, r5, r6, lr}
 80068d2:	4d0d      	ldr	r5, [pc, #52]	; (8006908 <__libc_init_array+0x38>)
 80068d4:	4c0d      	ldr	r4, [pc, #52]	; (800690c <__libc_init_array+0x3c>)
 80068d6:	1b64      	subs	r4, r4, r5
 80068d8:	10a4      	asrs	r4, r4, #2
 80068da:	2600      	movs	r6, #0
 80068dc:	42a6      	cmp	r6, r4
 80068de:	d109      	bne.n	80068f4 <__libc_init_array+0x24>
 80068e0:	4d0b      	ldr	r5, [pc, #44]	; (8006910 <__libc_init_array+0x40>)
 80068e2:	4c0c      	ldr	r4, [pc, #48]	; (8006914 <__libc_init_array+0x44>)
 80068e4:	f001 fa26 	bl	8007d34 <_init>
 80068e8:	1b64      	subs	r4, r4, r5
 80068ea:	10a4      	asrs	r4, r4, #2
 80068ec:	2600      	movs	r6, #0
 80068ee:	42a6      	cmp	r6, r4
 80068f0:	d105      	bne.n	80068fe <__libc_init_array+0x2e>
 80068f2:	bd70      	pop	{r4, r5, r6, pc}
 80068f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80068f8:	4798      	blx	r3
 80068fa:	3601      	adds	r6, #1
 80068fc:	e7ee      	b.n	80068dc <__libc_init_array+0xc>
 80068fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006902:	4798      	blx	r3
 8006904:	3601      	adds	r6, #1
 8006906:	e7f2      	b.n	80068ee <__libc_init_array+0x1e>
 8006908:	080084ac 	.word	0x080084ac
 800690c:	080084ac 	.word	0x080084ac
 8006910:	080084ac 	.word	0x080084ac
 8006914:	080084b4 	.word	0x080084b4

08006918 <malloc>:
 8006918:	4b02      	ldr	r3, [pc, #8]	; (8006924 <malloc+0xc>)
 800691a:	4601      	mov	r1, r0
 800691c:	6818      	ldr	r0, [r3, #0]
 800691e:	f000 b8a7 	b.w	8006a70 <_malloc_r>
 8006922:	bf00      	nop
 8006924:	20000014 	.word	0x20000014

08006928 <free>:
 8006928:	4b02      	ldr	r3, [pc, #8]	; (8006934 <free+0xc>)
 800692a:	4601      	mov	r1, r0
 800692c:	6818      	ldr	r0, [r3, #0]
 800692e:	f000 b833 	b.w	8006998 <_free_r>
 8006932:	bf00      	nop
 8006934:	20000014 	.word	0x20000014

08006938 <memcpy>:
 8006938:	440a      	add	r2, r1
 800693a:	4291      	cmp	r1, r2
 800693c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006940:	d100      	bne.n	8006944 <memcpy+0xc>
 8006942:	4770      	bx	lr
 8006944:	b510      	push	{r4, lr}
 8006946:	f811 4b01 	ldrb.w	r4, [r1], #1
 800694a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800694e:	4291      	cmp	r1, r2
 8006950:	d1f9      	bne.n	8006946 <memcpy+0xe>
 8006952:	bd10      	pop	{r4, pc}

08006954 <memmove>:
 8006954:	4288      	cmp	r0, r1
 8006956:	b510      	push	{r4, lr}
 8006958:	eb01 0402 	add.w	r4, r1, r2
 800695c:	d902      	bls.n	8006964 <memmove+0x10>
 800695e:	4284      	cmp	r4, r0
 8006960:	4623      	mov	r3, r4
 8006962:	d807      	bhi.n	8006974 <memmove+0x20>
 8006964:	1e43      	subs	r3, r0, #1
 8006966:	42a1      	cmp	r1, r4
 8006968:	d008      	beq.n	800697c <memmove+0x28>
 800696a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800696e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006972:	e7f8      	b.n	8006966 <memmove+0x12>
 8006974:	4402      	add	r2, r0
 8006976:	4601      	mov	r1, r0
 8006978:	428a      	cmp	r2, r1
 800697a:	d100      	bne.n	800697e <memmove+0x2a>
 800697c:	bd10      	pop	{r4, pc}
 800697e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006982:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006986:	e7f7      	b.n	8006978 <memmove+0x24>

08006988 <memset>:
 8006988:	4402      	add	r2, r0
 800698a:	4603      	mov	r3, r0
 800698c:	4293      	cmp	r3, r2
 800698e:	d100      	bne.n	8006992 <memset+0xa>
 8006990:	4770      	bx	lr
 8006992:	f803 1b01 	strb.w	r1, [r3], #1
 8006996:	e7f9      	b.n	800698c <memset+0x4>

08006998 <_free_r>:
 8006998:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800699a:	2900      	cmp	r1, #0
 800699c:	d044      	beq.n	8006a28 <_free_r+0x90>
 800699e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069a2:	9001      	str	r0, [sp, #4]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f1a1 0404 	sub.w	r4, r1, #4
 80069aa:	bfb8      	it	lt
 80069ac:	18e4      	addlt	r4, r4, r3
 80069ae:	f000 ff77 	bl	80078a0 <__malloc_lock>
 80069b2:	4a1e      	ldr	r2, [pc, #120]	; (8006a2c <_free_r+0x94>)
 80069b4:	9801      	ldr	r0, [sp, #4]
 80069b6:	6813      	ldr	r3, [r2, #0]
 80069b8:	b933      	cbnz	r3, 80069c8 <_free_r+0x30>
 80069ba:	6063      	str	r3, [r4, #4]
 80069bc:	6014      	str	r4, [r2, #0]
 80069be:	b003      	add	sp, #12
 80069c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80069c4:	f000 bf72 	b.w	80078ac <__malloc_unlock>
 80069c8:	42a3      	cmp	r3, r4
 80069ca:	d908      	bls.n	80069de <_free_r+0x46>
 80069cc:	6825      	ldr	r5, [r4, #0]
 80069ce:	1961      	adds	r1, r4, r5
 80069d0:	428b      	cmp	r3, r1
 80069d2:	bf01      	itttt	eq
 80069d4:	6819      	ldreq	r1, [r3, #0]
 80069d6:	685b      	ldreq	r3, [r3, #4]
 80069d8:	1949      	addeq	r1, r1, r5
 80069da:	6021      	streq	r1, [r4, #0]
 80069dc:	e7ed      	b.n	80069ba <_free_r+0x22>
 80069de:	461a      	mov	r2, r3
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	b10b      	cbz	r3, 80069e8 <_free_r+0x50>
 80069e4:	42a3      	cmp	r3, r4
 80069e6:	d9fa      	bls.n	80069de <_free_r+0x46>
 80069e8:	6811      	ldr	r1, [r2, #0]
 80069ea:	1855      	adds	r5, r2, r1
 80069ec:	42a5      	cmp	r5, r4
 80069ee:	d10b      	bne.n	8006a08 <_free_r+0x70>
 80069f0:	6824      	ldr	r4, [r4, #0]
 80069f2:	4421      	add	r1, r4
 80069f4:	1854      	adds	r4, r2, r1
 80069f6:	42a3      	cmp	r3, r4
 80069f8:	6011      	str	r1, [r2, #0]
 80069fa:	d1e0      	bne.n	80069be <_free_r+0x26>
 80069fc:	681c      	ldr	r4, [r3, #0]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	6053      	str	r3, [r2, #4]
 8006a02:	4421      	add	r1, r4
 8006a04:	6011      	str	r1, [r2, #0]
 8006a06:	e7da      	b.n	80069be <_free_r+0x26>
 8006a08:	d902      	bls.n	8006a10 <_free_r+0x78>
 8006a0a:	230c      	movs	r3, #12
 8006a0c:	6003      	str	r3, [r0, #0]
 8006a0e:	e7d6      	b.n	80069be <_free_r+0x26>
 8006a10:	6825      	ldr	r5, [r4, #0]
 8006a12:	1961      	adds	r1, r4, r5
 8006a14:	428b      	cmp	r3, r1
 8006a16:	bf04      	itt	eq
 8006a18:	6819      	ldreq	r1, [r3, #0]
 8006a1a:	685b      	ldreq	r3, [r3, #4]
 8006a1c:	6063      	str	r3, [r4, #4]
 8006a1e:	bf04      	itt	eq
 8006a20:	1949      	addeq	r1, r1, r5
 8006a22:	6021      	streq	r1, [r4, #0]
 8006a24:	6054      	str	r4, [r2, #4]
 8006a26:	e7ca      	b.n	80069be <_free_r+0x26>
 8006a28:	b003      	add	sp, #12
 8006a2a:	bd30      	pop	{r4, r5, pc}
 8006a2c:	2000034c 	.word	0x2000034c

08006a30 <sbrk_aligned>:
 8006a30:	b570      	push	{r4, r5, r6, lr}
 8006a32:	4e0e      	ldr	r6, [pc, #56]	; (8006a6c <sbrk_aligned+0x3c>)
 8006a34:	460c      	mov	r4, r1
 8006a36:	6831      	ldr	r1, [r6, #0]
 8006a38:	4605      	mov	r5, r0
 8006a3a:	b911      	cbnz	r1, 8006a42 <sbrk_aligned+0x12>
 8006a3c:	f000 fb7a 	bl	8007134 <_sbrk_r>
 8006a40:	6030      	str	r0, [r6, #0]
 8006a42:	4621      	mov	r1, r4
 8006a44:	4628      	mov	r0, r5
 8006a46:	f000 fb75 	bl	8007134 <_sbrk_r>
 8006a4a:	1c43      	adds	r3, r0, #1
 8006a4c:	d00a      	beq.n	8006a64 <sbrk_aligned+0x34>
 8006a4e:	1cc4      	adds	r4, r0, #3
 8006a50:	f024 0403 	bic.w	r4, r4, #3
 8006a54:	42a0      	cmp	r0, r4
 8006a56:	d007      	beq.n	8006a68 <sbrk_aligned+0x38>
 8006a58:	1a21      	subs	r1, r4, r0
 8006a5a:	4628      	mov	r0, r5
 8006a5c:	f000 fb6a 	bl	8007134 <_sbrk_r>
 8006a60:	3001      	adds	r0, #1
 8006a62:	d101      	bne.n	8006a68 <sbrk_aligned+0x38>
 8006a64:	f04f 34ff 	mov.w	r4, #4294967295
 8006a68:	4620      	mov	r0, r4
 8006a6a:	bd70      	pop	{r4, r5, r6, pc}
 8006a6c:	20000350 	.word	0x20000350

08006a70 <_malloc_r>:
 8006a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a74:	1ccd      	adds	r5, r1, #3
 8006a76:	f025 0503 	bic.w	r5, r5, #3
 8006a7a:	3508      	adds	r5, #8
 8006a7c:	2d0c      	cmp	r5, #12
 8006a7e:	bf38      	it	cc
 8006a80:	250c      	movcc	r5, #12
 8006a82:	2d00      	cmp	r5, #0
 8006a84:	4607      	mov	r7, r0
 8006a86:	db01      	blt.n	8006a8c <_malloc_r+0x1c>
 8006a88:	42a9      	cmp	r1, r5
 8006a8a:	d905      	bls.n	8006a98 <_malloc_r+0x28>
 8006a8c:	230c      	movs	r3, #12
 8006a8e:	603b      	str	r3, [r7, #0]
 8006a90:	2600      	movs	r6, #0
 8006a92:	4630      	mov	r0, r6
 8006a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a98:	4e2e      	ldr	r6, [pc, #184]	; (8006b54 <_malloc_r+0xe4>)
 8006a9a:	f000 ff01 	bl	80078a0 <__malloc_lock>
 8006a9e:	6833      	ldr	r3, [r6, #0]
 8006aa0:	461c      	mov	r4, r3
 8006aa2:	bb34      	cbnz	r4, 8006af2 <_malloc_r+0x82>
 8006aa4:	4629      	mov	r1, r5
 8006aa6:	4638      	mov	r0, r7
 8006aa8:	f7ff ffc2 	bl	8006a30 <sbrk_aligned>
 8006aac:	1c43      	adds	r3, r0, #1
 8006aae:	4604      	mov	r4, r0
 8006ab0:	d14d      	bne.n	8006b4e <_malloc_r+0xde>
 8006ab2:	6834      	ldr	r4, [r6, #0]
 8006ab4:	4626      	mov	r6, r4
 8006ab6:	2e00      	cmp	r6, #0
 8006ab8:	d140      	bne.n	8006b3c <_malloc_r+0xcc>
 8006aba:	6823      	ldr	r3, [r4, #0]
 8006abc:	4631      	mov	r1, r6
 8006abe:	4638      	mov	r0, r7
 8006ac0:	eb04 0803 	add.w	r8, r4, r3
 8006ac4:	f000 fb36 	bl	8007134 <_sbrk_r>
 8006ac8:	4580      	cmp	r8, r0
 8006aca:	d13a      	bne.n	8006b42 <_malloc_r+0xd2>
 8006acc:	6821      	ldr	r1, [r4, #0]
 8006ace:	3503      	adds	r5, #3
 8006ad0:	1a6d      	subs	r5, r5, r1
 8006ad2:	f025 0503 	bic.w	r5, r5, #3
 8006ad6:	3508      	adds	r5, #8
 8006ad8:	2d0c      	cmp	r5, #12
 8006ada:	bf38      	it	cc
 8006adc:	250c      	movcc	r5, #12
 8006ade:	4629      	mov	r1, r5
 8006ae0:	4638      	mov	r0, r7
 8006ae2:	f7ff ffa5 	bl	8006a30 <sbrk_aligned>
 8006ae6:	3001      	adds	r0, #1
 8006ae8:	d02b      	beq.n	8006b42 <_malloc_r+0xd2>
 8006aea:	6823      	ldr	r3, [r4, #0]
 8006aec:	442b      	add	r3, r5
 8006aee:	6023      	str	r3, [r4, #0]
 8006af0:	e00e      	b.n	8006b10 <_malloc_r+0xa0>
 8006af2:	6822      	ldr	r2, [r4, #0]
 8006af4:	1b52      	subs	r2, r2, r5
 8006af6:	d41e      	bmi.n	8006b36 <_malloc_r+0xc6>
 8006af8:	2a0b      	cmp	r2, #11
 8006afa:	d916      	bls.n	8006b2a <_malloc_r+0xba>
 8006afc:	1961      	adds	r1, r4, r5
 8006afe:	42a3      	cmp	r3, r4
 8006b00:	6025      	str	r5, [r4, #0]
 8006b02:	bf18      	it	ne
 8006b04:	6059      	strne	r1, [r3, #4]
 8006b06:	6863      	ldr	r3, [r4, #4]
 8006b08:	bf08      	it	eq
 8006b0a:	6031      	streq	r1, [r6, #0]
 8006b0c:	5162      	str	r2, [r4, r5]
 8006b0e:	604b      	str	r3, [r1, #4]
 8006b10:	4638      	mov	r0, r7
 8006b12:	f104 060b 	add.w	r6, r4, #11
 8006b16:	f000 fec9 	bl	80078ac <__malloc_unlock>
 8006b1a:	f026 0607 	bic.w	r6, r6, #7
 8006b1e:	1d23      	adds	r3, r4, #4
 8006b20:	1af2      	subs	r2, r6, r3
 8006b22:	d0b6      	beq.n	8006a92 <_malloc_r+0x22>
 8006b24:	1b9b      	subs	r3, r3, r6
 8006b26:	50a3      	str	r3, [r4, r2]
 8006b28:	e7b3      	b.n	8006a92 <_malloc_r+0x22>
 8006b2a:	6862      	ldr	r2, [r4, #4]
 8006b2c:	42a3      	cmp	r3, r4
 8006b2e:	bf0c      	ite	eq
 8006b30:	6032      	streq	r2, [r6, #0]
 8006b32:	605a      	strne	r2, [r3, #4]
 8006b34:	e7ec      	b.n	8006b10 <_malloc_r+0xa0>
 8006b36:	4623      	mov	r3, r4
 8006b38:	6864      	ldr	r4, [r4, #4]
 8006b3a:	e7b2      	b.n	8006aa2 <_malloc_r+0x32>
 8006b3c:	4634      	mov	r4, r6
 8006b3e:	6876      	ldr	r6, [r6, #4]
 8006b40:	e7b9      	b.n	8006ab6 <_malloc_r+0x46>
 8006b42:	230c      	movs	r3, #12
 8006b44:	603b      	str	r3, [r7, #0]
 8006b46:	4638      	mov	r0, r7
 8006b48:	f000 feb0 	bl	80078ac <__malloc_unlock>
 8006b4c:	e7a1      	b.n	8006a92 <_malloc_r+0x22>
 8006b4e:	6025      	str	r5, [r4, #0]
 8006b50:	e7de      	b.n	8006b10 <_malloc_r+0xa0>
 8006b52:	bf00      	nop
 8006b54:	2000034c 	.word	0x2000034c

08006b58 <__sfputc_r>:
 8006b58:	6893      	ldr	r3, [r2, #8]
 8006b5a:	3b01      	subs	r3, #1
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	b410      	push	{r4}
 8006b60:	6093      	str	r3, [r2, #8]
 8006b62:	da08      	bge.n	8006b76 <__sfputc_r+0x1e>
 8006b64:	6994      	ldr	r4, [r2, #24]
 8006b66:	42a3      	cmp	r3, r4
 8006b68:	db01      	blt.n	8006b6e <__sfputc_r+0x16>
 8006b6a:	290a      	cmp	r1, #10
 8006b6c:	d103      	bne.n	8006b76 <__sfputc_r+0x1e>
 8006b6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b72:	f000 bb53 	b.w	800721c <__swbuf_r>
 8006b76:	6813      	ldr	r3, [r2, #0]
 8006b78:	1c58      	adds	r0, r3, #1
 8006b7a:	6010      	str	r0, [r2, #0]
 8006b7c:	7019      	strb	r1, [r3, #0]
 8006b7e:	4608      	mov	r0, r1
 8006b80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b84:	4770      	bx	lr

08006b86 <__sfputs_r>:
 8006b86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b88:	4606      	mov	r6, r0
 8006b8a:	460f      	mov	r7, r1
 8006b8c:	4614      	mov	r4, r2
 8006b8e:	18d5      	adds	r5, r2, r3
 8006b90:	42ac      	cmp	r4, r5
 8006b92:	d101      	bne.n	8006b98 <__sfputs_r+0x12>
 8006b94:	2000      	movs	r0, #0
 8006b96:	e007      	b.n	8006ba8 <__sfputs_r+0x22>
 8006b98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b9c:	463a      	mov	r2, r7
 8006b9e:	4630      	mov	r0, r6
 8006ba0:	f7ff ffda 	bl	8006b58 <__sfputc_r>
 8006ba4:	1c43      	adds	r3, r0, #1
 8006ba6:	d1f3      	bne.n	8006b90 <__sfputs_r+0xa>
 8006ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006bac <_vfiprintf_r>:
 8006bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb0:	460d      	mov	r5, r1
 8006bb2:	b09d      	sub	sp, #116	; 0x74
 8006bb4:	4614      	mov	r4, r2
 8006bb6:	4698      	mov	r8, r3
 8006bb8:	4606      	mov	r6, r0
 8006bba:	b118      	cbz	r0, 8006bc4 <_vfiprintf_r+0x18>
 8006bbc:	6983      	ldr	r3, [r0, #24]
 8006bbe:	b90b      	cbnz	r3, 8006bc4 <_vfiprintf_r+0x18>
 8006bc0:	f000 fd68 	bl	8007694 <__sinit>
 8006bc4:	4b89      	ldr	r3, [pc, #548]	; (8006dec <_vfiprintf_r+0x240>)
 8006bc6:	429d      	cmp	r5, r3
 8006bc8:	d11b      	bne.n	8006c02 <_vfiprintf_r+0x56>
 8006bca:	6875      	ldr	r5, [r6, #4]
 8006bcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bce:	07d9      	lsls	r1, r3, #31
 8006bd0:	d405      	bmi.n	8006bde <_vfiprintf_r+0x32>
 8006bd2:	89ab      	ldrh	r3, [r5, #12]
 8006bd4:	059a      	lsls	r2, r3, #22
 8006bd6:	d402      	bmi.n	8006bde <_vfiprintf_r+0x32>
 8006bd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006bda:	f000 fdf9 	bl	80077d0 <__retarget_lock_acquire_recursive>
 8006bde:	89ab      	ldrh	r3, [r5, #12]
 8006be0:	071b      	lsls	r3, r3, #28
 8006be2:	d501      	bpl.n	8006be8 <_vfiprintf_r+0x3c>
 8006be4:	692b      	ldr	r3, [r5, #16]
 8006be6:	b9eb      	cbnz	r3, 8006c24 <_vfiprintf_r+0x78>
 8006be8:	4629      	mov	r1, r5
 8006bea:	4630      	mov	r0, r6
 8006bec:	f000 fb68 	bl	80072c0 <__swsetup_r>
 8006bf0:	b1c0      	cbz	r0, 8006c24 <_vfiprintf_r+0x78>
 8006bf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bf4:	07dc      	lsls	r4, r3, #31
 8006bf6:	d50e      	bpl.n	8006c16 <_vfiprintf_r+0x6a>
 8006bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bfc:	b01d      	add	sp, #116	; 0x74
 8006bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c02:	4b7b      	ldr	r3, [pc, #492]	; (8006df0 <_vfiprintf_r+0x244>)
 8006c04:	429d      	cmp	r5, r3
 8006c06:	d101      	bne.n	8006c0c <_vfiprintf_r+0x60>
 8006c08:	68b5      	ldr	r5, [r6, #8]
 8006c0a:	e7df      	b.n	8006bcc <_vfiprintf_r+0x20>
 8006c0c:	4b79      	ldr	r3, [pc, #484]	; (8006df4 <_vfiprintf_r+0x248>)
 8006c0e:	429d      	cmp	r5, r3
 8006c10:	bf08      	it	eq
 8006c12:	68f5      	ldreq	r5, [r6, #12]
 8006c14:	e7da      	b.n	8006bcc <_vfiprintf_r+0x20>
 8006c16:	89ab      	ldrh	r3, [r5, #12]
 8006c18:	0598      	lsls	r0, r3, #22
 8006c1a:	d4ed      	bmi.n	8006bf8 <_vfiprintf_r+0x4c>
 8006c1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c1e:	f000 fdd9 	bl	80077d4 <__retarget_lock_release_recursive>
 8006c22:	e7e9      	b.n	8006bf8 <_vfiprintf_r+0x4c>
 8006c24:	2300      	movs	r3, #0
 8006c26:	9309      	str	r3, [sp, #36]	; 0x24
 8006c28:	2320      	movs	r3, #32
 8006c2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c32:	2330      	movs	r3, #48	; 0x30
 8006c34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006df8 <_vfiprintf_r+0x24c>
 8006c38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c3c:	f04f 0901 	mov.w	r9, #1
 8006c40:	4623      	mov	r3, r4
 8006c42:	469a      	mov	sl, r3
 8006c44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c48:	b10a      	cbz	r2, 8006c4e <_vfiprintf_r+0xa2>
 8006c4a:	2a25      	cmp	r2, #37	; 0x25
 8006c4c:	d1f9      	bne.n	8006c42 <_vfiprintf_r+0x96>
 8006c4e:	ebba 0b04 	subs.w	fp, sl, r4
 8006c52:	d00b      	beq.n	8006c6c <_vfiprintf_r+0xc0>
 8006c54:	465b      	mov	r3, fp
 8006c56:	4622      	mov	r2, r4
 8006c58:	4629      	mov	r1, r5
 8006c5a:	4630      	mov	r0, r6
 8006c5c:	f7ff ff93 	bl	8006b86 <__sfputs_r>
 8006c60:	3001      	adds	r0, #1
 8006c62:	f000 80aa 	beq.w	8006dba <_vfiprintf_r+0x20e>
 8006c66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c68:	445a      	add	r2, fp
 8006c6a:	9209      	str	r2, [sp, #36]	; 0x24
 8006c6c:	f89a 3000 	ldrb.w	r3, [sl]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	f000 80a2 	beq.w	8006dba <_vfiprintf_r+0x20e>
 8006c76:	2300      	movs	r3, #0
 8006c78:	f04f 32ff 	mov.w	r2, #4294967295
 8006c7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c80:	f10a 0a01 	add.w	sl, sl, #1
 8006c84:	9304      	str	r3, [sp, #16]
 8006c86:	9307      	str	r3, [sp, #28]
 8006c88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c8c:	931a      	str	r3, [sp, #104]	; 0x68
 8006c8e:	4654      	mov	r4, sl
 8006c90:	2205      	movs	r2, #5
 8006c92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c96:	4858      	ldr	r0, [pc, #352]	; (8006df8 <_vfiprintf_r+0x24c>)
 8006c98:	f7f9 faa2 	bl	80001e0 <memchr>
 8006c9c:	9a04      	ldr	r2, [sp, #16]
 8006c9e:	b9d8      	cbnz	r0, 8006cd8 <_vfiprintf_r+0x12c>
 8006ca0:	06d1      	lsls	r1, r2, #27
 8006ca2:	bf44      	itt	mi
 8006ca4:	2320      	movmi	r3, #32
 8006ca6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006caa:	0713      	lsls	r3, r2, #28
 8006cac:	bf44      	itt	mi
 8006cae:	232b      	movmi	r3, #43	; 0x2b
 8006cb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cb4:	f89a 3000 	ldrb.w	r3, [sl]
 8006cb8:	2b2a      	cmp	r3, #42	; 0x2a
 8006cba:	d015      	beq.n	8006ce8 <_vfiprintf_r+0x13c>
 8006cbc:	9a07      	ldr	r2, [sp, #28]
 8006cbe:	4654      	mov	r4, sl
 8006cc0:	2000      	movs	r0, #0
 8006cc2:	f04f 0c0a 	mov.w	ip, #10
 8006cc6:	4621      	mov	r1, r4
 8006cc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ccc:	3b30      	subs	r3, #48	; 0x30
 8006cce:	2b09      	cmp	r3, #9
 8006cd0:	d94e      	bls.n	8006d70 <_vfiprintf_r+0x1c4>
 8006cd2:	b1b0      	cbz	r0, 8006d02 <_vfiprintf_r+0x156>
 8006cd4:	9207      	str	r2, [sp, #28]
 8006cd6:	e014      	b.n	8006d02 <_vfiprintf_r+0x156>
 8006cd8:	eba0 0308 	sub.w	r3, r0, r8
 8006cdc:	fa09 f303 	lsl.w	r3, r9, r3
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	9304      	str	r3, [sp, #16]
 8006ce4:	46a2      	mov	sl, r4
 8006ce6:	e7d2      	b.n	8006c8e <_vfiprintf_r+0xe2>
 8006ce8:	9b03      	ldr	r3, [sp, #12]
 8006cea:	1d19      	adds	r1, r3, #4
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	9103      	str	r1, [sp, #12]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	bfbb      	ittet	lt
 8006cf4:	425b      	neglt	r3, r3
 8006cf6:	f042 0202 	orrlt.w	r2, r2, #2
 8006cfa:	9307      	strge	r3, [sp, #28]
 8006cfc:	9307      	strlt	r3, [sp, #28]
 8006cfe:	bfb8      	it	lt
 8006d00:	9204      	strlt	r2, [sp, #16]
 8006d02:	7823      	ldrb	r3, [r4, #0]
 8006d04:	2b2e      	cmp	r3, #46	; 0x2e
 8006d06:	d10c      	bne.n	8006d22 <_vfiprintf_r+0x176>
 8006d08:	7863      	ldrb	r3, [r4, #1]
 8006d0a:	2b2a      	cmp	r3, #42	; 0x2a
 8006d0c:	d135      	bne.n	8006d7a <_vfiprintf_r+0x1ce>
 8006d0e:	9b03      	ldr	r3, [sp, #12]
 8006d10:	1d1a      	adds	r2, r3, #4
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	9203      	str	r2, [sp, #12]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	bfb8      	it	lt
 8006d1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d1e:	3402      	adds	r4, #2
 8006d20:	9305      	str	r3, [sp, #20]
 8006d22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006e08 <_vfiprintf_r+0x25c>
 8006d26:	7821      	ldrb	r1, [r4, #0]
 8006d28:	2203      	movs	r2, #3
 8006d2a:	4650      	mov	r0, sl
 8006d2c:	f7f9 fa58 	bl	80001e0 <memchr>
 8006d30:	b140      	cbz	r0, 8006d44 <_vfiprintf_r+0x198>
 8006d32:	2340      	movs	r3, #64	; 0x40
 8006d34:	eba0 000a 	sub.w	r0, r0, sl
 8006d38:	fa03 f000 	lsl.w	r0, r3, r0
 8006d3c:	9b04      	ldr	r3, [sp, #16]
 8006d3e:	4303      	orrs	r3, r0
 8006d40:	3401      	adds	r4, #1
 8006d42:	9304      	str	r3, [sp, #16]
 8006d44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d48:	482c      	ldr	r0, [pc, #176]	; (8006dfc <_vfiprintf_r+0x250>)
 8006d4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d4e:	2206      	movs	r2, #6
 8006d50:	f7f9 fa46 	bl	80001e0 <memchr>
 8006d54:	2800      	cmp	r0, #0
 8006d56:	d03f      	beq.n	8006dd8 <_vfiprintf_r+0x22c>
 8006d58:	4b29      	ldr	r3, [pc, #164]	; (8006e00 <_vfiprintf_r+0x254>)
 8006d5a:	bb1b      	cbnz	r3, 8006da4 <_vfiprintf_r+0x1f8>
 8006d5c:	9b03      	ldr	r3, [sp, #12]
 8006d5e:	3307      	adds	r3, #7
 8006d60:	f023 0307 	bic.w	r3, r3, #7
 8006d64:	3308      	adds	r3, #8
 8006d66:	9303      	str	r3, [sp, #12]
 8006d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d6a:	443b      	add	r3, r7
 8006d6c:	9309      	str	r3, [sp, #36]	; 0x24
 8006d6e:	e767      	b.n	8006c40 <_vfiprintf_r+0x94>
 8006d70:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d74:	460c      	mov	r4, r1
 8006d76:	2001      	movs	r0, #1
 8006d78:	e7a5      	b.n	8006cc6 <_vfiprintf_r+0x11a>
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	3401      	adds	r4, #1
 8006d7e:	9305      	str	r3, [sp, #20]
 8006d80:	4619      	mov	r1, r3
 8006d82:	f04f 0c0a 	mov.w	ip, #10
 8006d86:	4620      	mov	r0, r4
 8006d88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d8c:	3a30      	subs	r2, #48	; 0x30
 8006d8e:	2a09      	cmp	r2, #9
 8006d90:	d903      	bls.n	8006d9a <_vfiprintf_r+0x1ee>
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d0c5      	beq.n	8006d22 <_vfiprintf_r+0x176>
 8006d96:	9105      	str	r1, [sp, #20]
 8006d98:	e7c3      	b.n	8006d22 <_vfiprintf_r+0x176>
 8006d9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d9e:	4604      	mov	r4, r0
 8006da0:	2301      	movs	r3, #1
 8006da2:	e7f0      	b.n	8006d86 <_vfiprintf_r+0x1da>
 8006da4:	ab03      	add	r3, sp, #12
 8006da6:	9300      	str	r3, [sp, #0]
 8006da8:	462a      	mov	r2, r5
 8006daa:	4b16      	ldr	r3, [pc, #88]	; (8006e04 <_vfiprintf_r+0x258>)
 8006dac:	a904      	add	r1, sp, #16
 8006dae:	4630      	mov	r0, r6
 8006db0:	f3af 8000 	nop.w
 8006db4:	4607      	mov	r7, r0
 8006db6:	1c78      	adds	r0, r7, #1
 8006db8:	d1d6      	bne.n	8006d68 <_vfiprintf_r+0x1bc>
 8006dba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006dbc:	07d9      	lsls	r1, r3, #31
 8006dbe:	d405      	bmi.n	8006dcc <_vfiprintf_r+0x220>
 8006dc0:	89ab      	ldrh	r3, [r5, #12]
 8006dc2:	059a      	lsls	r2, r3, #22
 8006dc4:	d402      	bmi.n	8006dcc <_vfiprintf_r+0x220>
 8006dc6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006dc8:	f000 fd04 	bl	80077d4 <__retarget_lock_release_recursive>
 8006dcc:	89ab      	ldrh	r3, [r5, #12]
 8006dce:	065b      	lsls	r3, r3, #25
 8006dd0:	f53f af12 	bmi.w	8006bf8 <_vfiprintf_r+0x4c>
 8006dd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006dd6:	e711      	b.n	8006bfc <_vfiprintf_r+0x50>
 8006dd8:	ab03      	add	r3, sp, #12
 8006dda:	9300      	str	r3, [sp, #0]
 8006ddc:	462a      	mov	r2, r5
 8006dde:	4b09      	ldr	r3, [pc, #36]	; (8006e04 <_vfiprintf_r+0x258>)
 8006de0:	a904      	add	r1, sp, #16
 8006de2:	4630      	mov	r0, r6
 8006de4:	f000 f880 	bl	8006ee8 <_printf_i>
 8006de8:	e7e4      	b.n	8006db4 <_vfiprintf_r+0x208>
 8006dea:	bf00      	nop
 8006dec:	08008464 	.word	0x08008464
 8006df0:	08008484 	.word	0x08008484
 8006df4:	08008444 	.word	0x08008444
 8006df8:	08008410 	.word	0x08008410
 8006dfc:	0800841a 	.word	0x0800841a
 8006e00:	00000000 	.word	0x00000000
 8006e04:	08006b87 	.word	0x08006b87
 8006e08:	08008416 	.word	0x08008416

08006e0c <_printf_common>:
 8006e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e10:	4616      	mov	r6, r2
 8006e12:	4699      	mov	r9, r3
 8006e14:	688a      	ldr	r2, [r1, #8]
 8006e16:	690b      	ldr	r3, [r1, #16]
 8006e18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	bfb8      	it	lt
 8006e20:	4613      	movlt	r3, r2
 8006e22:	6033      	str	r3, [r6, #0]
 8006e24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e28:	4607      	mov	r7, r0
 8006e2a:	460c      	mov	r4, r1
 8006e2c:	b10a      	cbz	r2, 8006e32 <_printf_common+0x26>
 8006e2e:	3301      	adds	r3, #1
 8006e30:	6033      	str	r3, [r6, #0]
 8006e32:	6823      	ldr	r3, [r4, #0]
 8006e34:	0699      	lsls	r1, r3, #26
 8006e36:	bf42      	ittt	mi
 8006e38:	6833      	ldrmi	r3, [r6, #0]
 8006e3a:	3302      	addmi	r3, #2
 8006e3c:	6033      	strmi	r3, [r6, #0]
 8006e3e:	6825      	ldr	r5, [r4, #0]
 8006e40:	f015 0506 	ands.w	r5, r5, #6
 8006e44:	d106      	bne.n	8006e54 <_printf_common+0x48>
 8006e46:	f104 0a19 	add.w	sl, r4, #25
 8006e4a:	68e3      	ldr	r3, [r4, #12]
 8006e4c:	6832      	ldr	r2, [r6, #0]
 8006e4e:	1a9b      	subs	r3, r3, r2
 8006e50:	42ab      	cmp	r3, r5
 8006e52:	dc26      	bgt.n	8006ea2 <_printf_common+0x96>
 8006e54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e58:	1e13      	subs	r3, r2, #0
 8006e5a:	6822      	ldr	r2, [r4, #0]
 8006e5c:	bf18      	it	ne
 8006e5e:	2301      	movne	r3, #1
 8006e60:	0692      	lsls	r2, r2, #26
 8006e62:	d42b      	bmi.n	8006ebc <_printf_common+0xb0>
 8006e64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e68:	4649      	mov	r1, r9
 8006e6a:	4638      	mov	r0, r7
 8006e6c:	47c0      	blx	r8
 8006e6e:	3001      	adds	r0, #1
 8006e70:	d01e      	beq.n	8006eb0 <_printf_common+0xa4>
 8006e72:	6823      	ldr	r3, [r4, #0]
 8006e74:	68e5      	ldr	r5, [r4, #12]
 8006e76:	6832      	ldr	r2, [r6, #0]
 8006e78:	f003 0306 	and.w	r3, r3, #6
 8006e7c:	2b04      	cmp	r3, #4
 8006e7e:	bf08      	it	eq
 8006e80:	1aad      	subeq	r5, r5, r2
 8006e82:	68a3      	ldr	r3, [r4, #8]
 8006e84:	6922      	ldr	r2, [r4, #16]
 8006e86:	bf0c      	ite	eq
 8006e88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e8c:	2500      	movne	r5, #0
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	bfc4      	itt	gt
 8006e92:	1a9b      	subgt	r3, r3, r2
 8006e94:	18ed      	addgt	r5, r5, r3
 8006e96:	2600      	movs	r6, #0
 8006e98:	341a      	adds	r4, #26
 8006e9a:	42b5      	cmp	r5, r6
 8006e9c:	d11a      	bne.n	8006ed4 <_printf_common+0xc8>
 8006e9e:	2000      	movs	r0, #0
 8006ea0:	e008      	b.n	8006eb4 <_printf_common+0xa8>
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	4652      	mov	r2, sl
 8006ea6:	4649      	mov	r1, r9
 8006ea8:	4638      	mov	r0, r7
 8006eaa:	47c0      	blx	r8
 8006eac:	3001      	adds	r0, #1
 8006eae:	d103      	bne.n	8006eb8 <_printf_common+0xac>
 8006eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8006eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eb8:	3501      	adds	r5, #1
 8006eba:	e7c6      	b.n	8006e4a <_printf_common+0x3e>
 8006ebc:	18e1      	adds	r1, r4, r3
 8006ebe:	1c5a      	adds	r2, r3, #1
 8006ec0:	2030      	movs	r0, #48	; 0x30
 8006ec2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ec6:	4422      	add	r2, r4
 8006ec8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ecc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ed0:	3302      	adds	r3, #2
 8006ed2:	e7c7      	b.n	8006e64 <_printf_common+0x58>
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	4622      	mov	r2, r4
 8006ed8:	4649      	mov	r1, r9
 8006eda:	4638      	mov	r0, r7
 8006edc:	47c0      	blx	r8
 8006ede:	3001      	adds	r0, #1
 8006ee0:	d0e6      	beq.n	8006eb0 <_printf_common+0xa4>
 8006ee2:	3601      	adds	r6, #1
 8006ee4:	e7d9      	b.n	8006e9a <_printf_common+0x8e>
	...

08006ee8 <_printf_i>:
 8006ee8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006eec:	7e0f      	ldrb	r7, [r1, #24]
 8006eee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ef0:	2f78      	cmp	r7, #120	; 0x78
 8006ef2:	4691      	mov	r9, r2
 8006ef4:	4680      	mov	r8, r0
 8006ef6:	460c      	mov	r4, r1
 8006ef8:	469a      	mov	sl, r3
 8006efa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006efe:	d807      	bhi.n	8006f10 <_printf_i+0x28>
 8006f00:	2f62      	cmp	r7, #98	; 0x62
 8006f02:	d80a      	bhi.n	8006f1a <_printf_i+0x32>
 8006f04:	2f00      	cmp	r7, #0
 8006f06:	f000 80d8 	beq.w	80070ba <_printf_i+0x1d2>
 8006f0a:	2f58      	cmp	r7, #88	; 0x58
 8006f0c:	f000 80a3 	beq.w	8007056 <_printf_i+0x16e>
 8006f10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f18:	e03a      	b.n	8006f90 <_printf_i+0xa8>
 8006f1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f1e:	2b15      	cmp	r3, #21
 8006f20:	d8f6      	bhi.n	8006f10 <_printf_i+0x28>
 8006f22:	a101      	add	r1, pc, #4	; (adr r1, 8006f28 <_printf_i+0x40>)
 8006f24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f28:	08006f81 	.word	0x08006f81
 8006f2c:	08006f95 	.word	0x08006f95
 8006f30:	08006f11 	.word	0x08006f11
 8006f34:	08006f11 	.word	0x08006f11
 8006f38:	08006f11 	.word	0x08006f11
 8006f3c:	08006f11 	.word	0x08006f11
 8006f40:	08006f95 	.word	0x08006f95
 8006f44:	08006f11 	.word	0x08006f11
 8006f48:	08006f11 	.word	0x08006f11
 8006f4c:	08006f11 	.word	0x08006f11
 8006f50:	08006f11 	.word	0x08006f11
 8006f54:	080070a1 	.word	0x080070a1
 8006f58:	08006fc5 	.word	0x08006fc5
 8006f5c:	08007083 	.word	0x08007083
 8006f60:	08006f11 	.word	0x08006f11
 8006f64:	08006f11 	.word	0x08006f11
 8006f68:	080070c3 	.word	0x080070c3
 8006f6c:	08006f11 	.word	0x08006f11
 8006f70:	08006fc5 	.word	0x08006fc5
 8006f74:	08006f11 	.word	0x08006f11
 8006f78:	08006f11 	.word	0x08006f11
 8006f7c:	0800708b 	.word	0x0800708b
 8006f80:	682b      	ldr	r3, [r5, #0]
 8006f82:	1d1a      	adds	r2, r3, #4
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	602a      	str	r2, [r5, #0]
 8006f88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f90:	2301      	movs	r3, #1
 8006f92:	e0a3      	b.n	80070dc <_printf_i+0x1f4>
 8006f94:	6820      	ldr	r0, [r4, #0]
 8006f96:	6829      	ldr	r1, [r5, #0]
 8006f98:	0606      	lsls	r6, r0, #24
 8006f9a:	f101 0304 	add.w	r3, r1, #4
 8006f9e:	d50a      	bpl.n	8006fb6 <_printf_i+0xce>
 8006fa0:	680e      	ldr	r6, [r1, #0]
 8006fa2:	602b      	str	r3, [r5, #0]
 8006fa4:	2e00      	cmp	r6, #0
 8006fa6:	da03      	bge.n	8006fb0 <_printf_i+0xc8>
 8006fa8:	232d      	movs	r3, #45	; 0x2d
 8006faa:	4276      	negs	r6, r6
 8006fac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fb0:	485e      	ldr	r0, [pc, #376]	; (800712c <_printf_i+0x244>)
 8006fb2:	230a      	movs	r3, #10
 8006fb4:	e019      	b.n	8006fea <_printf_i+0x102>
 8006fb6:	680e      	ldr	r6, [r1, #0]
 8006fb8:	602b      	str	r3, [r5, #0]
 8006fba:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006fbe:	bf18      	it	ne
 8006fc0:	b236      	sxthne	r6, r6
 8006fc2:	e7ef      	b.n	8006fa4 <_printf_i+0xbc>
 8006fc4:	682b      	ldr	r3, [r5, #0]
 8006fc6:	6820      	ldr	r0, [r4, #0]
 8006fc8:	1d19      	adds	r1, r3, #4
 8006fca:	6029      	str	r1, [r5, #0]
 8006fcc:	0601      	lsls	r1, r0, #24
 8006fce:	d501      	bpl.n	8006fd4 <_printf_i+0xec>
 8006fd0:	681e      	ldr	r6, [r3, #0]
 8006fd2:	e002      	b.n	8006fda <_printf_i+0xf2>
 8006fd4:	0646      	lsls	r6, r0, #25
 8006fd6:	d5fb      	bpl.n	8006fd0 <_printf_i+0xe8>
 8006fd8:	881e      	ldrh	r6, [r3, #0]
 8006fda:	4854      	ldr	r0, [pc, #336]	; (800712c <_printf_i+0x244>)
 8006fdc:	2f6f      	cmp	r7, #111	; 0x6f
 8006fde:	bf0c      	ite	eq
 8006fe0:	2308      	moveq	r3, #8
 8006fe2:	230a      	movne	r3, #10
 8006fe4:	2100      	movs	r1, #0
 8006fe6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006fea:	6865      	ldr	r5, [r4, #4]
 8006fec:	60a5      	str	r5, [r4, #8]
 8006fee:	2d00      	cmp	r5, #0
 8006ff0:	bfa2      	ittt	ge
 8006ff2:	6821      	ldrge	r1, [r4, #0]
 8006ff4:	f021 0104 	bicge.w	r1, r1, #4
 8006ff8:	6021      	strge	r1, [r4, #0]
 8006ffa:	b90e      	cbnz	r6, 8007000 <_printf_i+0x118>
 8006ffc:	2d00      	cmp	r5, #0
 8006ffe:	d04d      	beq.n	800709c <_printf_i+0x1b4>
 8007000:	4615      	mov	r5, r2
 8007002:	fbb6 f1f3 	udiv	r1, r6, r3
 8007006:	fb03 6711 	mls	r7, r3, r1, r6
 800700a:	5dc7      	ldrb	r7, [r0, r7]
 800700c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007010:	4637      	mov	r7, r6
 8007012:	42bb      	cmp	r3, r7
 8007014:	460e      	mov	r6, r1
 8007016:	d9f4      	bls.n	8007002 <_printf_i+0x11a>
 8007018:	2b08      	cmp	r3, #8
 800701a:	d10b      	bne.n	8007034 <_printf_i+0x14c>
 800701c:	6823      	ldr	r3, [r4, #0]
 800701e:	07de      	lsls	r6, r3, #31
 8007020:	d508      	bpl.n	8007034 <_printf_i+0x14c>
 8007022:	6923      	ldr	r3, [r4, #16]
 8007024:	6861      	ldr	r1, [r4, #4]
 8007026:	4299      	cmp	r1, r3
 8007028:	bfde      	ittt	le
 800702a:	2330      	movle	r3, #48	; 0x30
 800702c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007030:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007034:	1b52      	subs	r2, r2, r5
 8007036:	6122      	str	r2, [r4, #16]
 8007038:	f8cd a000 	str.w	sl, [sp]
 800703c:	464b      	mov	r3, r9
 800703e:	aa03      	add	r2, sp, #12
 8007040:	4621      	mov	r1, r4
 8007042:	4640      	mov	r0, r8
 8007044:	f7ff fee2 	bl	8006e0c <_printf_common>
 8007048:	3001      	adds	r0, #1
 800704a:	d14c      	bne.n	80070e6 <_printf_i+0x1fe>
 800704c:	f04f 30ff 	mov.w	r0, #4294967295
 8007050:	b004      	add	sp, #16
 8007052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007056:	4835      	ldr	r0, [pc, #212]	; (800712c <_printf_i+0x244>)
 8007058:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800705c:	6829      	ldr	r1, [r5, #0]
 800705e:	6823      	ldr	r3, [r4, #0]
 8007060:	f851 6b04 	ldr.w	r6, [r1], #4
 8007064:	6029      	str	r1, [r5, #0]
 8007066:	061d      	lsls	r5, r3, #24
 8007068:	d514      	bpl.n	8007094 <_printf_i+0x1ac>
 800706a:	07df      	lsls	r7, r3, #31
 800706c:	bf44      	itt	mi
 800706e:	f043 0320 	orrmi.w	r3, r3, #32
 8007072:	6023      	strmi	r3, [r4, #0]
 8007074:	b91e      	cbnz	r6, 800707e <_printf_i+0x196>
 8007076:	6823      	ldr	r3, [r4, #0]
 8007078:	f023 0320 	bic.w	r3, r3, #32
 800707c:	6023      	str	r3, [r4, #0]
 800707e:	2310      	movs	r3, #16
 8007080:	e7b0      	b.n	8006fe4 <_printf_i+0xfc>
 8007082:	6823      	ldr	r3, [r4, #0]
 8007084:	f043 0320 	orr.w	r3, r3, #32
 8007088:	6023      	str	r3, [r4, #0]
 800708a:	2378      	movs	r3, #120	; 0x78
 800708c:	4828      	ldr	r0, [pc, #160]	; (8007130 <_printf_i+0x248>)
 800708e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007092:	e7e3      	b.n	800705c <_printf_i+0x174>
 8007094:	0659      	lsls	r1, r3, #25
 8007096:	bf48      	it	mi
 8007098:	b2b6      	uxthmi	r6, r6
 800709a:	e7e6      	b.n	800706a <_printf_i+0x182>
 800709c:	4615      	mov	r5, r2
 800709e:	e7bb      	b.n	8007018 <_printf_i+0x130>
 80070a0:	682b      	ldr	r3, [r5, #0]
 80070a2:	6826      	ldr	r6, [r4, #0]
 80070a4:	6961      	ldr	r1, [r4, #20]
 80070a6:	1d18      	adds	r0, r3, #4
 80070a8:	6028      	str	r0, [r5, #0]
 80070aa:	0635      	lsls	r5, r6, #24
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	d501      	bpl.n	80070b4 <_printf_i+0x1cc>
 80070b0:	6019      	str	r1, [r3, #0]
 80070b2:	e002      	b.n	80070ba <_printf_i+0x1d2>
 80070b4:	0670      	lsls	r0, r6, #25
 80070b6:	d5fb      	bpl.n	80070b0 <_printf_i+0x1c8>
 80070b8:	8019      	strh	r1, [r3, #0]
 80070ba:	2300      	movs	r3, #0
 80070bc:	6123      	str	r3, [r4, #16]
 80070be:	4615      	mov	r5, r2
 80070c0:	e7ba      	b.n	8007038 <_printf_i+0x150>
 80070c2:	682b      	ldr	r3, [r5, #0]
 80070c4:	1d1a      	adds	r2, r3, #4
 80070c6:	602a      	str	r2, [r5, #0]
 80070c8:	681d      	ldr	r5, [r3, #0]
 80070ca:	6862      	ldr	r2, [r4, #4]
 80070cc:	2100      	movs	r1, #0
 80070ce:	4628      	mov	r0, r5
 80070d0:	f7f9 f886 	bl	80001e0 <memchr>
 80070d4:	b108      	cbz	r0, 80070da <_printf_i+0x1f2>
 80070d6:	1b40      	subs	r0, r0, r5
 80070d8:	6060      	str	r0, [r4, #4]
 80070da:	6863      	ldr	r3, [r4, #4]
 80070dc:	6123      	str	r3, [r4, #16]
 80070de:	2300      	movs	r3, #0
 80070e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070e4:	e7a8      	b.n	8007038 <_printf_i+0x150>
 80070e6:	6923      	ldr	r3, [r4, #16]
 80070e8:	462a      	mov	r2, r5
 80070ea:	4649      	mov	r1, r9
 80070ec:	4640      	mov	r0, r8
 80070ee:	47d0      	blx	sl
 80070f0:	3001      	adds	r0, #1
 80070f2:	d0ab      	beq.n	800704c <_printf_i+0x164>
 80070f4:	6823      	ldr	r3, [r4, #0]
 80070f6:	079b      	lsls	r3, r3, #30
 80070f8:	d413      	bmi.n	8007122 <_printf_i+0x23a>
 80070fa:	68e0      	ldr	r0, [r4, #12]
 80070fc:	9b03      	ldr	r3, [sp, #12]
 80070fe:	4298      	cmp	r0, r3
 8007100:	bfb8      	it	lt
 8007102:	4618      	movlt	r0, r3
 8007104:	e7a4      	b.n	8007050 <_printf_i+0x168>
 8007106:	2301      	movs	r3, #1
 8007108:	4632      	mov	r2, r6
 800710a:	4649      	mov	r1, r9
 800710c:	4640      	mov	r0, r8
 800710e:	47d0      	blx	sl
 8007110:	3001      	adds	r0, #1
 8007112:	d09b      	beq.n	800704c <_printf_i+0x164>
 8007114:	3501      	adds	r5, #1
 8007116:	68e3      	ldr	r3, [r4, #12]
 8007118:	9903      	ldr	r1, [sp, #12]
 800711a:	1a5b      	subs	r3, r3, r1
 800711c:	42ab      	cmp	r3, r5
 800711e:	dcf2      	bgt.n	8007106 <_printf_i+0x21e>
 8007120:	e7eb      	b.n	80070fa <_printf_i+0x212>
 8007122:	2500      	movs	r5, #0
 8007124:	f104 0619 	add.w	r6, r4, #25
 8007128:	e7f5      	b.n	8007116 <_printf_i+0x22e>
 800712a:	bf00      	nop
 800712c:	08008421 	.word	0x08008421
 8007130:	08008432 	.word	0x08008432

08007134 <_sbrk_r>:
 8007134:	b538      	push	{r3, r4, r5, lr}
 8007136:	4d06      	ldr	r5, [pc, #24]	; (8007150 <_sbrk_r+0x1c>)
 8007138:	2300      	movs	r3, #0
 800713a:	4604      	mov	r4, r0
 800713c:	4608      	mov	r0, r1
 800713e:	602b      	str	r3, [r5, #0]
 8007140:	f7f9 fc70 	bl	8000a24 <_sbrk>
 8007144:	1c43      	adds	r3, r0, #1
 8007146:	d102      	bne.n	800714e <_sbrk_r+0x1a>
 8007148:	682b      	ldr	r3, [r5, #0]
 800714a:	b103      	cbz	r3, 800714e <_sbrk_r+0x1a>
 800714c:	6023      	str	r3, [r4, #0]
 800714e:	bd38      	pop	{r3, r4, r5, pc}
 8007150:	200003e8 	.word	0x200003e8

08007154 <_raise_r>:
 8007154:	291f      	cmp	r1, #31
 8007156:	b538      	push	{r3, r4, r5, lr}
 8007158:	4604      	mov	r4, r0
 800715a:	460d      	mov	r5, r1
 800715c:	d904      	bls.n	8007168 <_raise_r+0x14>
 800715e:	2316      	movs	r3, #22
 8007160:	6003      	str	r3, [r0, #0]
 8007162:	f04f 30ff 	mov.w	r0, #4294967295
 8007166:	bd38      	pop	{r3, r4, r5, pc}
 8007168:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800716a:	b112      	cbz	r2, 8007172 <_raise_r+0x1e>
 800716c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007170:	b94b      	cbnz	r3, 8007186 <_raise_r+0x32>
 8007172:	4620      	mov	r0, r4
 8007174:	f000 f830 	bl	80071d8 <_getpid_r>
 8007178:	462a      	mov	r2, r5
 800717a:	4601      	mov	r1, r0
 800717c:	4620      	mov	r0, r4
 800717e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007182:	f000 b817 	b.w	80071b4 <_kill_r>
 8007186:	2b01      	cmp	r3, #1
 8007188:	d00a      	beq.n	80071a0 <_raise_r+0x4c>
 800718a:	1c59      	adds	r1, r3, #1
 800718c:	d103      	bne.n	8007196 <_raise_r+0x42>
 800718e:	2316      	movs	r3, #22
 8007190:	6003      	str	r3, [r0, #0]
 8007192:	2001      	movs	r0, #1
 8007194:	e7e7      	b.n	8007166 <_raise_r+0x12>
 8007196:	2400      	movs	r4, #0
 8007198:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800719c:	4628      	mov	r0, r5
 800719e:	4798      	blx	r3
 80071a0:	2000      	movs	r0, #0
 80071a2:	e7e0      	b.n	8007166 <_raise_r+0x12>

080071a4 <raise>:
 80071a4:	4b02      	ldr	r3, [pc, #8]	; (80071b0 <raise+0xc>)
 80071a6:	4601      	mov	r1, r0
 80071a8:	6818      	ldr	r0, [r3, #0]
 80071aa:	f7ff bfd3 	b.w	8007154 <_raise_r>
 80071ae:	bf00      	nop
 80071b0:	20000014 	.word	0x20000014

080071b4 <_kill_r>:
 80071b4:	b538      	push	{r3, r4, r5, lr}
 80071b6:	4d07      	ldr	r5, [pc, #28]	; (80071d4 <_kill_r+0x20>)
 80071b8:	2300      	movs	r3, #0
 80071ba:	4604      	mov	r4, r0
 80071bc:	4608      	mov	r0, r1
 80071be:	4611      	mov	r1, r2
 80071c0:	602b      	str	r3, [r5, #0]
 80071c2:	f7f9 fba7 	bl	8000914 <_kill>
 80071c6:	1c43      	adds	r3, r0, #1
 80071c8:	d102      	bne.n	80071d0 <_kill_r+0x1c>
 80071ca:	682b      	ldr	r3, [r5, #0]
 80071cc:	b103      	cbz	r3, 80071d0 <_kill_r+0x1c>
 80071ce:	6023      	str	r3, [r4, #0]
 80071d0:	bd38      	pop	{r3, r4, r5, pc}
 80071d2:	bf00      	nop
 80071d4:	200003e8 	.word	0x200003e8

080071d8 <_getpid_r>:
 80071d8:	f7f9 bb94 	b.w	8000904 <_getpid>

080071dc <_vsiprintf_r>:
 80071dc:	b500      	push	{lr}
 80071de:	b09b      	sub	sp, #108	; 0x6c
 80071e0:	9100      	str	r1, [sp, #0]
 80071e2:	9104      	str	r1, [sp, #16]
 80071e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80071e8:	9105      	str	r1, [sp, #20]
 80071ea:	9102      	str	r1, [sp, #8]
 80071ec:	4905      	ldr	r1, [pc, #20]	; (8007204 <_vsiprintf_r+0x28>)
 80071ee:	9103      	str	r1, [sp, #12]
 80071f0:	4669      	mov	r1, sp
 80071f2:	f000 fbeb 	bl	80079cc <_svfiprintf_r>
 80071f6:	9b00      	ldr	r3, [sp, #0]
 80071f8:	2200      	movs	r2, #0
 80071fa:	701a      	strb	r2, [r3, #0]
 80071fc:	b01b      	add	sp, #108	; 0x6c
 80071fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8007202:	bf00      	nop
 8007204:	ffff0208 	.word	0xffff0208

08007208 <vsiprintf>:
 8007208:	4613      	mov	r3, r2
 800720a:	460a      	mov	r2, r1
 800720c:	4601      	mov	r1, r0
 800720e:	4802      	ldr	r0, [pc, #8]	; (8007218 <vsiprintf+0x10>)
 8007210:	6800      	ldr	r0, [r0, #0]
 8007212:	f7ff bfe3 	b.w	80071dc <_vsiprintf_r>
 8007216:	bf00      	nop
 8007218:	20000014 	.word	0x20000014

0800721c <__swbuf_r>:
 800721c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800721e:	460e      	mov	r6, r1
 8007220:	4614      	mov	r4, r2
 8007222:	4605      	mov	r5, r0
 8007224:	b118      	cbz	r0, 800722e <__swbuf_r+0x12>
 8007226:	6983      	ldr	r3, [r0, #24]
 8007228:	b90b      	cbnz	r3, 800722e <__swbuf_r+0x12>
 800722a:	f000 fa33 	bl	8007694 <__sinit>
 800722e:	4b21      	ldr	r3, [pc, #132]	; (80072b4 <__swbuf_r+0x98>)
 8007230:	429c      	cmp	r4, r3
 8007232:	d12b      	bne.n	800728c <__swbuf_r+0x70>
 8007234:	686c      	ldr	r4, [r5, #4]
 8007236:	69a3      	ldr	r3, [r4, #24]
 8007238:	60a3      	str	r3, [r4, #8]
 800723a:	89a3      	ldrh	r3, [r4, #12]
 800723c:	071a      	lsls	r2, r3, #28
 800723e:	d52f      	bpl.n	80072a0 <__swbuf_r+0x84>
 8007240:	6923      	ldr	r3, [r4, #16]
 8007242:	b36b      	cbz	r3, 80072a0 <__swbuf_r+0x84>
 8007244:	6923      	ldr	r3, [r4, #16]
 8007246:	6820      	ldr	r0, [r4, #0]
 8007248:	1ac0      	subs	r0, r0, r3
 800724a:	6963      	ldr	r3, [r4, #20]
 800724c:	b2f6      	uxtb	r6, r6
 800724e:	4283      	cmp	r3, r0
 8007250:	4637      	mov	r7, r6
 8007252:	dc04      	bgt.n	800725e <__swbuf_r+0x42>
 8007254:	4621      	mov	r1, r4
 8007256:	4628      	mov	r0, r5
 8007258:	f000 f988 	bl	800756c <_fflush_r>
 800725c:	bb30      	cbnz	r0, 80072ac <__swbuf_r+0x90>
 800725e:	68a3      	ldr	r3, [r4, #8]
 8007260:	3b01      	subs	r3, #1
 8007262:	60a3      	str	r3, [r4, #8]
 8007264:	6823      	ldr	r3, [r4, #0]
 8007266:	1c5a      	adds	r2, r3, #1
 8007268:	6022      	str	r2, [r4, #0]
 800726a:	701e      	strb	r6, [r3, #0]
 800726c:	6963      	ldr	r3, [r4, #20]
 800726e:	3001      	adds	r0, #1
 8007270:	4283      	cmp	r3, r0
 8007272:	d004      	beq.n	800727e <__swbuf_r+0x62>
 8007274:	89a3      	ldrh	r3, [r4, #12]
 8007276:	07db      	lsls	r3, r3, #31
 8007278:	d506      	bpl.n	8007288 <__swbuf_r+0x6c>
 800727a:	2e0a      	cmp	r6, #10
 800727c:	d104      	bne.n	8007288 <__swbuf_r+0x6c>
 800727e:	4621      	mov	r1, r4
 8007280:	4628      	mov	r0, r5
 8007282:	f000 f973 	bl	800756c <_fflush_r>
 8007286:	b988      	cbnz	r0, 80072ac <__swbuf_r+0x90>
 8007288:	4638      	mov	r0, r7
 800728a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800728c:	4b0a      	ldr	r3, [pc, #40]	; (80072b8 <__swbuf_r+0x9c>)
 800728e:	429c      	cmp	r4, r3
 8007290:	d101      	bne.n	8007296 <__swbuf_r+0x7a>
 8007292:	68ac      	ldr	r4, [r5, #8]
 8007294:	e7cf      	b.n	8007236 <__swbuf_r+0x1a>
 8007296:	4b09      	ldr	r3, [pc, #36]	; (80072bc <__swbuf_r+0xa0>)
 8007298:	429c      	cmp	r4, r3
 800729a:	bf08      	it	eq
 800729c:	68ec      	ldreq	r4, [r5, #12]
 800729e:	e7ca      	b.n	8007236 <__swbuf_r+0x1a>
 80072a0:	4621      	mov	r1, r4
 80072a2:	4628      	mov	r0, r5
 80072a4:	f000 f80c 	bl	80072c0 <__swsetup_r>
 80072a8:	2800      	cmp	r0, #0
 80072aa:	d0cb      	beq.n	8007244 <__swbuf_r+0x28>
 80072ac:	f04f 37ff 	mov.w	r7, #4294967295
 80072b0:	e7ea      	b.n	8007288 <__swbuf_r+0x6c>
 80072b2:	bf00      	nop
 80072b4:	08008464 	.word	0x08008464
 80072b8:	08008484 	.word	0x08008484
 80072bc:	08008444 	.word	0x08008444

080072c0 <__swsetup_r>:
 80072c0:	4b32      	ldr	r3, [pc, #200]	; (800738c <__swsetup_r+0xcc>)
 80072c2:	b570      	push	{r4, r5, r6, lr}
 80072c4:	681d      	ldr	r5, [r3, #0]
 80072c6:	4606      	mov	r6, r0
 80072c8:	460c      	mov	r4, r1
 80072ca:	b125      	cbz	r5, 80072d6 <__swsetup_r+0x16>
 80072cc:	69ab      	ldr	r3, [r5, #24]
 80072ce:	b913      	cbnz	r3, 80072d6 <__swsetup_r+0x16>
 80072d0:	4628      	mov	r0, r5
 80072d2:	f000 f9df 	bl	8007694 <__sinit>
 80072d6:	4b2e      	ldr	r3, [pc, #184]	; (8007390 <__swsetup_r+0xd0>)
 80072d8:	429c      	cmp	r4, r3
 80072da:	d10f      	bne.n	80072fc <__swsetup_r+0x3c>
 80072dc:	686c      	ldr	r4, [r5, #4]
 80072de:	89a3      	ldrh	r3, [r4, #12]
 80072e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80072e4:	0719      	lsls	r1, r3, #28
 80072e6:	d42c      	bmi.n	8007342 <__swsetup_r+0x82>
 80072e8:	06dd      	lsls	r5, r3, #27
 80072ea:	d411      	bmi.n	8007310 <__swsetup_r+0x50>
 80072ec:	2309      	movs	r3, #9
 80072ee:	6033      	str	r3, [r6, #0]
 80072f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80072f4:	81a3      	strh	r3, [r4, #12]
 80072f6:	f04f 30ff 	mov.w	r0, #4294967295
 80072fa:	e03e      	b.n	800737a <__swsetup_r+0xba>
 80072fc:	4b25      	ldr	r3, [pc, #148]	; (8007394 <__swsetup_r+0xd4>)
 80072fe:	429c      	cmp	r4, r3
 8007300:	d101      	bne.n	8007306 <__swsetup_r+0x46>
 8007302:	68ac      	ldr	r4, [r5, #8]
 8007304:	e7eb      	b.n	80072de <__swsetup_r+0x1e>
 8007306:	4b24      	ldr	r3, [pc, #144]	; (8007398 <__swsetup_r+0xd8>)
 8007308:	429c      	cmp	r4, r3
 800730a:	bf08      	it	eq
 800730c:	68ec      	ldreq	r4, [r5, #12]
 800730e:	e7e6      	b.n	80072de <__swsetup_r+0x1e>
 8007310:	0758      	lsls	r0, r3, #29
 8007312:	d512      	bpl.n	800733a <__swsetup_r+0x7a>
 8007314:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007316:	b141      	cbz	r1, 800732a <__swsetup_r+0x6a>
 8007318:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800731c:	4299      	cmp	r1, r3
 800731e:	d002      	beq.n	8007326 <__swsetup_r+0x66>
 8007320:	4630      	mov	r0, r6
 8007322:	f7ff fb39 	bl	8006998 <_free_r>
 8007326:	2300      	movs	r3, #0
 8007328:	6363      	str	r3, [r4, #52]	; 0x34
 800732a:	89a3      	ldrh	r3, [r4, #12]
 800732c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007330:	81a3      	strh	r3, [r4, #12]
 8007332:	2300      	movs	r3, #0
 8007334:	6063      	str	r3, [r4, #4]
 8007336:	6923      	ldr	r3, [r4, #16]
 8007338:	6023      	str	r3, [r4, #0]
 800733a:	89a3      	ldrh	r3, [r4, #12]
 800733c:	f043 0308 	orr.w	r3, r3, #8
 8007340:	81a3      	strh	r3, [r4, #12]
 8007342:	6923      	ldr	r3, [r4, #16]
 8007344:	b94b      	cbnz	r3, 800735a <__swsetup_r+0x9a>
 8007346:	89a3      	ldrh	r3, [r4, #12]
 8007348:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800734c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007350:	d003      	beq.n	800735a <__swsetup_r+0x9a>
 8007352:	4621      	mov	r1, r4
 8007354:	4630      	mov	r0, r6
 8007356:	f000 fa63 	bl	8007820 <__smakebuf_r>
 800735a:	89a0      	ldrh	r0, [r4, #12]
 800735c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007360:	f010 0301 	ands.w	r3, r0, #1
 8007364:	d00a      	beq.n	800737c <__swsetup_r+0xbc>
 8007366:	2300      	movs	r3, #0
 8007368:	60a3      	str	r3, [r4, #8]
 800736a:	6963      	ldr	r3, [r4, #20]
 800736c:	425b      	negs	r3, r3
 800736e:	61a3      	str	r3, [r4, #24]
 8007370:	6923      	ldr	r3, [r4, #16]
 8007372:	b943      	cbnz	r3, 8007386 <__swsetup_r+0xc6>
 8007374:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007378:	d1ba      	bne.n	80072f0 <__swsetup_r+0x30>
 800737a:	bd70      	pop	{r4, r5, r6, pc}
 800737c:	0781      	lsls	r1, r0, #30
 800737e:	bf58      	it	pl
 8007380:	6963      	ldrpl	r3, [r4, #20]
 8007382:	60a3      	str	r3, [r4, #8]
 8007384:	e7f4      	b.n	8007370 <__swsetup_r+0xb0>
 8007386:	2000      	movs	r0, #0
 8007388:	e7f7      	b.n	800737a <__swsetup_r+0xba>
 800738a:	bf00      	nop
 800738c:	20000014 	.word	0x20000014
 8007390:	08008464 	.word	0x08008464
 8007394:	08008484 	.word	0x08008484
 8007398:	08008444 	.word	0x08008444

0800739c <__register_exitproc>:
 800739c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073a0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 800745c <__register_exitproc+0xc0>
 80073a4:	4606      	mov	r6, r0
 80073a6:	f8d8 0000 	ldr.w	r0, [r8]
 80073aa:	461f      	mov	r7, r3
 80073ac:	460d      	mov	r5, r1
 80073ae:	4691      	mov	r9, r2
 80073b0:	f000 fa0e 	bl	80077d0 <__retarget_lock_acquire_recursive>
 80073b4:	4b25      	ldr	r3, [pc, #148]	; (800744c <__register_exitproc+0xb0>)
 80073b6:	681c      	ldr	r4, [r3, #0]
 80073b8:	b934      	cbnz	r4, 80073c8 <__register_exitproc+0x2c>
 80073ba:	4c25      	ldr	r4, [pc, #148]	; (8007450 <__register_exitproc+0xb4>)
 80073bc:	601c      	str	r4, [r3, #0]
 80073be:	4b25      	ldr	r3, [pc, #148]	; (8007454 <__register_exitproc+0xb8>)
 80073c0:	b113      	cbz	r3, 80073c8 <__register_exitproc+0x2c>
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80073c8:	6863      	ldr	r3, [r4, #4]
 80073ca:	2b1f      	cmp	r3, #31
 80073cc:	dd07      	ble.n	80073de <__register_exitproc+0x42>
 80073ce:	f8d8 0000 	ldr.w	r0, [r8]
 80073d2:	f000 f9ff 	bl	80077d4 <__retarget_lock_release_recursive>
 80073d6:	f04f 30ff 	mov.w	r0, #4294967295
 80073da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073de:	b34e      	cbz	r6, 8007434 <__register_exitproc+0x98>
 80073e0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80073e4:	b988      	cbnz	r0, 800740a <__register_exitproc+0x6e>
 80073e6:	4b1c      	ldr	r3, [pc, #112]	; (8007458 <__register_exitproc+0xbc>)
 80073e8:	b923      	cbnz	r3, 80073f4 <__register_exitproc+0x58>
 80073ea:	f8d8 0000 	ldr.w	r0, [r8]
 80073ee:	f000 f9f0 	bl	80077d2 <__retarget_lock_release>
 80073f2:	e7f0      	b.n	80073d6 <__register_exitproc+0x3a>
 80073f4:	f44f 7084 	mov.w	r0, #264	; 0x108
 80073f8:	f7ff fa8e 	bl	8006918 <malloc>
 80073fc:	2800      	cmp	r0, #0
 80073fe:	d0f4      	beq.n	80073ea <__register_exitproc+0x4e>
 8007400:	2300      	movs	r3, #0
 8007402:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8007406:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 800740a:	6863      	ldr	r3, [r4, #4]
 800740c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8007410:	2201      	movs	r2, #1
 8007412:	409a      	lsls	r2, r3
 8007414:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8007418:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 800741c:	4313      	orrs	r3, r2
 800741e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8007422:	2e02      	cmp	r6, #2
 8007424:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8007428:	bf02      	ittt	eq
 800742a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 800742e:	4313      	orreq	r3, r2
 8007430:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8007434:	6863      	ldr	r3, [r4, #4]
 8007436:	f8d8 0000 	ldr.w	r0, [r8]
 800743a:	1c5a      	adds	r2, r3, #1
 800743c:	3302      	adds	r3, #2
 800743e:	6062      	str	r2, [r4, #4]
 8007440:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8007444:	f000 f9c6 	bl	80077d4 <__retarget_lock_release_recursive>
 8007448:	2000      	movs	r0, #0
 800744a:	e7c6      	b.n	80073da <__register_exitproc+0x3e>
 800744c:	200003e0 	.word	0x200003e0
 8007450:	20000354 	.word	0x20000354
 8007454:	00000000 	.word	0x00000000
 8007458:	08006919 	.word	0x08006919
 800745c:	20000078 	.word	0x20000078

08007460 <__sflush_r>:
 8007460:	898a      	ldrh	r2, [r1, #12]
 8007462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007466:	4605      	mov	r5, r0
 8007468:	0710      	lsls	r0, r2, #28
 800746a:	460c      	mov	r4, r1
 800746c:	d458      	bmi.n	8007520 <__sflush_r+0xc0>
 800746e:	684b      	ldr	r3, [r1, #4]
 8007470:	2b00      	cmp	r3, #0
 8007472:	dc05      	bgt.n	8007480 <__sflush_r+0x20>
 8007474:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007476:	2b00      	cmp	r3, #0
 8007478:	dc02      	bgt.n	8007480 <__sflush_r+0x20>
 800747a:	2000      	movs	r0, #0
 800747c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007480:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007482:	2e00      	cmp	r6, #0
 8007484:	d0f9      	beq.n	800747a <__sflush_r+0x1a>
 8007486:	2300      	movs	r3, #0
 8007488:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800748c:	682f      	ldr	r7, [r5, #0]
 800748e:	602b      	str	r3, [r5, #0]
 8007490:	d032      	beq.n	80074f8 <__sflush_r+0x98>
 8007492:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007494:	89a3      	ldrh	r3, [r4, #12]
 8007496:	075a      	lsls	r2, r3, #29
 8007498:	d505      	bpl.n	80074a6 <__sflush_r+0x46>
 800749a:	6863      	ldr	r3, [r4, #4]
 800749c:	1ac0      	subs	r0, r0, r3
 800749e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80074a0:	b10b      	cbz	r3, 80074a6 <__sflush_r+0x46>
 80074a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80074a4:	1ac0      	subs	r0, r0, r3
 80074a6:	2300      	movs	r3, #0
 80074a8:	4602      	mov	r2, r0
 80074aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80074ac:	6a21      	ldr	r1, [r4, #32]
 80074ae:	4628      	mov	r0, r5
 80074b0:	47b0      	blx	r6
 80074b2:	1c43      	adds	r3, r0, #1
 80074b4:	89a3      	ldrh	r3, [r4, #12]
 80074b6:	d106      	bne.n	80074c6 <__sflush_r+0x66>
 80074b8:	6829      	ldr	r1, [r5, #0]
 80074ba:	291d      	cmp	r1, #29
 80074bc:	d82c      	bhi.n	8007518 <__sflush_r+0xb8>
 80074be:	4a2a      	ldr	r2, [pc, #168]	; (8007568 <__sflush_r+0x108>)
 80074c0:	40ca      	lsrs	r2, r1
 80074c2:	07d6      	lsls	r6, r2, #31
 80074c4:	d528      	bpl.n	8007518 <__sflush_r+0xb8>
 80074c6:	2200      	movs	r2, #0
 80074c8:	6062      	str	r2, [r4, #4]
 80074ca:	04d9      	lsls	r1, r3, #19
 80074cc:	6922      	ldr	r2, [r4, #16]
 80074ce:	6022      	str	r2, [r4, #0]
 80074d0:	d504      	bpl.n	80074dc <__sflush_r+0x7c>
 80074d2:	1c42      	adds	r2, r0, #1
 80074d4:	d101      	bne.n	80074da <__sflush_r+0x7a>
 80074d6:	682b      	ldr	r3, [r5, #0]
 80074d8:	b903      	cbnz	r3, 80074dc <__sflush_r+0x7c>
 80074da:	6560      	str	r0, [r4, #84]	; 0x54
 80074dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074de:	602f      	str	r7, [r5, #0]
 80074e0:	2900      	cmp	r1, #0
 80074e2:	d0ca      	beq.n	800747a <__sflush_r+0x1a>
 80074e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074e8:	4299      	cmp	r1, r3
 80074ea:	d002      	beq.n	80074f2 <__sflush_r+0x92>
 80074ec:	4628      	mov	r0, r5
 80074ee:	f7ff fa53 	bl	8006998 <_free_r>
 80074f2:	2000      	movs	r0, #0
 80074f4:	6360      	str	r0, [r4, #52]	; 0x34
 80074f6:	e7c1      	b.n	800747c <__sflush_r+0x1c>
 80074f8:	6a21      	ldr	r1, [r4, #32]
 80074fa:	2301      	movs	r3, #1
 80074fc:	4628      	mov	r0, r5
 80074fe:	47b0      	blx	r6
 8007500:	1c41      	adds	r1, r0, #1
 8007502:	d1c7      	bne.n	8007494 <__sflush_r+0x34>
 8007504:	682b      	ldr	r3, [r5, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d0c4      	beq.n	8007494 <__sflush_r+0x34>
 800750a:	2b1d      	cmp	r3, #29
 800750c:	d001      	beq.n	8007512 <__sflush_r+0xb2>
 800750e:	2b16      	cmp	r3, #22
 8007510:	d101      	bne.n	8007516 <__sflush_r+0xb6>
 8007512:	602f      	str	r7, [r5, #0]
 8007514:	e7b1      	b.n	800747a <__sflush_r+0x1a>
 8007516:	89a3      	ldrh	r3, [r4, #12]
 8007518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800751c:	81a3      	strh	r3, [r4, #12]
 800751e:	e7ad      	b.n	800747c <__sflush_r+0x1c>
 8007520:	690f      	ldr	r7, [r1, #16]
 8007522:	2f00      	cmp	r7, #0
 8007524:	d0a9      	beq.n	800747a <__sflush_r+0x1a>
 8007526:	0793      	lsls	r3, r2, #30
 8007528:	680e      	ldr	r6, [r1, #0]
 800752a:	bf08      	it	eq
 800752c:	694b      	ldreq	r3, [r1, #20]
 800752e:	600f      	str	r7, [r1, #0]
 8007530:	bf18      	it	ne
 8007532:	2300      	movne	r3, #0
 8007534:	eba6 0807 	sub.w	r8, r6, r7
 8007538:	608b      	str	r3, [r1, #8]
 800753a:	f1b8 0f00 	cmp.w	r8, #0
 800753e:	dd9c      	ble.n	800747a <__sflush_r+0x1a>
 8007540:	6a21      	ldr	r1, [r4, #32]
 8007542:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007544:	4643      	mov	r3, r8
 8007546:	463a      	mov	r2, r7
 8007548:	4628      	mov	r0, r5
 800754a:	47b0      	blx	r6
 800754c:	2800      	cmp	r0, #0
 800754e:	dc06      	bgt.n	800755e <__sflush_r+0xfe>
 8007550:	89a3      	ldrh	r3, [r4, #12]
 8007552:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007556:	81a3      	strh	r3, [r4, #12]
 8007558:	f04f 30ff 	mov.w	r0, #4294967295
 800755c:	e78e      	b.n	800747c <__sflush_r+0x1c>
 800755e:	4407      	add	r7, r0
 8007560:	eba8 0800 	sub.w	r8, r8, r0
 8007564:	e7e9      	b.n	800753a <__sflush_r+0xda>
 8007566:	bf00      	nop
 8007568:	20400001 	.word	0x20400001

0800756c <_fflush_r>:
 800756c:	b538      	push	{r3, r4, r5, lr}
 800756e:	690b      	ldr	r3, [r1, #16]
 8007570:	4605      	mov	r5, r0
 8007572:	460c      	mov	r4, r1
 8007574:	b913      	cbnz	r3, 800757c <_fflush_r+0x10>
 8007576:	2500      	movs	r5, #0
 8007578:	4628      	mov	r0, r5
 800757a:	bd38      	pop	{r3, r4, r5, pc}
 800757c:	b118      	cbz	r0, 8007586 <_fflush_r+0x1a>
 800757e:	6983      	ldr	r3, [r0, #24]
 8007580:	b90b      	cbnz	r3, 8007586 <_fflush_r+0x1a>
 8007582:	f000 f887 	bl	8007694 <__sinit>
 8007586:	4b14      	ldr	r3, [pc, #80]	; (80075d8 <_fflush_r+0x6c>)
 8007588:	429c      	cmp	r4, r3
 800758a:	d11b      	bne.n	80075c4 <_fflush_r+0x58>
 800758c:	686c      	ldr	r4, [r5, #4]
 800758e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d0ef      	beq.n	8007576 <_fflush_r+0xa>
 8007596:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007598:	07d0      	lsls	r0, r2, #31
 800759a:	d404      	bmi.n	80075a6 <_fflush_r+0x3a>
 800759c:	0599      	lsls	r1, r3, #22
 800759e:	d402      	bmi.n	80075a6 <_fflush_r+0x3a>
 80075a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075a2:	f000 f915 	bl	80077d0 <__retarget_lock_acquire_recursive>
 80075a6:	4628      	mov	r0, r5
 80075a8:	4621      	mov	r1, r4
 80075aa:	f7ff ff59 	bl	8007460 <__sflush_r>
 80075ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80075b0:	07da      	lsls	r2, r3, #31
 80075b2:	4605      	mov	r5, r0
 80075b4:	d4e0      	bmi.n	8007578 <_fflush_r+0xc>
 80075b6:	89a3      	ldrh	r3, [r4, #12]
 80075b8:	059b      	lsls	r3, r3, #22
 80075ba:	d4dd      	bmi.n	8007578 <_fflush_r+0xc>
 80075bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075be:	f000 f909 	bl	80077d4 <__retarget_lock_release_recursive>
 80075c2:	e7d9      	b.n	8007578 <_fflush_r+0xc>
 80075c4:	4b05      	ldr	r3, [pc, #20]	; (80075dc <_fflush_r+0x70>)
 80075c6:	429c      	cmp	r4, r3
 80075c8:	d101      	bne.n	80075ce <_fflush_r+0x62>
 80075ca:	68ac      	ldr	r4, [r5, #8]
 80075cc:	e7df      	b.n	800758e <_fflush_r+0x22>
 80075ce:	4b04      	ldr	r3, [pc, #16]	; (80075e0 <_fflush_r+0x74>)
 80075d0:	429c      	cmp	r4, r3
 80075d2:	bf08      	it	eq
 80075d4:	68ec      	ldreq	r4, [r5, #12]
 80075d6:	e7da      	b.n	800758e <_fflush_r+0x22>
 80075d8:	08008464 	.word	0x08008464
 80075dc:	08008484 	.word	0x08008484
 80075e0:	08008444 	.word	0x08008444

080075e4 <std>:
 80075e4:	2300      	movs	r3, #0
 80075e6:	b510      	push	{r4, lr}
 80075e8:	4604      	mov	r4, r0
 80075ea:	e9c0 3300 	strd	r3, r3, [r0]
 80075ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075f2:	6083      	str	r3, [r0, #8]
 80075f4:	8181      	strh	r1, [r0, #12]
 80075f6:	6643      	str	r3, [r0, #100]	; 0x64
 80075f8:	81c2      	strh	r2, [r0, #14]
 80075fa:	6183      	str	r3, [r0, #24]
 80075fc:	4619      	mov	r1, r3
 80075fe:	2208      	movs	r2, #8
 8007600:	305c      	adds	r0, #92	; 0x5c
 8007602:	f7ff f9c1 	bl	8006988 <memset>
 8007606:	4b05      	ldr	r3, [pc, #20]	; (800761c <std+0x38>)
 8007608:	6263      	str	r3, [r4, #36]	; 0x24
 800760a:	4b05      	ldr	r3, [pc, #20]	; (8007620 <std+0x3c>)
 800760c:	62a3      	str	r3, [r4, #40]	; 0x28
 800760e:	4b05      	ldr	r3, [pc, #20]	; (8007624 <std+0x40>)
 8007610:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007612:	4b05      	ldr	r3, [pc, #20]	; (8007628 <std+0x44>)
 8007614:	6224      	str	r4, [r4, #32]
 8007616:	6323      	str	r3, [r4, #48]	; 0x30
 8007618:	bd10      	pop	{r4, pc}
 800761a:	bf00      	nop
 800761c:	08007bcd 	.word	0x08007bcd
 8007620:	08007bef 	.word	0x08007bef
 8007624:	08007c27 	.word	0x08007c27
 8007628:	08007c4b 	.word	0x08007c4b

0800762c <_cleanup_r>:
 800762c:	4901      	ldr	r1, [pc, #4]	; (8007634 <_cleanup_r+0x8>)
 800762e:	f000 b8af 	b.w	8007790 <_fwalk_reent>
 8007632:	bf00      	nop
 8007634:	0800756d 	.word	0x0800756d

08007638 <__sfmoreglue>:
 8007638:	b570      	push	{r4, r5, r6, lr}
 800763a:	2268      	movs	r2, #104	; 0x68
 800763c:	1e4d      	subs	r5, r1, #1
 800763e:	4355      	muls	r5, r2
 8007640:	460e      	mov	r6, r1
 8007642:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007646:	f7ff fa13 	bl	8006a70 <_malloc_r>
 800764a:	4604      	mov	r4, r0
 800764c:	b140      	cbz	r0, 8007660 <__sfmoreglue+0x28>
 800764e:	2100      	movs	r1, #0
 8007650:	e9c0 1600 	strd	r1, r6, [r0]
 8007654:	300c      	adds	r0, #12
 8007656:	60a0      	str	r0, [r4, #8]
 8007658:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800765c:	f7ff f994 	bl	8006988 <memset>
 8007660:	4620      	mov	r0, r4
 8007662:	bd70      	pop	{r4, r5, r6, pc}

08007664 <__sfp_lock_acquire>:
 8007664:	4801      	ldr	r0, [pc, #4]	; (800766c <__sfp_lock_acquire+0x8>)
 8007666:	f000 b8b3 	b.w	80077d0 <__retarget_lock_acquire_recursive>
 800766a:	bf00      	nop
 800766c:	200003e6 	.word	0x200003e6

08007670 <__sfp_lock_release>:
 8007670:	4801      	ldr	r0, [pc, #4]	; (8007678 <__sfp_lock_release+0x8>)
 8007672:	f000 b8af 	b.w	80077d4 <__retarget_lock_release_recursive>
 8007676:	bf00      	nop
 8007678:	200003e6 	.word	0x200003e6

0800767c <__sinit_lock_acquire>:
 800767c:	4801      	ldr	r0, [pc, #4]	; (8007684 <__sinit_lock_acquire+0x8>)
 800767e:	f000 b8a7 	b.w	80077d0 <__retarget_lock_acquire_recursive>
 8007682:	bf00      	nop
 8007684:	200003e7 	.word	0x200003e7

08007688 <__sinit_lock_release>:
 8007688:	4801      	ldr	r0, [pc, #4]	; (8007690 <__sinit_lock_release+0x8>)
 800768a:	f000 b8a3 	b.w	80077d4 <__retarget_lock_release_recursive>
 800768e:	bf00      	nop
 8007690:	200003e7 	.word	0x200003e7

08007694 <__sinit>:
 8007694:	b510      	push	{r4, lr}
 8007696:	4604      	mov	r4, r0
 8007698:	f7ff fff0 	bl	800767c <__sinit_lock_acquire>
 800769c:	69a3      	ldr	r3, [r4, #24]
 800769e:	b11b      	cbz	r3, 80076a8 <__sinit+0x14>
 80076a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076a4:	f7ff bff0 	b.w	8007688 <__sinit_lock_release>
 80076a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80076ac:	6523      	str	r3, [r4, #80]	; 0x50
 80076ae:	4b13      	ldr	r3, [pc, #76]	; (80076fc <__sinit+0x68>)
 80076b0:	4a13      	ldr	r2, [pc, #76]	; (8007700 <__sinit+0x6c>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80076b6:	42a3      	cmp	r3, r4
 80076b8:	bf04      	itt	eq
 80076ba:	2301      	moveq	r3, #1
 80076bc:	61a3      	streq	r3, [r4, #24]
 80076be:	4620      	mov	r0, r4
 80076c0:	f000 f820 	bl	8007704 <__sfp>
 80076c4:	6060      	str	r0, [r4, #4]
 80076c6:	4620      	mov	r0, r4
 80076c8:	f000 f81c 	bl	8007704 <__sfp>
 80076cc:	60a0      	str	r0, [r4, #8]
 80076ce:	4620      	mov	r0, r4
 80076d0:	f000 f818 	bl	8007704 <__sfp>
 80076d4:	2200      	movs	r2, #0
 80076d6:	60e0      	str	r0, [r4, #12]
 80076d8:	2104      	movs	r1, #4
 80076da:	6860      	ldr	r0, [r4, #4]
 80076dc:	f7ff ff82 	bl	80075e4 <std>
 80076e0:	68a0      	ldr	r0, [r4, #8]
 80076e2:	2201      	movs	r2, #1
 80076e4:	2109      	movs	r1, #9
 80076e6:	f7ff ff7d 	bl	80075e4 <std>
 80076ea:	68e0      	ldr	r0, [r4, #12]
 80076ec:	2202      	movs	r2, #2
 80076ee:	2112      	movs	r1, #18
 80076f0:	f7ff ff78 	bl	80075e4 <std>
 80076f4:	2301      	movs	r3, #1
 80076f6:	61a3      	str	r3, [r4, #24]
 80076f8:	e7d2      	b.n	80076a0 <__sinit+0xc>
 80076fa:	bf00      	nop
 80076fc:	0800840c 	.word	0x0800840c
 8007700:	0800762d 	.word	0x0800762d

08007704 <__sfp>:
 8007704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007706:	4607      	mov	r7, r0
 8007708:	f7ff ffac 	bl	8007664 <__sfp_lock_acquire>
 800770c:	4b1e      	ldr	r3, [pc, #120]	; (8007788 <__sfp+0x84>)
 800770e:	681e      	ldr	r6, [r3, #0]
 8007710:	69b3      	ldr	r3, [r6, #24]
 8007712:	b913      	cbnz	r3, 800771a <__sfp+0x16>
 8007714:	4630      	mov	r0, r6
 8007716:	f7ff ffbd 	bl	8007694 <__sinit>
 800771a:	3648      	adds	r6, #72	; 0x48
 800771c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007720:	3b01      	subs	r3, #1
 8007722:	d503      	bpl.n	800772c <__sfp+0x28>
 8007724:	6833      	ldr	r3, [r6, #0]
 8007726:	b30b      	cbz	r3, 800776c <__sfp+0x68>
 8007728:	6836      	ldr	r6, [r6, #0]
 800772a:	e7f7      	b.n	800771c <__sfp+0x18>
 800772c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007730:	b9d5      	cbnz	r5, 8007768 <__sfp+0x64>
 8007732:	4b16      	ldr	r3, [pc, #88]	; (800778c <__sfp+0x88>)
 8007734:	60e3      	str	r3, [r4, #12]
 8007736:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800773a:	6665      	str	r5, [r4, #100]	; 0x64
 800773c:	f000 f847 	bl	80077ce <__retarget_lock_init_recursive>
 8007740:	f7ff ff96 	bl	8007670 <__sfp_lock_release>
 8007744:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007748:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800774c:	6025      	str	r5, [r4, #0]
 800774e:	61a5      	str	r5, [r4, #24]
 8007750:	2208      	movs	r2, #8
 8007752:	4629      	mov	r1, r5
 8007754:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007758:	f7ff f916 	bl	8006988 <memset>
 800775c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007760:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007764:	4620      	mov	r0, r4
 8007766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007768:	3468      	adds	r4, #104	; 0x68
 800776a:	e7d9      	b.n	8007720 <__sfp+0x1c>
 800776c:	2104      	movs	r1, #4
 800776e:	4638      	mov	r0, r7
 8007770:	f7ff ff62 	bl	8007638 <__sfmoreglue>
 8007774:	4604      	mov	r4, r0
 8007776:	6030      	str	r0, [r6, #0]
 8007778:	2800      	cmp	r0, #0
 800777a:	d1d5      	bne.n	8007728 <__sfp+0x24>
 800777c:	f7ff ff78 	bl	8007670 <__sfp_lock_release>
 8007780:	230c      	movs	r3, #12
 8007782:	603b      	str	r3, [r7, #0]
 8007784:	e7ee      	b.n	8007764 <__sfp+0x60>
 8007786:	bf00      	nop
 8007788:	0800840c 	.word	0x0800840c
 800778c:	ffff0001 	.word	0xffff0001

08007790 <_fwalk_reent>:
 8007790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007794:	4606      	mov	r6, r0
 8007796:	4688      	mov	r8, r1
 8007798:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800779c:	2700      	movs	r7, #0
 800779e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80077a2:	f1b9 0901 	subs.w	r9, r9, #1
 80077a6:	d505      	bpl.n	80077b4 <_fwalk_reent+0x24>
 80077a8:	6824      	ldr	r4, [r4, #0]
 80077aa:	2c00      	cmp	r4, #0
 80077ac:	d1f7      	bne.n	800779e <_fwalk_reent+0xe>
 80077ae:	4638      	mov	r0, r7
 80077b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077b4:	89ab      	ldrh	r3, [r5, #12]
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d907      	bls.n	80077ca <_fwalk_reent+0x3a>
 80077ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80077be:	3301      	adds	r3, #1
 80077c0:	d003      	beq.n	80077ca <_fwalk_reent+0x3a>
 80077c2:	4629      	mov	r1, r5
 80077c4:	4630      	mov	r0, r6
 80077c6:	47c0      	blx	r8
 80077c8:	4307      	orrs	r7, r0
 80077ca:	3568      	adds	r5, #104	; 0x68
 80077cc:	e7e9      	b.n	80077a2 <_fwalk_reent+0x12>

080077ce <__retarget_lock_init_recursive>:
 80077ce:	4770      	bx	lr

080077d0 <__retarget_lock_acquire_recursive>:
 80077d0:	4770      	bx	lr

080077d2 <__retarget_lock_release>:
 80077d2:	4770      	bx	lr

080077d4 <__retarget_lock_release_recursive>:
 80077d4:	4770      	bx	lr

080077d6 <__swhatbuf_r>:
 80077d6:	b570      	push	{r4, r5, r6, lr}
 80077d8:	460e      	mov	r6, r1
 80077da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077de:	2900      	cmp	r1, #0
 80077e0:	b096      	sub	sp, #88	; 0x58
 80077e2:	4614      	mov	r4, r2
 80077e4:	461d      	mov	r5, r3
 80077e6:	da08      	bge.n	80077fa <__swhatbuf_r+0x24>
 80077e8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80077ec:	2200      	movs	r2, #0
 80077ee:	602a      	str	r2, [r5, #0]
 80077f0:	061a      	lsls	r2, r3, #24
 80077f2:	d410      	bmi.n	8007816 <__swhatbuf_r+0x40>
 80077f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077f8:	e00e      	b.n	8007818 <__swhatbuf_r+0x42>
 80077fa:	466a      	mov	r2, sp
 80077fc:	f000 fa4c 	bl	8007c98 <_fstat_r>
 8007800:	2800      	cmp	r0, #0
 8007802:	dbf1      	blt.n	80077e8 <__swhatbuf_r+0x12>
 8007804:	9a01      	ldr	r2, [sp, #4]
 8007806:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800780a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800780e:	425a      	negs	r2, r3
 8007810:	415a      	adcs	r2, r3
 8007812:	602a      	str	r2, [r5, #0]
 8007814:	e7ee      	b.n	80077f4 <__swhatbuf_r+0x1e>
 8007816:	2340      	movs	r3, #64	; 0x40
 8007818:	2000      	movs	r0, #0
 800781a:	6023      	str	r3, [r4, #0]
 800781c:	b016      	add	sp, #88	; 0x58
 800781e:	bd70      	pop	{r4, r5, r6, pc}

08007820 <__smakebuf_r>:
 8007820:	898b      	ldrh	r3, [r1, #12]
 8007822:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007824:	079d      	lsls	r5, r3, #30
 8007826:	4606      	mov	r6, r0
 8007828:	460c      	mov	r4, r1
 800782a:	d507      	bpl.n	800783c <__smakebuf_r+0x1c>
 800782c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007830:	6023      	str	r3, [r4, #0]
 8007832:	6123      	str	r3, [r4, #16]
 8007834:	2301      	movs	r3, #1
 8007836:	6163      	str	r3, [r4, #20]
 8007838:	b002      	add	sp, #8
 800783a:	bd70      	pop	{r4, r5, r6, pc}
 800783c:	ab01      	add	r3, sp, #4
 800783e:	466a      	mov	r2, sp
 8007840:	f7ff ffc9 	bl	80077d6 <__swhatbuf_r>
 8007844:	9900      	ldr	r1, [sp, #0]
 8007846:	4605      	mov	r5, r0
 8007848:	4630      	mov	r0, r6
 800784a:	f7ff f911 	bl	8006a70 <_malloc_r>
 800784e:	b948      	cbnz	r0, 8007864 <__smakebuf_r+0x44>
 8007850:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007854:	059a      	lsls	r2, r3, #22
 8007856:	d4ef      	bmi.n	8007838 <__smakebuf_r+0x18>
 8007858:	f023 0303 	bic.w	r3, r3, #3
 800785c:	f043 0302 	orr.w	r3, r3, #2
 8007860:	81a3      	strh	r3, [r4, #12]
 8007862:	e7e3      	b.n	800782c <__smakebuf_r+0xc>
 8007864:	4b0d      	ldr	r3, [pc, #52]	; (800789c <__smakebuf_r+0x7c>)
 8007866:	62b3      	str	r3, [r6, #40]	; 0x28
 8007868:	89a3      	ldrh	r3, [r4, #12]
 800786a:	6020      	str	r0, [r4, #0]
 800786c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007870:	81a3      	strh	r3, [r4, #12]
 8007872:	9b00      	ldr	r3, [sp, #0]
 8007874:	6163      	str	r3, [r4, #20]
 8007876:	9b01      	ldr	r3, [sp, #4]
 8007878:	6120      	str	r0, [r4, #16]
 800787a:	b15b      	cbz	r3, 8007894 <__smakebuf_r+0x74>
 800787c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007880:	4630      	mov	r0, r6
 8007882:	f000 fa1b 	bl	8007cbc <_isatty_r>
 8007886:	b128      	cbz	r0, 8007894 <__smakebuf_r+0x74>
 8007888:	89a3      	ldrh	r3, [r4, #12]
 800788a:	f023 0303 	bic.w	r3, r3, #3
 800788e:	f043 0301 	orr.w	r3, r3, #1
 8007892:	81a3      	strh	r3, [r4, #12]
 8007894:	89a0      	ldrh	r0, [r4, #12]
 8007896:	4305      	orrs	r5, r0
 8007898:	81a5      	strh	r5, [r4, #12]
 800789a:	e7cd      	b.n	8007838 <__smakebuf_r+0x18>
 800789c:	0800762d 	.word	0x0800762d

080078a0 <__malloc_lock>:
 80078a0:	4801      	ldr	r0, [pc, #4]	; (80078a8 <__malloc_lock+0x8>)
 80078a2:	f7ff bf95 	b.w	80077d0 <__retarget_lock_acquire_recursive>
 80078a6:	bf00      	nop
 80078a8:	200003e5 	.word	0x200003e5

080078ac <__malloc_unlock>:
 80078ac:	4801      	ldr	r0, [pc, #4]	; (80078b4 <__malloc_unlock+0x8>)
 80078ae:	f7ff bf91 	b.w	80077d4 <__retarget_lock_release_recursive>
 80078b2:	bf00      	nop
 80078b4:	200003e5 	.word	0x200003e5

080078b8 <_realloc_r>:
 80078b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078bc:	4680      	mov	r8, r0
 80078be:	4614      	mov	r4, r2
 80078c0:	460e      	mov	r6, r1
 80078c2:	b921      	cbnz	r1, 80078ce <_realloc_r+0x16>
 80078c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078c8:	4611      	mov	r1, r2
 80078ca:	f7ff b8d1 	b.w	8006a70 <_malloc_r>
 80078ce:	b92a      	cbnz	r2, 80078dc <_realloc_r+0x24>
 80078d0:	f7ff f862 	bl	8006998 <_free_r>
 80078d4:	4625      	mov	r5, r4
 80078d6:	4628      	mov	r0, r5
 80078d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078dc:	f000 fa10 	bl	8007d00 <_malloc_usable_size_r>
 80078e0:	4284      	cmp	r4, r0
 80078e2:	4607      	mov	r7, r0
 80078e4:	d802      	bhi.n	80078ec <_realloc_r+0x34>
 80078e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80078ea:	d812      	bhi.n	8007912 <_realloc_r+0x5a>
 80078ec:	4621      	mov	r1, r4
 80078ee:	4640      	mov	r0, r8
 80078f0:	f7ff f8be 	bl	8006a70 <_malloc_r>
 80078f4:	4605      	mov	r5, r0
 80078f6:	2800      	cmp	r0, #0
 80078f8:	d0ed      	beq.n	80078d6 <_realloc_r+0x1e>
 80078fa:	42bc      	cmp	r4, r7
 80078fc:	4622      	mov	r2, r4
 80078fe:	4631      	mov	r1, r6
 8007900:	bf28      	it	cs
 8007902:	463a      	movcs	r2, r7
 8007904:	f7ff f818 	bl	8006938 <memcpy>
 8007908:	4631      	mov	r1, r6
 800790a:	4640      	mov	r0, r8
 800790c:	f7ff f844 	bl	8006998 <_free_r>
 8007910:	e7e1      	b.n	80078d6 <_realloc_r+0x1e>
 8007912:	4635      	mov	r5, r6
 8007914:	e7df      	b.n	80078d6 <_realloc_r+0x1e>

08007916 <__ssputs_r>:
 8007916:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800791a:	688e      	ldr	r6, [r1, #8]
 800791c:	429e      	cmp	r6, r3
 800791e:	4682      	mov	sl, r0
 8007920:	460c      	mov	r4, r1
 8007922:	4690      	mov	r8, r2
 8007924:	461f      	mov	r7, r3
 8007926:	d838      	bhi.n	800799a <__ssputs_r+0x84>
 8007928:	898a      	ldrh	r2, [r1, #12]
 800792a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800792e:	d032      	beq.n	8007996 <__ssputs_r+0x80>
 8007930:	6825      	ldr	r5, [r4, #0]
 8007932:	6909      	ldr	r1, [r1, #16]
 8007934:	eba5 0901 	sub.w	r9, r5, r1
 8007938:	6965      	ldr	r5, [r4, #20]
 800793a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800793e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007942:	3301      	adds	r3, #1
 8007944:	444b      	add	r3, r9
 8007946:	106d      	asrs	r5, r5, #1
 8007948:	429d      	cmp	r5, r3
 800794a:	bf38      	it	cc
 800794c:	461d      	movcc	r5, r3
 800794e:	0553      	lsls	r3, r2, #21
 8007950:	d531      	bpl.n	80079b6 <__ssputs_r+0xa0>
 8007952:	4629      	mov	r1, r5
 8007954:	f7ff f88c 	bl	8006a70 <_malloc_r>
 8007958:	4606      	mov	r6, r0
 800795a:	b950      	cbnz	r0, 8007972 <__ssputs_r+0x5c>
 800795c:	230c      	movs	r3, #12
 800795e:	f8ca 3000 	str.w	r3, [sl]
 8007962:	89a3      	ldrh	r3, [r4, #12]
 8007964:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007968:	81a3      	strh	r3, [r4, #12]
 800796a:	f04f 30ff 	mov.w	r0, #4294967295
 800796e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007972:	6921      	ldr	r1, [r4, #16]
 8007974:	464a      	mov	r2, r9
 8007976:	f7fe ffdf 	bl	8006938 <memcpy>
 800797a:	89a3      	ldrh	r3, [r4, #12]
 800797c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007984:	81a3      	strh	r3, [r4, #12]
 8007986:	6126      	str	r6, [r4, #16]
 8007988:	6165      	str	r5, [r4, #20]
 800798a:	444e      	add	r6, r9
 800798c:	eba5 0509 	sub.w	r5, r5, r9
 8007990:	6026      	str	r6, [r4, #0]
 8007992:	60a5      	str	r5, [r4, #8]
 8007994:	463e      	mov	r6, r7
 8007996:	42be      	cmp	r6, r7
 8007998:	d900      	bls.n	800799c <__ssputs_r+0x86>
 800799a:	463e      	mov	r6, r7
 800799c:	6820      	ldr	r0, [r4, #0]
 800799e:	4632      	mov	r2, r6
 80079a0:	4641      	mov	r1, r8
 80079a2:	f7fe ffd7 	bl	8006954 <memmove>
 80079a6:	68a3      	ldr	r3, [r4, #8]
 80079a8:	1b9b      	subs	r3, r3, r6
 80079aa:	60a3      	str	r3, [r4, #8]
 80079ac:	6823      	ldr	r3, [r4, #0]
 80079ae:	4433      	add	r3, r6
 80079b0:	6023      	str	r3, [r4, #0]
 80079b2:	2000      	movs	r0, #0
 80079b4:	e7db      	b.n	800796e <__ssputs_r+0x58>
 80079b6:	462a      	mov	r2, r5
 80079b8:	f7ff ff7e 	bl	80078b8 <_realloc_r>
 80079bc:	4606      	mov	r6, r0
 80079be:	2800      	cmp	r0, #0
 80079c0:	d1e1      	bne.n	8007986 <__ssputs_r+0x70>
 80079c2:	6921      	ldr	r1, [r4, #16]
 80079c4:	4650      	mov	r0, sl
 80079c6:	f7fe ffe7 	bl	8006998 <_free_r>
 80079ca:	e7c7      	b.n	800795c <__ssputs_r+0x46>

080079cc <_svfiprintf_r>:
 80079cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079d0:	4698      	mov	r8, r3
 80079d2:	898b      	ldrh	r3, [r1, #12]
 80079d4:	061b      	lsls	r3, r3, #24
 80079d6:	b09d      	sub	sp, #116	; 0x74
 80079d8:	4607      	mov	r7, r0
 80079da:	460d      	mov	r5, r1
 80079dc:	4614      	mov	r4, r2
 80079de:	d50e      	bpl.n	80079fe <_svfiprintf_r+0x32>
 80079e0:	690b      	ldr	r3, [r1, #16]
 80079e2:	b963      	cbnz	r3, 80079fe <_svfiprintf_r+0x32>
 80079e4:	2140      	movs	r1, #64	; 0x40
 80079e6:	f7ff f843 	bl	8006a70 <_malloc_r>
 80079ea:	6028      	str	r0, [r5, #0]
 80079ec:	6128      	str	r0, [r5, #16]
 80079ee:	b920      	cbnz	r0, 80079fa <_svfiprintf_r+0x2e>
 80079f0:	230c      	movs	r3, #12
 80079f2:	603b      	str	r3, [r7, #0]
 80079f4:	f04f 30ff 	mov.w	r0, #4294967295
 80079f8:	e0d1      	b.n	8007b9e <_svfiprintf_r+0x1d2>
 80079fa:	2340      	movs	r3, #64	; 0x40
 80079fc:	616b      	str	r3, [r5, #20]
 80079fe:	2300      	movs	r3, #0
 8007a00:	9309      	str	r3, [sp, #36]	; 0x24
 8007a02:	2320      	movs	r3, #32
 8007a04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a08:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a0c:	2330      	movs	r3, #48	; 0x30
 8007a0e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007bb8 <_svfiprintf_r+0x1ec>
 8007a12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a16:	f04f 0901 	mov.w	r9, #1
 8007a1a:	4623      	mov	r3, r4
 8007a1c:	469a      	mov	sl, r3
 8007a1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a22:	b10a      	cbz	r2, 8007a28 <_svfiprintf_r+0x5c>
 8007a24:	2a25      	cmp	r2, #37	; 0x25
 8007a26:	d1f9      	bne.n	8007a1c <_svfiprintf_r+0x50>
 8007a28:	ebba 0b04 	subs.w	fp, sl, r4
 8007a2c:	d00b      	beq.n	8007a46 <_svfiprintf_r+0x7a>
 8007a2e:	465b      	mov	r3, fp
 8007a30:	4622      	mov	r2, r4
 8007a32:	4629      	mov	r1, r5
 8007a34:	4638      	mov	r0, r7
 8007a36:	f7ff ff6e 	bl	8007916 <__ssputs_r>
 8007a3a:	3001      	adds	r0, #1
 8007a3c:	f000 80aa 	beq.w	8007b94 <_svfiprintf_r+0x1c8>
 8007a40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a42:	445a      	add	r2, fp
 8007a44:	9209      	str	r2, [sp, #36]	; 0x24
 8007a46:	f89a 3000 	ldrb.w	r3, [sl]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	f000 80a2 	beq.w	8007b94 <_svfiprintf_r+0x1c8>
 8007a50:	2300      	movs	r3, #0
 8007a52:	f04f 32ff 	mov.w	r2, #4294967295
 8007a56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a5a:	f10a 0a01 	add.w	sl, sl, #1
 8007a5e:	9304      	str	r3, [sp, #16]
 8007a60:	9307      	str	r3, [sp, #28]
 8007a62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a66:	931a      	str	r3, [sp, #104]	; 0x68
 8007a68:	4654      	mov	r4, sl
 8007a6a:	2205      	movs	r2, #5
 8007a6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a70:	4851      	ldr	r0, [pc, #324]	; (8007bb8 <_svfiprintf_r+0x1ec>)
 8007a72:	f7f8 fbb5 	bl	80001e0 <memchr>
 8007a76:	9a04      	ldr	r2, [sp, #16]
 8007a78:	b9d8      	cbnz	r0, 8007ab2 <_svfiprintf_r+0xe6>
 8007a7a:	06d0      	lsls	r0, r2, #27
 8007a7c:	bf44      	itt	mi
 8007a7e:	2320      	movmi	r3, #32
 8007a80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a84:	0711      	lsls	r1, r2, #28
 8007a86:	bf44      	itt	mi
 8007a88:	232b      	movmi	r3, #43	; 0x2b
 8007a8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a8e:	f89a 3000 	ldrb.w	r3, [sl]
 8007a92:	2b2a      	cmp	r3, #42	; 0x2a
 8007a94:	d015      	beq.n	8007ac2 <_svfiprintf_r+0xf6>
 8007a96:	9a07      	ldr	r2, [sp, #28]
 8007a98:	4654      	mov	r4, sl
 8007a9a:	2000      	movs	r0, #0
 8007a9c:	f04f 0c0a 	mov.w	ip, #10
 8007aa0:	4621      	mov	r1, r4
 8007aa2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007aa6:	3b30      	subs	r3, #48	; 0x30
 8007aa8:	2b09      	cmp	r3, #9
 8007aaa:	d94e      	bls.n	8007b4a <_svfiprintf_r+0x17e>
 8007aac:	b1b0      	cbz	r0, 8007adc <_svfiprintf_r+0x110>
 8007aae:	9207      	str	r2, [sp, #28]
 8007ab0:	e014      	b.n	8007adc <_svfiprintf_r+0x110>
 8007ab2:	eba0 0308 	sub.w	r3, r0, r8
 8007ab6:	fa09 f303 	lsl.w	r3, r9, r3
 8007aba:	4313      	orrs	r3, r2
 8007abc:	9304      	str	r3, [sp, #16]
 8007abe:	46a2      	mov	sl, r4
 8007ac0:	e7d2      	b.n	8007a68 <_svfiprintf_r+0x9c>
 8007ac2:	9b03      	ldr	r3, [sp, #12]
 8007ac4:	1d19      	adds	r1, r3, #4
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	9103      	str	r1, [sp, #12]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	bfbb      	ittet	lt
 8007ace:	425b      	neglt	r3, r3
 8007ad0:	f042 0202 	orrlt.w	r2, r2, #2
 8007ad4:	9307      	strge	r3, [sp, #28]
 8007ad6:	9307      	strlt	r3, [sp, #28]
 8007ad8:	bfb8      	it	lt
 8007ada:	9204      	strlt	r2, [sp, #16]
 8007adc:	7823      	ldrb	r3, [r4, #0]
 8007ade:	2b2e      	cmp	r3, #46	; 0x2e
 8007ae0:	d10c      	bne.n	8007afc <_svfiprintf_r+0x130>
 8007ae2:	7863      	ldrb	r3, [r4, #1]
 8007ae4:	2b2a      	cmp	r3, #42	; 0x2a
 8007ae6:	d135      	bne.n	8007b54 <_svfiprintf_r+0x188>
 8007ae8:	9b03      	ldr	r3, [sp, #12]
 8007aea:	1d1a      	adds	r2, r3, #4
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	9203      	str	r2, [sp, #12]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	bfb8      	it	lt
 8007af4:	f04f 33ff 	movlt.w	r3, #4294967295
 8007af8:	3402      	adds	r4, #2
 8007afa:	9305      	str	r3, [sp, #20]
 8007afc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007bc8 <_svfiprintf_r+0x1fc>
 8007b00:	7821      	ldrb	r1, [r4, #0]
 8007b02:	2203      	movs	r2, #3
 8007b04:	4650      	mov	r0, sl
 8007b06:	f7f8 fb6b 	bl	80001e0 <memchr>
 8007b0a:	b140      	cbz	r0, 8007b1e <_svfiprintf_r+0x152>
 8007b0c:	2340      	movs	r3, #64	; 0x40
 8007b0e:	eba0 000a 	sub.w	r0, r0, sl
 8007b12:	fa03 f000 	lsl.w	r0, r3, r0
 8007b16:	9b04      	ldr	r3, [sp, #16]
 8007b18:	4303      	orrs	r3, r0
 8007b1a:	3401      	adds	r4, #1
 8007b1c:	9304      	str	r3, [sp, #16]
 8007b1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b22:	4826      	ldr	r0, [pc, #152]	; (8007bbc <_svfiprintf_r+0x1f0>)
 8007b24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b28:	2206      	movs	r2, #6
 8007b2a:	f7f8 fb59 	bl	80001e0 <memchr>
 8007b2e:	2800      	cmp	r0, #0
 8007b30:	d038      	beq.n	8007ba4 <_svfiprintf_r+0x1d8>
 8007b32:	4b23      	ldr	r3, [pc, #140]	; (8007bc0 <_svfiprintf_r+0x1f4>)
 8007b34:	bb1b      	cbnz	r3, 8007b7e <_svfiprintf_r+0x1b2>
 8007b36:	9b03      	ldr	r3, [sp, #12]
 8007b38:	3307      	adds	r3, #7
 8007b3a:	f023 0307 	bic.w	r3, r3, #7
 8007b3e:	3308      	adds	r3, #8
 8007b40:	9303      	str	r3, [sp, #12]
 8007b42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b44:	4433      	add	r3, r6
 8007b46:	9309      	str	r3, [sp, #36]	; 0x24
 8007b48:	e767      	b.n	8007a1a <_svfiprintf_r+0x4e>
 8007b4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b4e:	460c      	mov	r4, r1
 8007b50:	2001      	movs	r0, #1
 8007b52:	e7a5      	b.n	8007aa0 <_svfiprintf_r+0xd4>
 8007b54:	2300      	movs	r3, #0
 8007b56:	3401      	adds	r4, #1
 8007b58:	9305      	str	r3, [sp, #20]
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	f04f 0c0a 	mov.w	ip, #10
 8007b60:	4620      	mov	r0, r4
 8007b62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b66:	3a30      	subs	r2, #48	; 0x30
 8007b68:	2a09      	cmp	r2, #9
 8007b6a:	d903      	bls.n	8007b74 <_svfiprintf_r+0x1a8>
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d0c5      	beq.n	8007afc <_svfiprintf_r+0x130>
 8007b70:	9105      	str	r1, [sp, #20]
 8007b72:	e7c3      	b.n	8007afc <_svfiprintf_r+0x130>
 8007b74:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b78:	4604      	mov	r4, r0
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e7f0      	b.n	8007b60 <_svfiprintf_r+0x194>
 8007b7e:	ab03      	add	r3, sp, #12
 8007b80:	9300      	str	r3, [sp, #0]
 8007b82:	462a      	mov	r2, r5
 8007b84:	4b0f      	ldr	r3, [pc, #60]	; (8007bc4 <_svfiprintf_r+0x1f8>)
 8007b86:	a904      	add	r1, sp, #16
 8007b88:	4638      	mov	r0, r7
 8007b8a:	f3af 8000 	nop.w
 8007b8e:	1c42      	adds	r2, r0, #1
 8007b90:	4606      	mov	r6, r0
 8007b92:	d1d6      	bne.n	8007b42 <_svfiprintf_r+0x176>
 8007b94:	89ab      	ldrh	r3, [r5, #12]
 8007b96:	065b      	lsls	r3, r3, #25
 8007b98:	f53f af2c 	bmi.w	80079f4 <_svfiprintf_r+0x28>
 8007b9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b9e:	b01d      	add	sp, #116	; 0x74
 8007ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ba4:	ab03      	add	r3, sp, #12
 8007ba6:	9300      	str	r3, [sp, #0]
 8007ba8:	462a      	mov	r2, r5
 8007baa:	4b06      	ldr	r3, [pc, #24]	; (8007bc4 <_svfiprintf_r+0x1f8>)
 8007bac:	a904      	add	r1, sp, #16
 8007bae:	4638      	mov	r0, r7
 8007bb0:	f7ff f99a 	bl	8006ee8 <_printf_i>
 8007bb4:	e7eb      	b.n	8007b8e <_svfiprintf_r+0x1c2>
 8007bb6:	bf00      	nop
 8007bb8:	08008410 	.word	0x08008410
 8007bbc:	0800841a 	.word	0x0800841a
 8007bc0:	00000000 	.word	0x00000000
 8007bc4:	08007917 	.word	0x08007917
 8007bc8:	08008416 	.word	0x08008416

08007bcc <__sread>:
 8007bcc:	b510      	push	{r4, lr}
 8007bce:	460c      	mov	r4, r1
 8007bd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bd4:	f000 f89c 	bl	8007d10 <_read_r>
 8007bd8:	2800      	cmp	r0, #0
 8007bda:	bfab      	itete	ge
 8007bdc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007bde:	89a3      	ldrhlt	r3, [r4, #12]
 8007be0:	181b      	addge	r3, r3, r0
 8007be2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007be6:	bfac      	ite	ge
 8007be8:	6563      	strge	r3, [r4, #84]	; 0x54
 8007bea:	81a3      	strhlt	r3, [r4, #12]
 8007bec:	bd10      	pop	{r4, pc}

08007bee <__swrite>:
 8007bee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bf2:	461f      	mov	r7, r3
 8007bf4:	898b      	ldrh	r3, [r1, #12]
 8007bf6:	05db      	lsls	r3, r3, #23
 8007bf8:	4605      	mov	r5, r0
 8007bfa:	460c      	mov	r4, r1
 8007bfc:	4616      	mov	r6, r2
 8007bfe:	d505      	bpl.n	8007c0c <__swrite+0x1e>
 8007c00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c04:	2302      	movs	r3, #2
 8007c06:	2200      	movs	r2, #0
 8007c08:	f000 f868 	bl	8007cdc <_lseek_r>
 8007c0c:	89a3      	ldrh	r3, [r4, #12]
 8007c0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c16:	81a3      	strh	r3, [r4, #12]
 8007c18:	4632      	mov	r2, r6
 8007c1a:	463b      	mov	r3, r7
 8007c1c:	4628      	mov	r0, r5
 8007c1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c22:	f000 b817 	b.w	8007c54 <_write_r>

08007c26 <__sseek>:
 8007c26:	b510      	push	{r4, lr}
 8007c28:	460c      	mov	r4, r1
 8007c2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c2e:	f000 f855 	bl	8007cdc <_lseek_r>
 8007c32:	1c43      	adds	r3, r0, #1
 8007c34:	89a3      	ldrh	r3, [r4, #12]
 8007c36:	bf15      	itete	ne
 8007c38:	6560      	strne	r0, [r4, #84]	; 0x54
 8007c3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007c3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007c42:	81a3      	strheq	r3, [r4, #12]
 8007c44:	bf18      	it	ne
 8007c46:	81a3      	strhne	r3, [r4, #12]
 8007c48:	bd10      	pop	{r4, pc}

08007c4a <__sclose>:
 8007c4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c4e:	f000 b813 	b.w	8007c78 <_close_r>
	...

08007c54 <_write_r>:
 8007c54:	b538      	push	{r3, r4, r5, lr}
 8007c56:	4d07      	ldr	r5, [pc, #28]	; (8007c74 <_write_r+0x20>)
 8007c58:	4604      	mov	r4, r0
 8007c5a:	4608      	mov	r0, r1
 8007c5c:	4611      	mov	r1, r2
 8007c5e:	2200      	movs	r2, #0
 8007c60:	602a      	str	r2, [r5, #0]
 8007c62:	461a      	mov	r2, r3
 8007c64:	f7f8 fe8d 	bl	8000982 <_write>
 8007c68:	1c43      	adds	r3, r0, #1
 8007c6a:	d102      	bne.n	8007c72 <_write_r+0x1e>
 8007c6c:	682b      	ldr	r3, [r5, #0]
 8007c6e:	b103      	cbz	r3, 8007c72 <_write_r+0x1e>
 8007c70:	6023      	str	r3, [r4, #0]
 8007c72:	bd38      	pop	{r3, r4, r5, pc}
 8007c74:	200003e8 	.word	0x200003e8

08007c78 <_close_r>:
 8007c78:	b538      	push	{r3, r4, r5, lr}
 8007c7a:	4d06      	ldr	r5, [pc, #24]	; (8007c94 <_close_r+0x1c>)
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	4604      	mov	r4, r0
 8007c80:	4608      	mov	r0, r1
 8007c82:	602b      	str	r3, [r5, #0]
 8007c84:	f7f8 fe99 	bl	80009ba <_close>
 8007c88:	1c43      	adds	r3, r0, #1
 8007c8a:	d102      	bne.n	8007c92 <_close_r+0x1a>
 8007c8c:	682b      	ldr	r3, [r5, #0]
 8007c8e:	b103      	cbz	r3, 8007c92 <_close_r+0x1a>
 8007c90:	6023      	str	r3, [r4, #0]
 8007c92:	bd38      	pop	{r3, r4, r5, pc}
 8007c94:	200003e8 	.word	0x200003e8

08007c98 <_fstat_r>:
 8007c98:	b538      	push	{r3, r4, r5, lr}
 8007c9a:	4d07      	ldr	r5, [pc, #28]	; (8007cb8 <_fstat_r+0x20>)
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	4604      	mov	r4, r0
 8007ca0:	4608      	mov	r0, r1
 8007ca2:	4611      	mov	r1, r2
 8007ca4:	602b      	str	r3, [r5, #0]
 8007ca6:	f7f8 fe94 	bl	80009d2 <_fstat>
 8007caa:	1c43      	adds	r3, r0, #1
 8007cac:	d102      	bne.n	8007cb4 <_fstat_r+0x1c>
 8007cae:	682b      	ldr	r3, [r5, #0]
 8007cb0:	b103      	cbz	r3, 8007cb4 <_fstat_r+0x1c>
 8007cb2:	6023      	str	r3, [r4, #0]
 8007cb4:	bd38      	pop	{r3, r4, r5, pc}
 8007cb6:	bf00      	nop
 8007cb8:	200003e8 	.word	0x200003e8

08007cbc <_isatty_r>:
 8007cbc:	b538      	push	{r3, r4, r5, lr}
 8007cbe:	4d06      	ldr	r5, [pc, #24]	; (8007cd8 <_isatty_r+0x1c>)
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	4604      	mov	r4, r0
 8007cc4:	4608      	mov	r0, r1
 8007cc6:	602b      	str	r3, [r5, #0]
 8007cc8:	f7f8 fe93 	bl	80009f2 <_isatty>
 8007ccc:	1c43      	adds	r3, r0, #1
 8007cce:	d102      	bne.n	8007cd6 <_isatty_r+0x1a>
 8007cd0:	682b      	ldr	r3, [r5, #0]
 8007cd2:	b103      	cbz	r3, 8007cd6 <_isatty_r+0x1a>
 8007cd4:	6023      	str	r3, [r4, #0]
 8007cd6:	bd38      	pop	{r3, r4, r5, pc}
 8007cd8:	200003e8 	.word	0x200003e8

08007cdc <_lseek_r>:
 8007cdc:	b538      	push	{r3, r4, r5, lr}
 8007cde:	4d07      	ldr	r5, [pc, #28]	; (8007cfc <_lseek_r+0x20>)
 8007ce0:	4604      	mov	r4, r0
 8007ce2:	4608      	mov	r0, r1
 8007ce4:	4611      	mov	r1, r2
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	602a      	str	r2, [r5, #0]
 8007cea:	461a      	mov	r2, r3
 8007cec:	f7f8 fe8c 	bl	8000a08 <_lseek>
 8007cf0:	1c43      	adds	r3, r0, #1
 8007cf2:	d102      	bne.n	8007cfa <_lseek_r+0x1e>
 8007cf4:	682b      	ldr	r3, [r5, #0]
 8007cf6:	b103      	cbz	r3, 8007cfa <_lseek_r+0x1e>
 8007cf8:	6023      	str	r3, [r4, #0]
 8007cfa:	bd38      	pop	{r3, r4, r5, pc}
 8007cfc:	200003e8 	.word	0x200003e8

08007d00 <_malloc_usable_size_r>:
 8007d00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d04:	1f18      	subs	r0, r3, #4
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	bfbc      	itt	lt
 8007d0a:	580b      	ldrlt	r3, [r1, r0]
 8007d0c:	18c0      	addlt	r0, r0, r3
 8007d0e:	4770      	bx	lr

08007d10 <_read_r>:
 8007d10:	b538      	push	{r3, r4, r5, lr}
 8007d12:	4d07      	ldr	r5, [pc, #28]	; (8007d30 <_read_r+0x20>)
 8007d14:	4604      	mov	r4, r0
 8007d16:	4608      	mov	r0, r1
 8007d18:	4611      	mov	r1, r2
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	602a      	str	r2, [r5, #0]
 8007d1e:	461a      	mov	r2, r3
 8007d20:	f7f8 fe12 	bl	8000948 <_read>
 8007d24:	1c43      	adds	r3, r0, #1
 8007d26:	d102      	bne.n	8007d2e <_read_r+0x1e>
 8007d28:	682b      	ldr	r3, [r5, #0]
 8007d2a:	b103      	cbz	r3, 8007d2e <_read_r+0x1e>
 8007d2c:	6023      	str	r3, [r4, #0]
 8007d2e:	bd38      	pop	{r3, r4, r5, pc}
 8007d30:	200003e8 	.word	0x200003e8

08007d34 <_init>:
 8007d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d36:	bf00      	nop
 8007d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d3a:	bc08      	pop	{r3}
 8007d3c:	469e      	mov	lr, r3
 8007d3e:	4770      	bx	lr

08007d40 <_fini>:
 8007d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d42:	bf00      	nop
 8007d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d46:	bc08      	pop	{r3}
 8007d48:	469e      	mov	lr, r3
 8007d4a:	4770      	bx	lr
