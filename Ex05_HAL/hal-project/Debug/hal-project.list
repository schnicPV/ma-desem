
hal-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007eb8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e4  08008048  08008048  00018048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800882c  0800882c  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800882c  0800882c  0001882c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008834  08008834  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008834  08008834  00018834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800883c  0800883c  0001883c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08008844  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000374  20000088  080088cc  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003fc  080088cc  000203fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b320  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006339  00000000  00000000  0003b3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001500  00000000  00000000  00041718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001348  00000000  00000000  00042c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c7b1  00000000  00000000  00043f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018d95  00000000  00000000  00070711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8399  00000000  00000000  000894a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018183f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006394  00000000  00000000  00181890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008030 	.word	0x08008030

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08008030 	.word	0x08008030

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f000 fade 	bl	8000b48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f80c 	bl	80005a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 f88c 	bl	80006ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000594:	f000 f85a 	bl	800064c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  XF_init(10);                      // Initialize XF
 8000598:	200a      	movs	r0, #10
 800059a:	f004 f83f 	bl	800461c <XF_init>
  Factory_buildApplication();       // Build application
 800059e:	f003 fb49 	bl	8003c34 <Factory_buildApplication>
  XF_start();                       // Start the XF (will not return)
 80005a2:	f004 f846 	bl	8004632 <XF_start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a6:	e7fe      	b.n	80005a6 <main+0x22>

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b096      	sub	sp, #88	; 0x58
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 0314 	add.w	r3, r7, #20
 80005b2:	2244      	movs	r2, #68	; 0x44
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f006 fb64 	bl	8006c84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	463b      	mov	r3, r7
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005ca:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005ce:	f000 fe95 	bl	80012fc <HAL_PWREx_ControlVoltageScaling>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005d8:	f000 f8d0 	bl	800077c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005dc:	2302      	movs	r3, #2
 80005de:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e6:	2310      	movs	r3, #16
 80005e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ea:	2302      	movs	r3, #2
 80005ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ee:	2302      	movs	r3, #2
 80005f0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005f2:	2301      	movs	r3, #1
 80005f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005f6:	230a      	movs	r3, #10
 80005f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005fa:	2307      	movs	r3, #7
 80005fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005fe:	2302      	movs	r3, #2
 8000600:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000602:	2302      	movs	r3, #2
 8000604:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000606:	f107 0314 	add.w	r3, r7, #20
 800060a:	4618      	mov	r0, r3
 800060c:	f000 fecc 	bl	80013a8 <HAL_RCC_OscConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000616:	f000 f8b1 	bl	800077c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061a:	230f      	movs	r3, #15
 800061c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061e:	2303      	movs	r3, #3
 8000620:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000626:	2300      	movs	r3, #0
 8000628:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800062a:	2300      	movs	r3, #0
 800062c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800062e:	463b      	mov	r3, r7
 8000630:	2104      	movs	r1, #4
 8000632:	4618      	mov	r0, r3
 8000634:	f001 faa0 	bl	8001b78 <HAL_RCC_ClockConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800063e:	f000 f89d 	bl	800077c <Error_Handler>
  }
}
 8000642:	bf00      	nop
 8000644:	3758      	adds	r7, #88	; 0x58
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
	...

0800064c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000650:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 8000652:	4a15      	ldr	r2, [pc, #84]	; (80006a8 <MX_USART2_UART_Init+0x5c>)
 8000654:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000656:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 8000658:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800065c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800065e:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 8000672:	220c      	movs	r2, #12
 8000674:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000676:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 8000678:	2200      	movs	r2, #0
 800067a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800067c:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 800067e:	2200      	movs	r2, #0
 8000680:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000682:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 8000684:	2200      	movs	r2, #0
 8000686:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 800068a:	2200      	movs	r2, #0
 800068c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800068e:	4805      	ldr	r0, [pc, #20]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 8000690:	f002 f934 	bl	80028fc <HAL_UART_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800069a:	f000 f86f 	bl	800077c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	200000a4 	.word	0x200000a4
 80006a8:	40004400 	.word	0x40004400

080006ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08a      	sub	sp, #40	; 0x28
 80006b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
 80006c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c2:	4b2b      	ldr	r3, [pc, #172]	; (8000770 <MX_GPIO_Init+0xc4>)
 80006c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c6:	4a2a      	ldr	r2, [pc, #168]	; (8000770 <MX_GPIO_Init+0xc4>)
 80006c8:	f043 0304 	orr.w	r3, r3, #4
 80006cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ce:	4b28      	ldr	r3, [pc, #160]	; (8000770 <MX_GPIO_Init+0xc4>)
 80006d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d2:	f003 0304 	and.w	r3, r3, #4
 80006d6:	613b      	str	r3, [r7, #16]
 80006d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006da:	4b25      	ldr	r3, [pc, #148]	; (8000770 <MX_GPIO_Init+0xc4>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006de:	4a24      	ldr	r2, [pc, #144]	; (8000770 <MX_GPIO_Init+0xc4>)
 80006e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006e6:	4b22      	ldr	r3, [pc, #136]	; (8000770 <MX_GPIO_Init+0xc4>)
 80006e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f2:	4b1f      	ldr	r3, [pc, #124]	; (8000770 <MX_GPIO_Init+0xc4>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f6:	4a1e      	ldr	r2, [pc, #120]	; (8000770 <MX_GPIO_Init+0xc4>)
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006fe:	4b1c      	ldr	r3, [pc, #112]	; (8000770 <MX_GPIO_Init+0xc4>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800070a:	4b19      	ldr	r3, [pc, #100]	; (8000770 <MX_GPIO_Init+0xc4>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070e:	4a18      	ldr	r2, [pc, #96]	; (8000770 <MX_GPIO_Init+0xc4>)
 8000710:	f043 0302 	orr.w	r3, r3, #2
 8000714:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000716:	4b16      	ldr	r3, [pc, #88]	; (8000770 <MX_GPIO_Init+0xc4>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071a:	f003 0302 	and.w	r3, r3, #2
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	2120      	movs	r1, #32
 8000726:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800072a:	f000 fdc1 	bl	80012b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800072e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <MX_GPIO_Init+0xc8>)
 8000736:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	4619      	mov	r1, r3
 8000742:	480d      	ldr	r0, [pc, #52]	; (8000778 <MX_GPIO_Init+0xcc>)
 8000744:	f000 fbf2 	bl	8000f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000748:	2320      	movs	r3, #32
 800074a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074c:	2301      	movs	r3, #1
 800074e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000754:	2300      	movs	r3, #0
 8000756:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	4619      	mov	r1, r3
 800075e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000762:	f000 fbe3 	bl	8000f2c <HAL_GPIO_Init>

}
 8000766:	bf00      	nop
 8000768:	3728      	adds	r7, #40	; 0x28
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40021000 	.word	0x40021000
 8000774:	10210000 	.word	0x10210000
 8000778:	48000800 	.word	0x48000800

0800077c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000780:	b672      	cpsid	i
}
 8000782:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000784:	e7fe      	b.n	8000784 <Error_Handler+0x8>
	...

08000788 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078e:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <HAL_MspInit+0x44>)
 8000790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000792:	4a0e      	ldr	r2, [pc, #56]	; (80007cc <HAL_MspInit+0x44>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6613      	str	r3, [r2, #96]	; 0x60
 800079a:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <HAL_MspInit+0x44>)
 800079c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <HAL_MspInit+0x44>)
 80007a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007aa:	4a08      	ldr	r2, [pc, #32]	; (80007cc <HAL_MspInit+0x44>)
 80007ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b0:	6593      	str	r3, [r2, #88]	; 0x58
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <HAL_MspInit+0x44>)
 80007b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	40021000 	.word	0x40021000

080007d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b0ac      	sub	sp, #176	; 0xb0
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	2288      	movs	r2, #136	; 0x88
 80007ee:	2100      	movs	r1, #0
 80007f0:	4618      	mov	r0, r3
 80007f2:	f006 fa47 	bl	8006c84 <memset>
  if(huart->Instance==USART2)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a21      	ldr	r2, [pc, #132]	; (8000880 <HAL_UART_MspInit+0xb0>)
 80007fc:	4293      	cmp	r3, r2
 80007fe:	d13b      	bne.n	8000878 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000800:	2302      	movs	r3, #2
 8000802:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000804:	2300      	movs	r3, #0
 8000806:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	4618      	mov	r0, r3
 800080e:	f001 fbb9 	bl	8001f84 <HAL_RCCEx_PeriphCLKConfig>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000818:	f7ff ffb0 	bl	800077c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800081c:	4b19      	ldr	r3, [pc, #100]	; (8000884 <HAL_UART_MspInit+0xb4>)
 800081e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000820:	4a18      	ldr	r2, [pc, #96]	; (8000884 <HAL_UART_MspInit+0xb4>)
 8000822:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000826:	6593      	str	r3, [r2, #88]	; 0x58
 8000828:	4b16      	ldr	r3, [pc, #88]	; (8000884 <HAL_UART_MspInit+0xb4>)
 800082a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800082c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000830:	613b      	str	r3, [r7, #16]
 8000832:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000834:	4b13      	ldr	r3, [pc, #76]	; (8000884 <HAL_UART_MspInit+0xb4>)
 8000836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000838:	4a12      	ldr	r2, [pc, #72]	; (8000884 <HAL_UART_MspInit+0xb4>)
 800083a:	f043 0301 	orr.w	r3, r3, #1
 800083e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000840:	4b10      	ldr	r3, [pc, #64]	; (8000884 <HAL_UART_MspInit+0xb4>)
 8000842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000844:	f003 0301 	and.w	r3, r3, #1
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800084c:	230c      	movs	r3, #12
 800084e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000852:	2302      	movs	r3, #2
 8000854:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800085e:	2303      	movs	r3, #3
 8000860:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000864:	2307      	movs	r3, #7
 8000866:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800086e:	4619      	mov	r1, r3
 8000870:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000874:	f000 fb5a 	bl	8000f2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000878:	bf00      	nop
 800087a:	37b0      	adds	r7, #176	; 0xb0
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40004400 	.word	0x40004400
 8000884:	40021000 	.word	0x40021000

08000888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800088c:	e7fe      	b.n	800088c <NMI_Handler+0x4>

0800088e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000892:	e7fe      	b.n	8000892 <HardFault_Handler+0x4>

08000894 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000898:	e7fe      	b.n	8000898 <MemManage_Handler+0x4>

0800089a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800089e:	e7fe      	b.n	800089e <BusFault_Handler+0x4>

080008a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <UsageFault_Handler+0x4>

080008a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr

080008b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr

080008c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr

080008d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d0:	b598      	push	{r3, r4, r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d4:	f000 f994 	bl	8000c00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  // SysTick handler gets called every millisecond (is given by code
  // generated by STM32CubeIDE). Check which interval is needed by the
  // XF (typically slower) and call XF_tick() accordingly.
  if (XF_isRunning() &&
 80008d8:	f003 feb1 	bl	800463e <XF_isRunning>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d00e      	beq.n	8000900 <SysTick_Handler+0x30>
      (HAL_GetTick() % XF_tickIntervalInMilliseconds()) == 0)
 80008e2:	f000 f9a1 	bl	8000c28 <HAL_GetTick>
 80008e6:	4604      	mov	r4, r0
 80008e8:	f003 fec8 	bl	800467c <XF_tickIntervalInMilliseconds>
 80008ec:	4603      	mov	r3, r0
 80008ee:	fbb4 f2f3 	udiv	r2, r4, r3
 80008f2:	fb02 f303 	mul.w	r3, r2, r3
 80008f6:	1ae3      	subs	r3, r4, r3
  if (XF_isRunning() &&
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d101      	bne.n	8000900 <SysTick_Handler+0x30>
  {
    XF_tick();
 80008fc:	f003 fea6 	bl	800464c <XF_tick>
  }

  /* USER CODE END SysTick_IRQn 1 */
}
 8000900:	bf00      	nop
 8000902:	bd98      	pop	{r3, r4, r7, pc}

08000904 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
	return 1;
 8000908:	2301      	movs	r3, #1
}
 800090a:	4618      	mov	r0, r3
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <_kill>:

int _kill(int pid, int sig)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800091e:	f006 f93d 	bl	8006b9c <__errno>
 8000922:	4603      	mov	r3, r0
 8000924:	2216      	movs	r2, #22
 8000926:	601a      	str	r2, [r3, #0]
	return -1;
 8000928:	f04f 33ff 	mov.w	r3, #4294967295
}
 800092c:	4618      	mov	r0, r3
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <_exit>:

void _exit (int status)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800093c:	f04f 31ff 	mov.w	r1, #4294967295
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f7ff ffe7 	bl	8000914 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000946:	e7fe      	b.n	8000946 <_exit+0x12>

08000948 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af00      	add	r7, sp, #0
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]
 8000958:	e00a      	b.n	8000970 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800095a:	f3af 8000 	nop.w
 800095e:	4601      	mov	r1, r0
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	1c5a      	adds	r2, r3, #1
 8000964:	60ba      	str	r2, [r7, #8]
 8000966:	b2ca      	uxtb	r2, r1
 8000968:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	3301      	adds	r3, #1
 800096e:	617b      	str	r3, [r7, #20]
 8000970:	697a      	ldr	r2, [r7, #20]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	429a      	cmp	r2, r3
 8000976:	dbf0      	blt.n	800095a <_read+0x12>
	}

return len;
 8000978:	687b      	ldr	r3, [r7, #4]
}
 800097a:	4618      	mov	r0, r3
 800097c:	3718      	adds	r7, #24
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b086      	sub	sp, #24
 8000986:	af00      	add	r7, sp, #0
 8000988:	60f8      	str	r0, [r7, #12]
 800098a:	60b9      	str	r1, [r7, #8]
 800098c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]
 8000992:	e009      	b.n	80009a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	1c5a      	adds	r2, r3, #1
 8000998:	60ba      	str	r2, [r7, #8]
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	4618      	mov	r0, r3
 800099e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	3301      	adds	r3, #1
 80009a6:	617b      	str	r3, [r7, #20]
 80009a8:	697a      	ldr	r2, [r7, #20]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	dbf1      	blt.n	8000994 <_write+0x12>
	}
	return len;
 80009b0:	687b      	ldr	r3, [r7, #4]
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3718      	adds	r7, #24
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <_close>:

int _close(int file)
{
 80009ba:	b480      	push	{r7}
 80009bc:	b083      	sub	sp, #12
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
	return -1;
 80009c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr

080009d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009d2:	b480      	push	{r7}
 80009d4:	b083      	sub	sp, #12
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	6078      	str	r0, [r7, #4]
 80009da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009e2:	605a      	str	r2, [r3, #4]
	return 0;
 80009e4:	2300      	movs	r3, #0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr

080009f2 <_isatty>:

int _isatty(int file)
{
 80009f2:	b480      	push	{r7}
 80009f4:	b083      	sub	sp, #12
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	6078      	str	r0, [r7, #4]
	return 1;
 80009fa:	2301      	movs	r3, #1
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr

08000a08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	60f8      	str	r0, [r7, #12]
 8000a10:	60b9      	str	r1, [r7, #8]
 8000a12:	607a      	str	r2, [r7, #4]
	return 0;
 8000a14:	2300      	movs	r3, #0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3714      	adds	r7, #20
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
	...

08000a24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a2c:	4a14      	ldr	r2, [pc, #80]	; (8000a80 <_sbrk+0x5c>)
 8000a2e:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <_sbrk+0x60>)
 8000a30:	1ad3      	subs	r3, r2, r3
 8000a32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a38:	4b13      	ldr	r3, [pc, #76]	; (8000a88 <_sbrk+0x64>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d102      	bne.n	8000a46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a40:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <_sbrk+0x64>)
 8000a42:	4a12      	ldr	r2, [pc, #72]	; (8000a8c <_sbrk+0x68>)
 8000a44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <_sbrk+0x64>)
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d207      	bcs.n	8000a64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a54:	f006 f8a2 	bl	8006b9c <__errno>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	220c      	movs	r2, #12
 8000a5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a62:	e009      	b.n	8000a78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a64:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <_sbrk+0x64>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a6a:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <_sbrk+0x64>)
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4413      	add	r3, r2
 8000a72:	4a05      	ldr	r2, [pc, #20]	; (8000a88 <_sbrk+0x64>)
 8000a74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a76:	68fb      	ldr	r3, [r7, #12]
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3718      	adds	r7, #24
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20018000 	.word	0x20018000
 8000a84:	00000400 	.word	0x00000400
 8000a88:	20000128 	.word	0x20000128
 8000a8c:	20000400 	.word	0x20000400

08000a90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a94:	4b15      	ldr	r3, [pc, #84]	; (8000aec <SystemInit+0x5c>)
 8000a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a9a:	4a14      	ldr	r2, [pc, #80]	; (8000aec <SystemInit+0x5c>)
 8000a9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000aa4:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <SystemInit+0x60>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a11      	ldr	r2, [pc, #68]	; (8000af0 <SystemInit+0x60>)
 8000aaa:	f043 0301 	orr.w	r3, r3, #1
 8000aae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <SystemInit+0x60>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <SystemInit+0x60>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a0d      	ldr	r2, [pc, #52]	; (8000af0 <SystemInit+0x60>)
 8000abc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000ac0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000ac4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000ac6:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <SystemInit+0x60>)
 8000ac8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000acc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ace:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <SystemInit+0x60>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a07      	ldr	r2, [pc, #28]	; (8000af0 <SystemInit+0x60>)
 8000ad4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ad8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000ada:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <SystemInit+0x60>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	e000ed00 	.word	0xe000ed00
 8000af0:	40021000 	.word	0x40021000

08000af4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000af4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b2c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000af8:	f7ff ffca 	bl	8000a90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000afc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000afe:	e003      	b.n	8000b08 <LoopCopyDataInit>

08000b00 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b00:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b02:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b04:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b06:	3104      	adds	r1, #4

08000b08 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b08:	480a      	ldr	r0, [pc, #40]	; (8000b34 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b0c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b0e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b10:	d3f6      	bcc.n	8000b00 <CopyDataInit>
	ldr	r2, =_sbss
 8000b12:	4a0a      	ldr	r2, [pc, #40]	; (8000b3c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b14:	e002      	b.n	8000b1c <LoopFillZerobss>

08000b16 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b16:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b18:	f842 3b04 	str.w	r3, [r2], #4

08000b1c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b1c:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <LoopForever+0x16>)
	cmp	r2, r3
 8000b1e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b20:	d3f9      	bcc.n	8000b16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b22:	f006 f853 	bl	8006bcc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b26:	f7ff fd2d 	bl	8000584 <main>

08000b2a <LoopForever>:

LoopForever:
    b LoopForever
 8000b2a:	e7fe      	b.n	8000b2a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b2c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000b30:	08008844 	.word	0x08008844
	ldr	r0, =_sdata
 8000b34:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b38:	20000088 	.word	0x20000088
	ldr	r2, =_sbss
 8000b3c:	20000088 	.word	0x20000088
	ldr	r3, = _ebss
 8000b40:	200003fc 	.word	0x200003fc

08000b44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b44:	e7fe      	b.n	8000b44 <ADC1_2_IRQHandler>
	...

08000b48 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b52:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <HAL_Init+0x3c>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a0b      	ldr	r2, [pc, #44]	; (8000b84 <HAL_Init+0x3c>)
 8000b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b5c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b5e:	2003      	movs	r0, #3
 8000b60:	f000 f920 	bl	8000da4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b64:	2000      	movs	r0, #0
 8000b66:	f000 f80f 	bl	8000b88 <HAL_InitTick>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d002      	beq.n	8000b76 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b70:	2301      	movs	r3, #1
 8000b72:	71fb      	strb	r3, [r7, #7]
 8000b74:	e001      	b.n	8000b7a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b76:	f7ff fe07 	bl	8000788 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40022000 	.word	0x40022000

08000b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b90:	2300      	movs	r3, #0
 8000b92:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b94:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <HAL_InitTick+0x6c>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d023      	beq.n	8000be4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b9c:	4b16      	ldr	r3, [pc, #88]	; (8000bf8 <HAL_InitTick+0x70>)
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <HAL_InitTick+0x6c>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000baa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f000 f91d 	bl	8000df2 <HAL_SYSTICK_Config>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d10f      	bne.n	8000bde <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2b0f      	cmp	r3, #15
 8000bc2:	d809      	bhi.n	8000bd8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	6879      	ldr	r1, [r7, #4]
 8000bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bcc:	f000 f8f5 	bl	8000dba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bd0:	4a0a      	ldr	r2, [pc, #40]	; (8000bfc <HAL_InitTick+0x74>)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6013      	str	r3, [r2, #0]
 8000bd6:	e007      	b.n	8000be8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	73fb      	strb	r3, [r7, #15]
 8000bdc:	e004      	b.n	8000be8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	73fb      	strb	r3, [r7, #15]
 8000be2:	e001      	b.n	8000be8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000be4:	2301      	movs	r3, #1
 8000be6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3710      	adds	r7, #16
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000008 	.word	0x20000008
 8000bf8:	20000000 	.word	0x20000000
 8000bfc:	20000004 	.word	0x20000004

08000c00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <HAL_IncTick+0x20>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	461a      	mov	r2, r3
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <HAL_IncTick+0x24>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4413      	add	r3, r2
 8000c10:	4a04      	ldr	r2, [pc, #16]	; (8000c24 <HAL_IncTick+0x24>)
 8000c12:	6013      	str	r3, [r2, #0]
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	20000008 	.word	0x20000008
 8000c24:	2000012c 	.word	0x2000012c

08000c28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c2c:	4b03      	ldr	r3, [pc, #12]	; (8000c3c <HAL_GetTick+0x14>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	2000012c 	.word	0x2000012c

08000c40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f003 0307 	and.w	r3, r3, #7
 8000c4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <__NVIC_SetPriorityGrouping+0x44>)
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c56:	68ba      	ldr	r2, [r7, #8]
 8000c58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c72:	4a04      	ldr	r2, [pc, #16]	; (8000c84 <__NVIC_SetPriorityGrouping+0x44>)
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	60d3      	str	r3, [r2, #12]
}
 8000c78:	bf00      	nop
 8000c7a:	3714      	adds	r7, #20
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c8c:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	0a1b      	lsrs	r3, r3, #8
 8000c92:	f003 0307 	and.w	r3, r3, #7
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	6039      	str	r1, [r7, #0]
 8000cae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	db0a      	blt.n	8000cce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	b2da      	uxtb	r2, r3
 8000cbc:	490c      	ldr	r1, [pc, #48]	; (8000cf0 <__NVIC_SetPriority+0x4c>)
 8000cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc2:	0112      	lsls	r2, r2, #4
 8000cc4:	b2d2      	uxtb	r2, r2
 8000cc6:	440b      	add	r3, r1
 8000cc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ccc:	e00a      	b.n	8000ce4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	b2da      	uxtb	r2, r3
 8000cd2:	4908      	ldr	r1, [pc, #32]	; (8000cf4 <__NVIC_SetPriority+0x50>)
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	f003 030f 	and.w	r3, r3, #15
 8000cda:	3b04      	subs	r3, #4
 8000cdc:	0112      	lsls	r2, r2, #4
 8000cde:	b2d2      	uxtb	r2, r2
 8000ce0:	440b      	add	r3, r1
 8000ce2:	761a      	strb	r2, [r3, #24]
}
 8000ce4:	bf00      	nop
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	e000e100 	.word	0xe000e100
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b089      	sub	sp, #36	; 0x24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	f1c3 0307 	rsb	r3, r3, #7
 8000d12:	2b04      	cmp	r3, #4
 8000d14:	bf28      	it	cs
 8000d16:	2304      	movcs	r3, #4
 8000d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	3304      	adds	r3, #4
 8000d1e:	2b06      	cmp	r3, #6
 8000d20:	d902      	bls.n	8000d28 <NVIC_EncodePriority+0x30>
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	3b03      	subs	r3, #3
 8000d26:	e000      	b.n	8000d2a <NVIC_EncodePriority+0x32>
 8000d28:	2300      	movs	r3, #0
 8000d2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	43da      	mvns	r2, r3
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	401a      	ands	r2, r3
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d40:	f04f 31ff 	mov.w	r1, #4294967295
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4a:	43d9      	mvns	r1, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d50:	4313      	orrs	r3, r2
         );
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3724      	adds	r7, #36	; 0x24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
	...

08000d60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d70:	d301      	bcc.n	8000d76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d72:	2301      	movs	r3, #1
 8000d74:	e00f      	b.n	8000d96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d76:	4a0a      	ldr	r2, [pc, #40]	; (8000da0 <SysTick_Config+0x40>)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d7e:	210f      	movs	r1, #15
 8000d80:	f04f 30ff 	mov.w	r0, #4294967295
 8000d84:	f7ff ff8e 	bl	8000ca4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d88:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <SysTick_Config+0x40>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d8e:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <SysTick_Config+0x40>)
 8000d90:	2207      	movs	r2, #7
 8000d92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	e000e010 	.word	0xe000e010

08000da4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f7ff ff47 	bl	8000c40 <__NVIC_SetPriorityGrouping>
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b086      	sub	sp, #24
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	60b9      	str	r1, [r7, #8]
 8000dc4:	607a      	str	r2, [r7, #4]
 8000dc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dcc:	f7ff ff5c 	bl	8000c88 <__NVIC_GetPriorityGrouping>
 8000dd0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	68b9      	ldr	r1, [r7, #8]
 8000dd6:	6978      	ldr	r0, [r7, #20]
 8000dd8:	f7ff ff8e 	bl	8000cf8 <NVIC_EncodePriority>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000de2:	4611      	mov	r1, r2
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff ff5d 	bl	8000ca4 <__NVIC_SetPriority>
}
 8000dea:	bf00      	nop
 8000dec:	3718      	adds	r7, #24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f7ff ffb0 	bl	8000d60 <SysTick_Config>
 8000e00:	4603      	mov	r3, r0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b086      	sub	sp, #24
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	60f8      	str	r0, [r7, #12]
 8000e12:	60b9      	str	r1, [r7, #8]
 8000e14:	607a      	str	r2, [r7, #4]
 8000e16:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d101      	bne.n	8000e2a <HAL_DMA_Start_IT+0x20>
 8000e26:	2302      	movs	r3, #2
 8000e28:	e04b      	b.n	8000ec2 <HAL_DMA_Start_IT+0xb8>
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d13a      	bne.n	8000eb4 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	2202      	movs	r2, #2
 8000e42:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f022 0201 	bic.w	r2, r2, #1
 8000e5a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	68b9      	ldr	r1, [r7, #8]
 8000e62:	68f8      	ldr	r0, [r7, #12]
 8000e64:	f000 f831 	bl	8000eca <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d008      	beq.n	8000e82 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f042 020e 	orr.w	r2, r2, #14
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	e00f      	b.n	8000ea2 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f022 0204 	bic.w	r2, r2, #4
 8000e90:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f042 020a 	orr.w	r2, r2, #10
 8000ea0:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f042 0201 	orr.w	r2, r2, #1
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	e005      	b.n	8000ec0 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000ec0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	b085      	sub	sp, #20
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	60f8      	str	r0, [r7, #12]
 8000ed2:	60b9      	str	r1, [r7, #8]
 8000ed4:	607a      	str	r2, [r7, #4]
 8000ed6:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000edc:	f003 021c 	and.w	r2, r3, #28
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	fa01 f202 	lsl.w	r2, r1, r2
 8000eea:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	683a      	ldr	r2, [r7, #0]
 8000ef2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	2b10      	cmp	r3, #16
 8000efa:	d108      	bne.n	8000f0e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	68ba      	ldr	r2, [r7, #8]
 8000f0a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000f0c:	e007      	b.n	8000f1e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	60da      	str	r2, [r3, #12]
}
 8000f1e:	bf00      	nop
 8000f20:	3714      	adds	r7, #20
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
	...

08000f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b087      	sub	sp, #28
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f36:	2300      	movs	r3, #0
 8000f38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f3a:	e17f      	b.n	800123c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	2101      	movs	r1, #1
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	fa01 f303 	lsl.w	r3, r1, r3
 8000f48:	4013      	ands	r3, r2
 8000f4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	f000 8171 	beq.w	8001236 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d00b      	beq.n	8000f74 <HAL_GPIO_Init+0x48>
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d007      	beq.n	8000f74 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f68:	2b11      	cmp	r3, #17
 8000f6a:	d003      	beq.n	8000f74 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	2b12      	cmp	r3, #18
 8000f72:	d130      	bne.n	8000fd6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	2203      	movs	r2, #3
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	68da      	ldr	r2, [r3, #12]
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000faa:	2201      	movs	r2, #1
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	091b      	lsrs	r3, r3, #4
 8000fc0:	f003 0201 	and.w	r2, r3, #1
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f003 0303 	and.w	r3, r3, #3
 8000fde:	2b03      	cmp	r3, #3
 8000fe0:	d118      	bne.n	8001014 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000fe8:	2201      	movs	r2, #1
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	08db      	lsrs	r3, r3, #3
 8000ffe:	f003 0201 	and.w	r2, r3, #1
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	4313      	orrs	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	2203      	movs	r2, #3
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4013      	ands	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	689a      	ldr	r2, [r3, #8]
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4313      	orrs	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	2b02      	cmp	r3, #2
 800104a:	d003      	beq.n	8001054 <HAL_GPIO_Init+0x128>
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	2b12      	cmp	r3, #18
 8001052:	d123      	bne.n	800109c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	08da      	lsrs	r2, r3, #3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3208      	adds	r2, #8
 800105c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001060:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	f003 0307 	and.w	r3, r3, #7
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	220f      	movs	r2, #15
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	691a      	ldr	r2, [r3, #16]
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4313      	orrs	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	08da      	lsrs	r2, r3, #3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	3208      	adds	r2, #8
 8001096:	6939      	ldr	r1, [r7, #16]
 8001098:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	2203      	movs	r2, #3
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4013      	ands	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f003 0203 	and.w	r2, r3, #3
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	f000 80ac 	beq.w	8001236 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010de:	4b5f      	ldr	r3, [pc, #380]	; (800125c <HAL_GPIO_Init+0x330>)
 80010e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010e2:	4a5e      	ldr	r2, [pc, #376]	; (800125c <HAL_GPIO_Init+0x330>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6613      	str	r3, [r2, #96]	; 0x60
 80010ea:	4b5c      	ldr	r3, [pc, #368]	; (800125c <HAL_GPIO_Init+0x330>)
 80010ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010f6:	4a5a      	ldr	r2, [pc, #360]	; (8001260 <HAL_GPIO_Init+0x334>)
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	089b      	lsrs	r3, r3, #2
 80010fc:	3302      	adds	r3, #2
 80010fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001102:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	f003 0303 	and.w	r3, r3, #3
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	220f      	movs	r2, #15
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	4013      	ands	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001120:	d025      	beq.n	800116e <HAL_GPIO_Init+0x242>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a4f      	ldr	r2, [pc, #316]	; (8001264 <HAL_GPIO_Init+0x338>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d01f      	beq.n	800116a <HAL_GPIO_Init+0x23e>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a4e      	ldr	r2, [pc, #312]	; (8001268 <HAL_GPIO_Init+0x33c>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d019      	beq.n	8001166 <HAL_GPIO_Init+0x23a>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a4d      	ldr	r2, [pc, #308]	; (800126c <HAL_GPIO_Init+0x340>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d013      	beq.n	8001162 <HAL_GPIO_Init+0x236>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a4c      	ldr	r2, [pc, #304]	; (8001270 <HAL_GPIO_Init+0x344>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d00d      	beq.n	800115e <HAL_GPIO_Init+0x232>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a4b      	ldr	r2, [pc, #300]	; (8001274 <HAL_GPIO_Init+0x348>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d007      	beq.n	800115a <HAL_GPIO_Init+0x22e>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a4a      	ldr	r2, [pc, #296]	; (8001278 <HAL_GPIO_Init+0x34c>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d101      	bne.n	8001156 <HAL_GPIO_Init+0x22a>
 8001152:	2306      	movs	r3, #6
 8001154:	e00c      	b.n	8001170 <HAL_GPIO_Init+0x244>
 8001156:	2307      	movs	r3, #7
 8001158:	e00a      	b.n	8001170 <HAL_GPIO_Init+0x244>
 800115a:	2305      	movs	r3, #5
 800115c:	e008      	b.n	8001170 <HAL_GPIO_Init+0x244>
 800115e:	2304      	movs	r3, #4
 8001160:	e006      	b.n	8001170 <HAL_GPIO_Init+0x244>
 8001162:	2303      	movs	r3, #3
 8001164:	e004      	b.n	8001170 <HAL_GPIO_Init+0x244>
 8001166:	2302      	movs	r3, #2
 8001168:	e002      	b.n	8001170 <HAL_GPIO_Init+0x244>
 800116a:	2301      	movs	r3, #1
 800116c:	e000      	b.n	8001170 <HAL_GPIO_Init+0x244>
 800116e:	2300      	movs	r3, #0
 8001170:	697a      	ldr	r2, [r7, #20]
 8001172:	f002 0203 	and.w	r2, r2, #3
 8001176:	0092      	lsls	r2, r2, #2
 8001178:	4093      	lsls	r3, r2
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	4313      	orrs	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001180:	4937      	ldr	r1, [pc, #220]	; (8001260 <HAL_GPIO_Init+0x334>)
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	089b      	lsrs	r3, r3, #2
 8001186:	3302      	adds	r3, #2
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800118e:	4b3b      	ldr	r3, [pc, #236]	; (800127c <HAL_GPIO_Init+0x350>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	43db      	mvns	r3, r3
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	4013      	ands	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d003      	beq.n	80011b2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011b2:	4a32      	ldr	r2, [pc, #200]	; (800127c <HAL_GPIO_Init+0x350>)
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80011b8:	4b30      	ldr	r3, [pc, #192]	; (800127c <HAL_GPIO_Init+0x350>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	43db      	mvns	r3, r3
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	4013      	ands	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d003      	beq.n	80011dc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	4313      	orrs	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011dc:	4a27      	ldr	r2, [pc, #156]	; (800127c <HAL_GPIO_Init+0x350>)
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011e2:	4b26      	ldr	r3, [pc, #152]	; (800127c <HAL_GPIO_Init+0x350>)
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	43db      	mvns	r3, r3
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	4013      	ands	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4313      	orrs	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001206:	4a1d      	ldr	r2, [pc, #116]	; (800127c <HAL_GPIO_Init+0x350>)
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800120c:	4b1b      	ldr	r3, [pc, #108]	; (800127c <HAL_GPIO_Init+0x350>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	43db      	mvns	r3, r3
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	4013      	ands	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d003      	beq.n	8001230 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	4313      	orrs	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001230:	4a12      	ldr	r2, [pc, #72]	; (800127c <HAL_GPIO_Init+0x350>)
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	3301      	adds	r3, #1
 800123a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	fa22 f303 	lsr.w	r3, r2, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	f47f ae78 	bne.w	8000f3c <HAL_GPIO_Init+0x10>
  }
}
 800124c:	bf00      	nop
 800124e:	bf00      	nop
 8001250:	371c      	adds	r7, #28
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	40021000 	.word	0x40021000
 8001260:	40010000 	.word	0x40010000
 8001264:	48000400 	.word	0x48000400
 8001268:	48000800 	.word	0x48000800
 800126c:	48000c00 	.word	0x48000c00
 8001270:	48001000 	.word	0x48001000
 8001274:	48001400 	.word	0x48001400
 8001278:	48001800 	.word	0x48001800
 800127c:	40010400 	.word	0x40010400

08001280 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	460b      	mov	r3, r1
 800128a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	691a      	ldr	r2, [r3, #16]
 8001290:	887b      	ldrh	r3, [r7, #2]
 8001292:	4013      	ands	r3, r2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d002      	beq.n	800129e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001298:	2301      	movs	r3, #1
 800129a:	73fb      	strb	r3, [r7, #15]
 800129c:	e001      	b.n	80012a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800129e:	2300      	movs	r3, #0
 80012a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3714      	adds	r7, #20
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	460b      	mov	r3, r1
 80012ba:	807b      	strh	r3, [r7, #2]
 80012bc:	4613      	mov	r3, r2
 80012be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012c0:	787b      	ldrb	r3, [r7, #1]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012c6:	887a      	ldrh	r2, [r7, #2]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012cc:	e002      	b.n	80012d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012ce:	887a      	ldrh	r2, [r7, #2]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80012e4:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	40007000 	.word	0x40007000

080012fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800130a:	d130      	bne.n	800136e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800130c:	4b23      	ldr	r3, [pc, #140]	; (800139c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001314:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001318:	d038      	beq.n	800138c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800131a:	4b20      	ldr	r3, [pc, #128]	; (800139c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001322:	4a1e      	ldr	r2, [pc, #120]	; (800139c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001324:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001328:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800132a:	4b1d      	ldr	r3, [pc, #116]	; (80013a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2232      	movs	r2, #50	; 0x32
 8001330:	fb02 f303 	mul.w	r3, r2, r3
 8001334:	4a1b      	ldr	r2, [pc, #108]	; (80013a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001336:	fba2 2303 	umull	r2, r3, r2, r3
 800133a:	0c9b      	lsrs	r3, r3, #18
 800133c:	3301      	adds	r3, #1
 800133e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001340:	e002      	b.n	8001348 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	3b01      	subs	r3, #1
 8001346:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001348:	4b14      	ldr	r3, [pc, #80]	; (800139c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800134a:	695b      	ldr	r3, [r3, #20]
 800134c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001350:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001354:	d102      	bne.n	800135c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1f2      	bne.n	8001342 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800135c:	4b0f      	ldr	r3, [pc, #60]	; (800139c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800135e:	695b      	ldr	r3, [r3, #20]
 8001360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001364:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001368:	d110      	bne.n	800138c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e00f      	b.n	800138e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800136e:	4b0b      	ldr	r3, [pc, #44]	; (800139c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800137a:	d007      	beq.n	800138c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800137c:	4b07      	ldr	r3, [pc, #28]	; (800139c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001384:	4a05      	ldr	r2, [pc, #20]	; (800139c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001386:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800138a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	40007000 	.word	0x40007000
 80013a0:	20000000 	.word	0x20000000
 80013a4:	431bde83 	.word	0x431bde83

080013a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b088      	sub	sp, #32
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d101      	bne.n	80013ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e3d8      	b.n	8001b6c <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013ba:	4b97      	ldr	r3, [pc, #604]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f003 030c 	and.w	r3, r3, #12
 80013c2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013c4:	4b94      	ldr	r3, [pc, #592]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	f003 0303 	and.w	r3, r3, #3
 80013cc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0310 	and.w	r3, r3, #16
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f000 80e4 	beq.w	80015a4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d007      	beq.n	80013f2 <HAL_RCC_OscConfig+0x4a>
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	2b0c      	cmp	r3, #12
 80013e6:	f040 808b 	bne.w	8001500 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	f040 8087 	bne.w	8001500 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013f2:	4b89      	ldr	r3, [pc, #548]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d005      	beq.n	800140a <HAL_RCC_OscConfig+0x62>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d101      	bne.n	800140a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e3b0      	b.n	8001b6c <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6a1a      	ldr	r2, [r3, #32]
 800140e:	4b82      	ldr	r3, [pc, #520]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0308 	and.w	r3, r3, #8
 8001416:	2b00      	cmp	r3, #0
 8001418:	d004      	beq.n	8001424 <HAL_RCC_OscConfig+0x7c>
 800141a:	4b7f      	ldr	r3, [pc, #508]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001422:	e005      	b.n	8001430 <HAL_RCC_OscConfig+0x88>
 8001424:	4b7c      	ldr	r3, [pc, #496]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 8001426:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800142a:	091b      	lsrs	r3, r3, #4
 800142c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001430:	4293      	cmp	r3, r2
 8001432:	d223      	bcs.n	800147c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6a1b      	ldr	r3, [r3, #32]
 8001438:	4618      	mov	r0, r3
 800143a:	f000 fd43 	bl	8001ec4 <RCC_SetFlashLatencyFromMSIRange>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e391      	b.n	8001b6c <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001448:	4b73      	ldr	r3, [pc, #460]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a72      	ldr	r2, [pc, #456]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 800144e:	f043 0308 	orr.w	r3, r3, #8
 8001452:	6013      	str	r3, [r2, #0]
 8001454:	4b70      	ldr	r3, [pc, #448]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a1b      	ldr	r3, [r3, #32]
 8001460:	496d      	ldr	r1, [pc, #436]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 8001462:	4313      	orrs	r3, r2
 8001464:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001466:	4b6c      	ldr	r3, [pc, #432]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	021b      	lsls	r3, r3, #8
 8001474:	4968      	ldr	r1, [pc, #416]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 8001476:	4313      	orrs	r3, r2
 8001478:	604b      	str	r3, [r1, #4]
 800147a:	e025      	b.n	80014c8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800147c:	4b66      	ldr	r3, [pc, #408]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a65      	ldr	r2, [pc, #404]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 8001482:	f043 0308 	orr.w	r3, r3, #8
 8001486:	6013      	str	r3, [r2, #0]
 8001488:	4b63      	ldr	r3, [pc, #396]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a1b      	ldr	r3, [r3, #32]
 8001494:	4960      	ldr	r1, [pc, #384]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 8001496:	4313      	orrs	r3, r2
 8001498:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800149a:	4b5f      	ldr	r3, [pc, #380]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	69db      	ldr	r3, [r3, #28]
 80014a6:	021b      	lsls	r3, r3, #8
 80014a8:	495b      	ldr	r1, [pc, #364]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 80014aa:	4313      	orrs	r3, r2
 80014ac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d109      	bne.n	80014c8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6a1b      	ldr	r3, [r3, #32]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f000 fd03 	bl	8001ec4 <RCC_SetFlashLatencyFromMSIRange>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e351      	b.n	8001b6c <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014c8:	f000 fc38 	bl	8001d3c <HAL_RCC_GetSysClockFreq>
 80014cc:	4602      	mov	r2, r0
 80014ce:	4b52      	ldr	r3, [pc, #328]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	091b      	lsrs	r3, r3, #4
 80014d4:	f003 030f 	and.w	r3, r3, #15
 80014d8:	4950      	ldr	r1, [pc, #320]	; (800161c <HAL_RCC_OscConfig+0x274>)
 80014da:	5ccb      	ldrb	r3, [r1, r3]
 80014dc:	f003 031f 	and.w	r3, r3, #31
 80014e0:	fa22 f303 	lsr.w	r3, r2, r3
 80014e4:	4a4e      	ldr	r2, [pc, #312]	; (8001620 <HAL_RCC_OscConfig+0x278>)
 80014e6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014e8:	4b4e      	ldr	r3, [pc, #312]	; (8001624 <HAL_RCC_OscConfig+0x27c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff fb4b 	bl	8000b88 <HAL_InitTick>
 80014f2:	4603      	mov	r3, r0
 80014f4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80014f6:	7bfb      	ldrb	r3, [r7, #15]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d052      	beq.n	80015a2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80014fc:	7bfb      	ldrb	r3, [r7, #15]
 80014fe:	e335      	b.n	8001b6c <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d032      	beq.n	800156e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001508:	4b43      	ldr	r3, [pc, #268]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a42      	ldr	r2, [pc, #264]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 800150e:	f043 0301 	orr.w	r3, r3, #1
 8001512:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001514:	f7ff fb88 	bl	8000c28 <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800151c:	f7ff fb84 	bl	8000c28 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b02      	cmp	r3, #2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e31e      	b.n	8001b6c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800152e:	4b3a      	ldr	r3, [pc, #232]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d0f0      	beq.n	800151c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800153a:	4b37      	ldr	r3, [pc, #220]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a36      	ldr	r2, [pc, #216]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 8001540:	f043 0308 	orr.w	r3, r3, #8
 8001544:	6013      	str	r3, [r2, #0]
 8001546:	4b34      	ldr	r3, [pc, #208]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a1b      	ldr	r3, [r3, #32]
 8001552:	4931      	ldr	r1, [pc, #196]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 8001554:	4313      	orrs	r3, r2
 8001556:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001558:	4b2f      	ldr	r3, [pc, #188]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	69db      	ldr	r3, [r3, #28]
 8001564:	021b      	lsls	r3, r3, #8
 8001566:	492c      	ldr	r1, [pc, #176]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 8001568:	4313      	orrs	r3, r2
 800156a:	604b      	str	r3, [r1, #4]
 800156c:	e01a      	b.n	80015a4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800156e:	4b2a      	ldr	r3, [pc, #168]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a29      	ldr	r2, [pc, #164]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 8001574:	f023 0301 	bic.w	r3, r3, #1
 8001578:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800157a:	f7ff fb55 	bl	8000c28 <HAL_GetTick>
 800157e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001580:	e008      	b.n	8001594 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001582:	f7ff fb51 	bl	8000c28 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e2eb      	b.n	8001b6c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001594:	4b20      	ldr	r3, [pc, #128]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d1f0      	bne.n	8001582 <HAL_RCC_OscConfig+0x1da>
 80015a0:	e000      	b.n	80015a4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015a2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0301 	and.w	r3, r3, #1
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d074      	beq.n	800169a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	2b08      	cmp	r3, #8
 80015b4:	d005      	beq.n	80015c2 <HAL_RCC_OscConfig+0x21a>
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	2b0c      	cmp	r3, #12
 80015ba:	d10e      	bne.n	80015da <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	2b03      	cmp	r3, #3
 80015c0:	d10b      	bne.n	80015da <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c2:	4b15      	ldr	r3, [pc, #84]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d064      	beq.n	8001698 <HAL_RCC_OscConfig+0x2f0>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d160      	bne.n	8001698 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e2c8      	b.n	8001b6c <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015e2:	d106      	bne.n	80015f2 <HAL_RCC_OscConfig+0x24a>
 80015e4:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a0b      	ldr	r2, [pc, #44]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 80015ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ee:	6013      	str	r3, [r2, #0]
 80015f0:	e026      	b.n	8001640 <HAL_RCC_OscConfig+0x298>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015fa:	d115      	bne.n	8001628 <HAL_RCC_OscConfig+0x280>
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a05      	ldr	r2, [pc, #20]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 8001602:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001606:	6013      	str	r3, [r2, #0]
 8001608:	4b03      	ldr	r3, [pc, #12]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a02      	ldr	r2, [pc, #8]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 800160e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001612:	6013      	str	r3, [r2, #0]
 8001614:	e014      	b.n	8001640 <HAL_RCC_OscConfig+0x298>
 8001616:	bf00      	nop
 8001618:	40021000 	.word	0x40021000
 800161c:	08008594 	.word	0x08008594
 8001620:	20000000 	.word	0x20000000
 8001624:	20000004 	.word	0x20000004
 8001628:	4ba0      	ldr	r3, [pc, #640]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a9f      	ldr	r2, [pc, #636]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 800162e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001632:	6013      	str	r3, [r2, #0]
 8001634:	4b9d      	ldr	r3, [pc, #628]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a9c      	ldr	r2, [pc, #624]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 800163a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800163e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d013      	beq.n	8001670 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001648:	f7ff faee 	bl	8000c28 <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001650:	f7ff faea 	bl	8000c28 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b64      	cmp	r3, #100	; 0x64
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e284      	b.n	8001b6c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001662:	4b92      	ldr	r3, [pc, #584]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d0f0      	beq.n	8001650 <HAL_RCC_OscConfig+0x2a8>
 800166e:	e014      	b.n	800169a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001670:	f7ff fada 	bl	8000c28 <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001678:	f7ff fad6 	bl	8000c28 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b64      	cmp	r3, #100	; 0x64
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e270      	b.n	8001b6c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800168a:	4b88      	ldr	r3, [pc, #544]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1f0      	bne.n	8001678 <HAL_RCC_OscConfig+0x2d0>
 8001696:	e000      	b.n	800169a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001698:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d060      	beq.n	8001768 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	2b04      	cmp	r3, #4
 80016aa:	d005      	beq.n	80016b8 <HAL_RCC_OscConfig+0x310>
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	2b0c      	cmp	r3, #12
 80016b0:	d119      	bne.n	80016e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d116      	bne.n	80016e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016b8:	4b7c      	ldr	r3, [pc, #496]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d005      	beq.n	80016d0 <HAL_RCC_OscConfig+0x328>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d101      	bne.n	80016d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e24d      	b.n	8001b6c <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d0:	4b76      	ldr	r3, [pc, #472]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	691b      	ldr	r3, [r3, #16]
 80016dc:	061b      	lsls	r3, r3, #24
 80016de:	4973      	ldr	r1, [pc, #460]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 80016e0:	4313      	orrs	r3, r2
 80016e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016e4:	e040      	b.n	8001768 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d023      	beq.n	8001736 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016ee:	4b6f      	ldr	r3, [pc, #444]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a6e      	ldr	r2, [pc, #440]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 80016f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016fa:	f7ff fa95 	bl	8000c28 <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001700:	e008      	b.n	8001714 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001702:	f7ff fa91 	bl	8000c28 <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e22b      	b.n	8001b6c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001714:	4b65      	ldr	r3, [pc, #404]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800171c:	2b00      	cmp	r3, #0
 800171e:	d0f0      	beq.n	8001702 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001720:	4b62      	ldr	r3, [pc, #392]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	061b      	lsls	r3, r3, #24
 800172e:	495f      	ldr	r1, [pc, #380]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 8001730:	4313      	orrs	r3, r2
 8001732:	604b      	str	r3, [r1, #4]
 8001734:	e018      	b.n	8001768 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001736:	4b5d      	ldr	r3, [pc, #372]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a5c      	ldr	r2, [pc, #368]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 800173c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001740:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001742:	f7ff fa71 	bl	8000c28 <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800174a:	f7ff fa6d 	bl	8000c28 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e207      	b.n	8001b6c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800175c:	4b53      	ldr	r3, [pc, #332]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001764:	2b00      	cmp	r3, #0
 8001766:	d1f0      	bne.n	800174a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0308 	and.w	r3, r3, #8
 8001770:	2b00      	cmp	r3, #0
 8001772:	d03c      	beq.n	80017ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d01c      	beq.n	80017b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800177c:	4b4b      	ldr	r3, [pc, #300]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 800177e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001782:	4a4a      	ldr	r2, [pc, #296]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800178c:	f7ff fa4c 	bl	8000c28 <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001794:	f7ff fa48 	bl	8000c28 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e1e2      	b.n	8001b6c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017a6:	4b41      	ldr	r3, [pc, #260]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 80017a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d0ef      	beq.n	8001794 <HAL_RCC_OscConfig+0x3ec>
 80017b4:	e01b      	b.n	80017ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017b6:	4b3d      	ldr	r3, [pc, #244]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 80017b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017bc:	4a3b      	ldr	r2, [pc, #236]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 80017be:	f023 0301 	bic.w	r3, r3, #1
 80017c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c6:	f7ff fa2f 	bl	8000c28 <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017ce:	f7ff fa2b 	bl	8000c28 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e1c5      	b.n	8001b6c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017e0:	4b32      	ldr	r3, [pc, #200]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 80017e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1ef      	bne.n	80017ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0304 	and.w	r3, r3, #4
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f000 80a6 	beq.w	8001948 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017fc:	2300      	movs	r3, #0
 80017fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001800:	4b2a      	ldr	r3, [pc, #168]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 8001802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d10d      	bne.n	8001828 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800180c:	4b27      	ldr	r3, [pc, #156]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 800180e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001810:	4a26      	ldr	r2, [pc, #152]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 8001812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001816:	6593      	str	r3, [r2, #88]	; 0x58
 8001818:	4b24      	ldr	r3, [pc, #144]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 800181a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001820:	60bb      	str	r3, [r7, #8]
 8001822:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001824:	2301      	movs	r3, #1
 8001826:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001828:	4b21      	ldr	r3, [pc, #132]	; (80018b0 <HAL_RCC_OscConfig+0x508>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001830:	2b00      	cmp	r3, #0
 8001832:	d118      	bne.n	8001866 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001834:	4b1e      	ldr	r3, [pc, #120]	; (80018b0 <HAL_RCC_OscConfig+0x508>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a1d      	ldr	r2, [pc, #116]	; (80018b0 <HAL_RCC_OscConfig+0x508>)
 800183a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800183e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001840:	f7ff f9f2 	bl	8000c28 <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001848:	f7ff f9ee 	bl	8000c28 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b02      	cmp	r3, #2
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e188      	b.n	8001b6c <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800185a:	4b15      	ldr	r3, [pc, #84]	; (80018b0 <HAL_RCC_OscConfig+0x508>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001862:	2b00      	cmp	r3, #0
 8001864:	d0f0      	beq.n	8001848 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d108      	bne.n	8001880 <HAL_RCC_OscConfig+0x4d8>
 800186e:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 8001870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001874:	4a0d      	ldr	r2, [pc, #52]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800187e:	e029      	b.n	80018d4 <HAL_RCC_OscConfig+0x52c>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	2b05      	cmp	r3, #5
 8001886:	d115      	bne.n	80018b4 <HAL_RCC_OscConfig+0x50c>
 8001888:	4b08      	ldr	r3, [pc, #32]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 800188a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800188e:	4a07      	ldr	r2, [pc, #28]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 8001890:	f043 0304 	orr.w	r3, r3, #4
 8001894:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001898:	4b04      	ldr	r3, [pc, #16]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 800189a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800189e:	4a03      	ldr	r2, [pc, #12]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018a8:	e014      	b.n	80018d4 <HAL_RCC_OscConfig+0x52c>
 80018aa:	bf00      	nop
 80018ac:	40021000 	.word	0x40021000
 80018b0:	40007000 	.word	0x40007000
 80018b4:	4b91      	ldr	r3, [pc, #580]	; (8001afc <HAL_RCC_OscConfig+0x754>)
 80018b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ba:	4a90      	ldr	r2, [pc, #576]	; (8001afc <HAL_RCC_OscConfig+0x754>)
 80018bc:	f023 0301 	bic.w	r3, r3, #1
 80018c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018c4:	4b8d      	ldr	r3, [pc, #564]	; (8001afc <HAL_RCC_OscConfig+0x754>)
 80018c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ca:	4a8c      	ldr	r2, [pc, #560]	; (8001afc <HAL_RCC_OscConfig+0x754>)
 80018cc:	f023 0304 	bic.w	r3, r3, #4
 80018d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d016      	beq.n	800190a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018dc:	f7ff f9a4 	bl	8000c28 <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018e2:	e00a      	b.n	80018fa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018e4:	f7ff f9a0 	bl	8000c28 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e138      	b.n	8001b6c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018fa:	4b80      	ldr	r3, [pc, #512]	; (8001afc <HAL_RCC_OscConfig+0x754>)
 80018fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d0ed      	beq.n	80018e4 <HAL_RCC_OscConfig+0x53c>
 8001908:	e015      	b.n	8001936 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800190a:	f7ff f98d 	bl	8000c28 <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001910:	e00a      	b.n	8001928 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001912:	f7ff f989 	bl	8000c28 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001920:	4293      	cmp	r3, r2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e121      	b.n	8001b6c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001928:	4b74      	ldr	r3, [pc, #464]	; (8001afc <HAL_RCC_OscConfig+0x754>)
 800192a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1ed      	bne.n	8001912 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001936:	7ffb      	ldrb	r3, [r7, #31]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d105      	bne.n	8001948 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800193c:	4b6f      	ldr	r3, [pc, #444]	; (8001afc <HAL_RCC_OscConfig+0x754>)
 800193e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001940:	4a6e      	ldr	r2, [pc, #440]	; (8001afc <HAL_RCC_OscConfig+0x754>)
 8001942:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001946:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194c:	2b00      	cmp	r3, #0
 800194e:	f000 810c 	beq.w	8001b6a <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001956:	2b02      	cmp	r3, #2
 8001958:	f040 80d4 	bne.w	8001b04 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800195c:	4b67      	ldr	r3, [pc, #412]	; (8001afc <HAL_RCC_OscConfig+0x754>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	f003 0203 	and.w	r2, r3, #3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196c:	429a      	cmp	r2, r3
 800196e:	d130      	bne.n	80019d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	3b01      	subs	r3, #1
 800197c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800197e:	429a      	cmp	r2, r3
 8001980:	d127      	bne.n	80019d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800198c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800198e:	429a      	cmp	r2, r3
 8001990:	d11f      	bne.n	80019d2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800199c:	2a07      	cmp	r2, #7
 800199e:	bf14      	ite	ne
 80019a0:	2201      	movne	r2, #1
 80019a2:	2200      	moveq	r2, #0
 80019a4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d113      	bne.n	80019d2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b4:	085b      	lsrs	r3, r3, #1
 80019b6:	3b01      	subs	r3, #1
 80019b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d109      	bne.n	80019d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c8:	085b      	lsrs	r3, r3, #1
 80019ca:	3b01      	subs	r3, #1
 80019cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d06e      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	2b0c      	cmp	r3, #12
 80019d6:	d069      	beq.n	8001aac <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80019d8:	4b48      	ldr	r3, [pc, #288]	; (8001afc <HAL_RCC_OscConfig+0x754>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d105      	bne.n	80019f0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80019e4:	4b45      	ldr	r3, [pc, #276]	; (8001afc <HAL_RCC_OscConfig+0x754>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e0bb      	b.n	8001b6c <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80019f4:	4b41      	ldr	r3, [pc, #260]	; (8001afc <HAL_RCC_OscConfig+0x754>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a40      	ldr	r2, [pc, #256]	; (8001afc <HAL_RCC_OscConfig+0x754>)
 80019fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019fe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a00:	f7ff f912 	bl	8000c28 <HAL_GetTick>
 8001a04:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a08:	f7ff f90e 	bl	8000c28 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e0a8      	b.n	8001b6c <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a1a:	4b38      	ldr	r3, [pc, #224]	; (8001afc <HAL_RCC_OscConfig+0x754>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1f0      	bne.n	8001a08 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a26:	4b35      	ldr	r3, [pc, #212]	; (8001afc <HAL_RCC_OscConfig+0x754>)
 8001a28:	68da      	ldr	r2, [r3, #12]
 8001a2a:	4b35      	ldr	r3, [pc, #212]	; (8001b00 <HAL_RCC_OscConfig+0x758>)
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a36:	3a01      	subs	r2, #1
 8001a38:	0112      	lsls	r2, r2, #4
 8001a3a:	4311      	orrs	r1, r2
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a40:	0212      	lsls	r2, r2, #8
 8001a42:	4311      	orrs	r1, r2
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a48:	0852      	lsrs	r2, r2, #1
 8001a4a:	3a01      	subs	r2, #1
 8001a4c:	0552      	lsls	r2, r2, #21
 8001a4e:	4311      	orrs	r1, r2
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a54:	0852      	lsrs	r2, r2, #1
 8001a56:	3a01      	subs	r2, #1
 8001a58:	0652      	lsls	r2, r2, #25
 8001a5a:	4311      	orrs	r1, r2
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a60:	0912      	lsrs	r2, r2, #4
 8001a62:	0452      	lsls	r2, r2, #17
 8001a64:	430a      	orrs	r2, r1
 8001a66:	4925      	ldr	r1, [pc, #148]	; (8001afc <HAL_RCC_OscConfig+0x754>)
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a6c:	4b23      	ldr	r3, [pc, #140]	; (8001afc <HAL_RCC_OscConfig+0x754>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a22      	ldr	r2, [pc, #136]	; (8001afc <HAL_RCC_OscConfig+0x754>)
 8001a72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a76:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a78:	4b20      	ldr	r3, [pc, #128]	; (8001afc <HAL_RCC_OscConfig+0x754>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	4a1f      	ldr	r2, [pc, #124]	; (8001afc <HAL_RCC_OscConfig+0x754>)
 8001a7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a82:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a84:	f7ff f8d0 	bl	8000c28 <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a8c:	f7ff f8cc 	bl	8000c28 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e066      	b.n	8001b6c <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a9e:	4b17      	ldr	r3, [pc, #92]	; (8001afc <HAL_RCC_OscConfig+0x754>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d0f0      	beq.n	8001a8c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001aaa:	e05e      	b.n	8001b6a <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e05d      	b.n	8001b6c <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ab0:	4b12      	ldr	r3, [pc, #72]	; (8001afc <HAL_RCC_OscConfig+0x754>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d156      	bne.n	8001b6a <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001abc:	4b0f      	ldr	r3, [pc, #60]	; (8001afc <HAL_RCC_OscConfig+0x754>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a0e      	ldr	r2, [pc, #56]	; (8001afc <HAL_RCC_OscConfig+0x754>)
 8001ac2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ac6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <HAL_RCC_OscConfig+0x754>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	4a0b      	ldr	r2, [pc, #44]	; (8001afc <HAL_RCC_OscConfig+0x754>)
 8001ace:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ad2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ad4:	f7ff f8a8 	bl	8000c28 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001adc:	f7ff f8a4 	bl	8000c28 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e03e      	b.n	8001b6c <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aee:	4b03      	ldr	r3, [pc, #12]	; (8001afc <HAL_RCC_OscConfig+0x754>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d0f0      	beq.n	8001adc <HAL_RCC_OscConfig+0x734>
 8001afa:	e036      	b.n	8001b6a <HAL_RCC_OscConfig+0x7c2>
 8001afc:	40021000 	.word	0x40021000
 8001b00:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	2b0c      	cmp	r3, #12
 8001b08:	d02d      	beq.n	8001b66 <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b0a:	4b1a      	ldr	r3, [pc, #104]	; (8001b74 <HAL_RCC_OscConfig+0x7cc>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a19      	ldr	r2, [pc, #100]	; (8001b74 <HAL_RCC_OscConfig+0x7cc>)
 8001b10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b14:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001b16:	4b17      	ldr	r3, [pc, #92]	; (8001b74 <HAL_RCC_OscConfig+0x7cc>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d105      	bne.n	8001b2e <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001b22:	4b14      	ldr	r3, [pc, #80]	; (8001b74 <HAL_RCC_OscConfig+0x7cc>)
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	4a13      	ldr	r2, [pc, #76]	; (8001b74 <HAL_RCC_OscConfig+0x7cc>)
 8001b28:	f023 0303 	bic.w	r3, r3, #3
 8001b2c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b2e:	4b11      	ldr	r3, [pc, #68]	; (8001b74 <HAL_RCC_OscConfig+0x7cc>)
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	4a10      	ldr	r2, [pc, #64]	; (8001b74 <HAL_RCC_OscConfig+0x7cc>)
 8001b34:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001b38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b3c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3e:	f7ff f873 	bl	8000c28 <HAL_GetTick>
 8001b42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b44:	e008      	b.n	8001b58 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b46:	f7ff f86f 	bl	8000c28 <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e009      	b.n	8001b6c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b58:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <HAL_RCC_OscConfig+0x7cc>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d1f0      	bne.n	8001b46 <HAL_RCC_OscConfig+0x79e>
 8001b64:	e001      	b.n	8001b6a <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e000      	b.n	8001b6c <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3720      	adds	r7, #32
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40021000 	.word	0x40021000

08001b78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d101      	bne.n	8001b8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e0c8      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b8c:	4b66      	ldr	r3, [pc, #408]	; (8001d28 <HAL_RCC_ClockConfig+0x1b0>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0307 	and.w	r3, r3, #7
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d910      	bls.n	8001bbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b9a:	4b63      	ldr	r3, [pc, #396]	; (8001d28 <HAL_RCC_ClockConfig+0x1b0>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f023 0207 	bic.w	r2, r3, #7
 8001ba2:	4961      	ldr	r1, [pc, #388]	; (8001d28 <HAL_RCC_ClockConfig+0x1b0>)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001baa:	4b5f      	ldr	r3, [pc, #380]	; (8001d28 <HAL_RCC_ClockConfig+0x1b0>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d001      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e0b0      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d04c      	beq.n	8001c62 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	2b03      	cmp	r3, #3
 8001bce:	d107      	bne.n	8001be0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bd0:	4b56      	ldr	r3, [pc, #344]	; (8001d2c <HAL_RCC_ClockConfig+0x1b4>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d121      	bne.n	8001c20 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e09e      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d107      	bne.n	8001bf8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001be8:	4b50      	ldr	r3, [pc, #320]	; (8001d2c <HAL_RCC_ClockConfig+0x1b4>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d115      	bne.n	8001c20 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e092      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d107      	bne.n	8001c10 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c00:	4b4a      	ldr	r3, [pc, #296]	; (8001d2c <HAL_RCC_ClockConfig+0x1b4>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d109      	bne.n	8001c20 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e086      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c10:	4b46      	ldr	r3, [pc, #280]	; (8001d2c <HAL_RCC_ClockConfig+0x1b4>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e07e      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c20:	4b42      	ldr	r3, [pc, #264]	; (8001d2c <HAL_RCC_ClockConfig+0x1b4>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f023 0203 	bic.w	r2, r3, #3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	493f      	ldr	r1, [pc, #252]	; (8001d2c <HAL_RCC_ClockConfig+0x1b4>)
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c32:	f7fe fff9 	bl	8000c28 <HAL_GetTick>
 8001c36:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c38:	e00a      	b.n	8001c50 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c3a:	f7fe fff5 	bl	8000c28 <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e066      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c50:	4b36      	ldr	r3, [pc, #216]	; (8001d2c <HAL_RCC_ClockConfig+0x1b4>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f003 020c 	and.w	r2, r3, #12
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d1eb      	bne.n	8001c3a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d008      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c6e:	4b2f      	ldr	r3, [pc, #188]	; (8001d2c <HAL_RCC_ClockConfig+0x1b4>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	492c      	ldr	r1, [pc, #176]	; (8001d2c <HAL_RCC_ClockConfig+0x1b4>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c80:	4b29      	ldr	r3, [pc, #164]	; (8001d28 <HAL_RCC_ClockConfig+0x1b0>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0307 	and.w	r3, r3, #7
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d210      	bcs.n	8001cb0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c8e:	4b26      	ldr	r3, [pc, #152]	; (8001d28 <HAL_RCC_ClockConfig+0x1b0>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f023 0207 	bic.w	r2, r3, #7
 8001c96:	4924      	ldr	r1, [pc, #144]	; (8001d28 <HAL_RCC_ClockConfig+0x1b0>)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c9e:	4b22      	ldr	r3, [pc, #136]	; (8001d28 <HAL_RCC_ClockConfig+0x1b0>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	683a      	ldr	r2, [r7, #0]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d001      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e036      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d008      	beq.n	8001cce <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cbc:	4b1b      	ldr	r3, [pc, #108]	; (8001d2c <HAL_RCC_ClockConfig+0x1b4>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	4918      	ldr	r1, [pc, #96]	; (8001d2c <HAL_RCC_ClockConfig+0x1b4>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0308 	and.w	r3, r3, #8
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d009      	beq.n	8001cee <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cda:	4b14      	ldr	r3, [pc, #80]	; (8001d2c <HAL_RCC_ClockConfig+0x1b4>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	4910      	ldr	r1, [pc, #64]	; (8001d2c <HAL_RCC_ClockConfig+0x1b4>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cee:	f000 f825 	bl	8001d3c <HAL_RCC_GetSysClockFreq>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	4b0d      	ldr	r3, [pc, #52]	; (8001d2c <HAL_RCC_ClockConfig+0x1b4>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	091b      	lsrs	r3, r3, #4
 8001cfa:	f003 030f 	and.w	r3, r3, #15
 8001cfe:	490c      	ldr	r1, [pc, #48]	; (8001d30 <HAL_RCC_ClockConfig+0x1b8>)
 8001d00:	5ccb      	ldrb	r3, [r1, r3]
 8001d02:	f003 031f 	and.w	r3, r3, #31
 8001d06:	fa22 f303 	lsr.w	r3, r2, r3
 8001d0a:	4a0a      	ldr	r2, [pc, #40]	; (8001d34 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d0e:	4b0a      	ldr	r3, [pc, #40]	; (8001d38 <HAL_RCC_ClockConfig+0x1c0>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7fe ff38 	bl	8000b88 <HAL_InitTick>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d1c:	7afb      	ldrb	r3, [r7, #11]
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40022000 	.word	0x40022000
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	08008594 	.word	0x08008594
 8001d34:	20000000 	.word	0x20000000
 8001d38:	20000004 	.word	0x20000004

08001d3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b089      	sub	sp, #36	; 0x24
 8001d40:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d42:	2300      	movs	r3, #0
 8001d44:	61fb      	str	r3, [r7, #28]
 8001d46:	2300      	movs	r3, #0
 8001d48:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d4a:	4b3e      	ldr	r3, [pc, #248]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 030c 	and.w	r3, r3, #12
 8001d52:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d54:	4b3b      	ldr	r3, [pc, #236]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	f003 0303 	and.w	r3, r3, #3
 8001d5c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d005      	beq.n	8001d70 <HAL_RCC_GetSysClockFreq+0x34>
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	2b0c      	cmp	r3, #12
 8001d68:	d121      	bne.n	8001dae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d11e      	bne.n	8001dae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d70:	4b34      	ldr	r3, [pc, #208]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0308 	and.w	r3, r3, #8
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d107      	bne.n	8001d8c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d7c:	4b31      	ldr	r3, [pc, #196]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d82:	0a1b      	lsrs	r3, r3, #8
 8001d84:	f003 030f 	and.w	r3, r3, #15
 8001d88:	61fb      	str	r3, [r7, #28]
 8001d8a:	e005      	b.n	8001d98 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d8c:	4b2d      	ldr	r3, [pc, #180]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	091b      	lsrs	r3, r3, #4
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d98:	4a2b      	ldr	r2, [pc, #172]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d10d      	bne.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dac:	e00a      	b.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	2b04      	cmp	r3, #4
 8001db2:	d102      	bne.n	8001dba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001db4:	4b25      	ldr	r3, [pc, #148]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x110>)
 8001db6:	61bb      	str	r3, [r7, #24]
 8001db8:	e004      	b.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	2b08      	cmp	r3, #8
 8001dbe:	d101      	bne.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001dc0:	4b23      	ldr	r3, [pc, #140]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x114>)
 8001dc2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	2b0c      	cmp	r3, #12
 8001dc8:	d134      	bne.n	8001e34 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dca:	4b1e      	ldr	r3, [pc, #120]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d003      	beq.n	8001de2 <HAL_RCC_GetSysClockFreq+0xa6>
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	2b03      	cmp	r3, #3
 8001dde:	d003      	beq.n	8001de8 <HAL_RCC_GetSysClockFreq+0xac>
 8001de0:	e005      	b.n	8001dee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001de2:	4b1a      	ldr	r3, [pc, #104]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x110>)
 8001de4:	617b      	str	r3, [r7, #20]
      break;
 8001de6:	e005      	b.n	8001df4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001de8:	4b19      	ldr	r3, [pc, #100]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x114>)
 8001dea:	617b      	str	r3, [r7, #20]
      break;
 8001dec:	e002      	b.n	8001df4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	617b      	str	r3, [r7, #20]
      break;
 8001df2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001df4:	4b13      	ldr	r3, [pc, #76]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	091b      	lsrs	r3, r3, #4
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	3301      	adds	r3, #1
 8001e00:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e02:	4b10      	ldr	r3, [pc, #64]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	0a1b      	lsrs	r3, r3, #8
 8001e08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e0c:	697a      	ldr	r2, [r7, #20]
 8001e0e:	fb03 f202 	mul.w	r2, r3, r2
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e18:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e1a:	4b0a      	ldr	r3, [pc, #40]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	0e5b      	lsrs	r3, r3, #25
 8001e20:	f003 0303 	and.w	r3, r3, #3
 8001e24:	3301      	adds	r3, #1
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e32:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e34:	69bb      	ldr	r3, [r7, #24]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3724      	adds	r7, #36	; 0x24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	40021000 	.word	0x40021000
 8001e48:	080085ac 	.word	0x080085ac
 8001e4c:	00f42400 	.word	0x00f42400
 8001e50:	007a1200 	.word	0x007a1200

08001e54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e58:	4b03      	ldr	r3, [pc, #12]	; (8001e68 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	20000000 	.word	0x20000000

08001e6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e70:	f7ff fff0 	bl	8001e54 <HAL_RCC_GetHCLKFreq>
 8001e74:	4602      	mov	r2, r0
 8001e76:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	0a1b      	lsrs	r3, r3, #8
 8001e7c:	f003 0307 	and.w	r3, r3, #7
 8001e80:	4904      	ldr	r1, [pc, #16]	; (8001e94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e82:	5ccb      	ldrb	r3, [r1, r3]
 8001e84:	f003 031f 	and.w	r3, r3, #31
 8001e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40021000 	.word	0x40021000
 8001e94:	080085a4 	.word	0x080085a4

08001e98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e9c:	f7ff ffda 	bl	8001e54 <HAL_RCC_GetHCLKFreq>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	0adb      	lsrs	r3, r3, #11
 8001ea8:	f003 0307 	and.w	r3, r3, #7
 8001eac:	4904      	ldr	r1, [pc, #16]	; (8001ec0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001eae:	5ccb      	ldrb	r3, [r1, r3]
 8001eb0:	f003 031f 	and.w	r3, r3, #31
 8001eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	080085a4 	.word	0x080085a4

08001ec4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ecc:	2300      	movs	r3, #0
 8001ece:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ed0:	4b2a      	ldr	r3, [pc, #168]	; (8001f7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001edc:	f7ff fa00 	bl	80012e0 <HAL_PWREx_GetVoltageRange>
 8001ee0:	6178      	str	r0, [r7, #20]
 8001ee2:	e014      	b.n	8001f0e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ee4:	4b25      	ldr	r3, [pc, #148]	; (8001f7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee8:	4a24      	ldr	r2, [pc, #144]	; (8001f7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eee:	6593      	str	r3, [r2, #88]	; 0x58
 8001ef0:	4b22      	ldr	r3, [pc, #136]	; (8001f7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001efc:	f7ff f9f0 	bl	80012e0 <HAL_PWREx_GetVoltageRange>
 8001f00:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f02:	4b1e      	ldr	r3, [pc, #120]	; (8001f7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f06:	4a1d      	ldr	r2, [pc, #116]	; (8001f7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f0c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f14:	d10b      	bne.n	8001f2e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b80      	cmp	r3, #128	; 0x80
 8001f1a:	d919      	bls.n	8001f50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2ba0      	cmp	r3, #160	; 0xa0
 8001f20:	d902      	bls.n	8001f28 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f22:	2302      	movs	r3, #2
 8001f24:	613b      	str	r3, [r7, #16]
 8001f26:	e013      	b.n	8001f50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f28:	2301      	movs	r3, #1
 8001f2a:	613b      	str	r3, [r7, #16]
 8001f2c:	e010      	b.n	8001f50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2b80      	cmp	r3, #128	; 0x80
 8001f32:	d902      	bls.n	8001f3a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f34:	2303      	movs	r3, #3
 8001f36:	613b      	str	r3, [r7, #16]
 8001f38:	e00a      	b.n	8001f50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2b80      	cmp	r3, #128	; 0x80
 8001f3e:	d102      	bne.n	8001f46 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f40:	2302      	movs	r3, #2
 8001f42:	613b      	str	r3, [r7, #16]
 8001f44:	e004      	b.n	8001f50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2b70      	cmp	r3, #112	; 0x70
 8001f4a:	d101      	bne.n	8001f50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f50:	4b0b      	ldr	r3, [pc, #44]	; (8001f80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f023 0207 	bic.w	r2, r3, #7
 8001f58:	4909      	ldr	r1, [pc, #36]	; (8001f80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f60:	4b07      	ldr	r3, [pc, #28]	; (8001f80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0307 	and.w	r3, r3, #7
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d001      	beq.n	8001f72 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e000      	b.n	8001f74 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3718      	adds	r7, #24
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	40022000 	.word	0x40022000

08001f84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f90:	2300      	movs	r3, #0
 8001f92:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d041      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fa4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001fa8:	d02a      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001faa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001fae:	d824      	bhi.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001fb0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001fb4:	d008      	beq.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001fb6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001fba:	d81e      	bhi.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00a      	beq.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001fc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fc4:	d010      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001fc6:	e018      	b.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001fc8:	4b86      	ldr	r3, [pc, #536]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	4a85      	ldr	r2, [pc, #532]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fd2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fd4:	e015      	b.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	3304      	adds	r3, #4
 8001fda:	2100      	movs	r1, #0
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f000 fabb 	bl	8002558 <RCCEx_PLLSAI1_Config>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fe6:	e00c      	b.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3320      	adds	r3, #32
 8001fec:	2100      	movs	r1, #0
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f000 fba6 	bl	8002740 <RCCEx_PLLSAI2_Config>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ff8:	e003      	b.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	74fb      	strb	r3, [r7, #19]
      break;
 8001ffe:	e000      	b.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002000:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002002:	7cfb      	ldrb	r3, [r7, #19]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d10b      	bne.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002008:	4b76      	ldr	r3, [pc, #472]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800200a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800200e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002016:	4973      	ldr	r1, [pc, #460]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002018:	4313      	orrs	r3, r2
 800201a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800201e:	e001      	b.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002020:	7cfb      	ldrb	r3, [r7, #19]
 8002022:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d041      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002034:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002038:	d02a      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800203a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800203e:	d824      	bhi.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002040:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002044:	d008      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002046:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800204a:	d81e      	bhi.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800204c:	2b00      	cmp	r3, #0
 800204e:	d00a      	beq.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002050:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002054:	d010      	beq.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002056:	e018      	b.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002058:	4b62      	ldr	r3, [pc, #392]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	4a61      	ldr	r2, [pc, #388]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800205e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002062:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002064:	e015      	b.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	3304      	adds	r3, #4
 800206a:	2100      	movs	r1, #0
 800206c:	4618      	mov	r0, r3
 800206e:	f000 fa73 	bl	8002558 <RCCEx_PLLSAI1_Config>
 8002072:	4603      	mov	r3, r0
 8002074:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002076:	e00c      	b.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3320      	adds	r3, #32
 800207c:	2100      	movs	r1, #0
 800207e:	4618      	mov	r0, r3
 8002080:	f000 fb5e 	bl	8002740 <RCCEx_PLLSAI2_Config>
 8002084:	4603      	mov	r3, r0
 8002086:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002088:	e003      	b.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	74fb      	strb	r3, [r7, #19]
      break;
 800208e:	e000      	b.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002090:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002092:	7cfb      	ldrb	r3, [r7, #19]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d10b      	bne.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002098:	4b52      	ldr	r3, [pc, #328]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800209a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800209e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020a6:	494f      	ldr	r1, [pc, #316]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80020ae:	e001      	b.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020b0:	7cfb      	ldrb	r3, [r7, #19]
 80020b2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f000 80a0 	beq.w	8002202 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020c2:	2300      	movs	r3, #0
 80020c4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020c6:	4b47      	ldr	r3, [pc, #284]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80020d2:	2301      	movs	r3, #1
 80020d4:	e000      	b.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80020d6:	2300      	movs	r3, #0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d00d      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020dc:	4b41      	ldr	r3, [pc, #260]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e0:	4a40      	ldr	r2, [pc, #256]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020e6:	6593      	str	r3, [r2, #88]	; 0x58
 80020e8:	4b3e      	ldr	r3, [pc, #248]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f0:	60bb      	str	r3, [r7, #8]
 80020f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020f4:	2301      	movs	r3, #1
 80020f6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020f8:	4b3b      	ldr	r3, [pc, #236]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a3a      	ldr	r2, [pc, #232]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002102:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002104:	f7fe fd90 	bl	8000c28 <HAL_GetTick>
 8002108:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800210a:	e009      	b.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800210c:	f7fe fd8c 	bl	8000c28 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d902      	bls.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	74fb      	strb	r3, [r7, #19]
        break;
 800211e:	e005      	b.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002120:	4b31      	ldr	r3, [pc, #196]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0ef      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800212c:	7cfb      	ldrb	r3, [r7, #19]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d15c      	bne.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002132:	4b2c      	ldr	r3, [pc, #176]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002138:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800213c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d01f      	beq.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	429a      	cmp	r2, r3
 800214e:	d019      	beq.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002150:	4b24      	ldr	r3, [pc, #144]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002156:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800215a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800215c:	4b21      	ldr	r3, [pc, #132]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800215e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002162:	4a20      	ldr	r2, [pc, #128]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002168:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800216c:	4b1d      	ldr	r3, [pc, #116]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800216e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002172:	4a1c      	ldr	r2, [pc, #112]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002174:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002178:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800217c:	4a19      	ldr	r2, [pc, #100]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b00      	cmp	r3, #0
 800218c:	d016      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218e:	f7fe fd4b 	bl	8000c28 <HAL_GetTick>
 8002192:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002194:	e00b      	b.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002196:	f7fe fd47 	bl	8000c28 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d902      	bls.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	74fb      	strb	r3, [r7, #19]
            break;
 80021ac:	e006      	b.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021ae:	4b0d      	ldr	r3, [pc, #52]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d0ec      	beq.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80021bc:	7cfb      	ldrb	r3, [r7, #19]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d10c      	bne.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021c2:	4b08      	ldr	r3, [pc, #32]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021d2:	4904      	ldr	r1, [pc, #16]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80021da:	e009      	b.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021dc:	7cfb      	ldrb	r3, [r7, #19]
 80021de:	74bb      	strb	r3, [r7, #18]
 80021e0:	e006      	b.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80021e2:	bf00      	nop
 80021e4:	40021000 	.word	0x40021000
 80021e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021ec:	7cfb      	ldrb	r3, [r7, #19]
 80021ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021f0:	7c7b      	ldrb	r3, [r7, #17]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d105      	bne.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021f6:	4b9e      	ldr	r3, [pc, #632]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fa:	4a9d      	ldr	r2, [pc, #628]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002200:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00a      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800220e:	4b98      	ldr	r3, [pc, #608]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002214:	f023 0203 	bic.w	r2, r3, #3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800221c:	4994      	ldr	r1, [pc, #592]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800221e:	4313      	orrs	r3, r2
 8002220:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00a      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002230:	4b8f      	ldr	r3, [pc, #572]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002236:	f023 020c 	bic.w	r2, r3, #12
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800223e:	498c      	ldr	r1, [pc, #560]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002240:	4313      	orrs	r3, r2
 8002242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0304 	and.w	r3, r3, #4
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00a      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002252:	4b87      	ldr	r3, [pc, #540]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002258:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002260:	4983      	ldr	r1, [pc, #524]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002262:	4313      	orrs	r3, r2
 8002264:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0308 	and.w	r3, r3, #8
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00a      	beq.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002274:	4b7e      	ldr	r3, [pc, #504]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800227a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002282:	497b      	ldr	r1, [pc, #492]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002284:	4313      	orrs	r3, r2
 8002286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0310 	and.w	r3, r3, #16
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00a      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002296:	4b76      	ldr	r3, [pc, #472]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800229c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022a4:	4972      	ldr	r1, [pc, #456]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0320 	and.w	r3, r3, #32
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00a      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022b8:	4b6d      	ldr	r3, [pc, #436]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c6:	496a      	ldr	r1, [pc, #424]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00a      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022da:	4b65      	ldr	r3, [pc, #404]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e8:	4961      	ldr	r1, [pc, #388]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00a      	beq.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80022fc:	4b5c      	ldr	r3, [pc, #368]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002302:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800230a:	4959      	ldr	r1, [pc, #356]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800230c:	4313      	orrs	r3, r2
 800230e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00a      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800231e:	4b54      	ldr	r3, [pc, #336]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002324:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800232c:	4950      	ldr	r1, [pc, #320]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800232e:	4313      	orrs	r3, r2
 8002330:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00a      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002340:	4b4b      	ldr	r3, [pc, #300]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002346:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800234e:	4948      	ldr	r1, [pc, #288]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002350:	4313      	orrs	r3, r2
 8002352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00a      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002362:	4b43      	ldr	r3, [pc, #268]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002368:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002370:	493f      	ldr	r1, [pc, #252]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002372:	4313      	orrs	r3, r2
 8002374:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d028      	beq.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002384:	4b3a      	ldr	r3, [pc, #232]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002392:	4937      	ldr	r1, [pc, #220]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002394:	4313      	orrs	r3, r2
 8002396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800239e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023a2:	d106      	bne.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023a4:	4b32      	ldr	r3, [pc, #200]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	4a31      	ldr	r2, [pc, #196]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023ae:	60d3      	str	r3, [r2, #12]
 80023b0:	e011      	b.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023ba:	d10c      	bne.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3304      	adds	r3, #4
 80023c0:	2101      	movs	r1, #1
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 f8c8 	bl	8002558 <RCCEx_PLLSAI1_Config>
 80023c8:	4603      	mov	r3, r0
 80023ca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80023cc:	7cfb      	ldrb	r3, [r7, #19]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80023d2:	7cfb      	ldrb	r3, [r7, #19]
 80023d4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d028      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80023e2:	4b23      	ldr	r3, [pc, #140]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f0:	491f      	ldr	r1, [pc, #124]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002400:	d106      	bne.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002402:	4b1b      	ldr	r3, [pc, #108]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	4a1a      	ldr	r2, [pc, #104]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002408:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800240c:	60d3      	str	r3, [r2, #12]
 800240e:	e011      	b.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002414:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002418:	d10c      	bne.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	3304      	adds	r3, #4
 800241e:	2101      	movs	r1, #1
 8002420:	4618      	mov	r0, r3
 8002422:	f000 f899 	bl	8002558 <RCCEx_PLLSAI1_Config>
 8002426:	4603      	mov	r3, r0
 8002428:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800242a:	7cfb      	ldrb	r3, [r7, #19]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002430:	7cfb      	ldrb	r3, [r7, #19]
 8002432:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d02b      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002440:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002446:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800244e:	4908      	ldr	r1, [pc, #32]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002450:	4313      	orrs	r3, r2
 8002452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800245a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800245e:	d109      	bne.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002460:	4b03      	ldr	r3, [pc, #12]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	4a02      	ldr	r2, [pc, #8]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002466:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800246a:	60d3      	str	r3, [r2, #12]
 800246c:	e014      	b.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800246e:	bf00      	nop
 8002470:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002478:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800247c:	d10c      	bne.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	3304      	adds	r3, #4
 8002482:	2101      	movs	r1, #1
 8002484:	4618      	mov	r0, r3
 8002486:	f000 f867 	bl	8002558 <RCCEx_PLLSAI1_Config>
 800248a:	4603      	mov	r3, r0
 800248c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800248e:	7cfb      	ldrb	r3, [r7, #19]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002494:	7cfb      	ldrb	r3, [r7, #19]
 8002496:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d02f      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024a4:	4b2b      	ldr	r3, [pc, #172]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024b2:	4928      	ldr	r1, [pc, #160]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024c2:	d10d      	bne.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3304      	adds	r3, #4
 80024c8:	2102      	movs	r1, #2
 80024ca:	4618      	mov	r0, r3
 80024cc:	f000 f844 	bl	8002558 <RCCEx_PLLSAI1_Config>
 80024d0:	4603      	mov	r3, r0
 80024d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024d4:	7cfb      	ldrb	r3, [r7, #19]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d014      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80024da:	7cfb      	ldrb	r3, [r7, #19]
 80024dc:	74bb      	strb	r3, [r7, #18]
 80024de:	e011      	b.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024e8:	d10c      	bne.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	3320      	adds	r3, #32
 80024ee:	2102      	movs	r1, #2
 80024f0:	4618      	mov	r0, r3
 80024f2:	f000 f925 	bl	8002740 <RCCEx_PLLSAI2_Config>
 80024f6:	4603      	mov	r3, r0
 80024f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024fa:	7cfb      	ldrb	r3, [r7, #19]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002500:	7cfb      	ldrb	r3, [r7, #19]
 8002502:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00a      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002510:	4b10      	ldr	r3, [pc, #64]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002516:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800251e:	490d      	ldr	r1, [pc, #52]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002520:	4313      	orrs	r3, r2
 8002522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00b      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002532:	4b08      	ldr	r3, [pc, #32]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002538:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002542:	4904      	ldr	r1, [pc, #16]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002544:	4313      	orrs	r3, r2
 8002546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800254a:	7cbb      	ldrb	r3, [r7, #18]
}
 800254c:	4618      	mov	r0, r3
 800254e:	3718      	adds	r7, #24
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40021000 	.word	0x40021000

08002558 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002562:	2300      	movs	r3, #0
 8002564:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002566:	4b75      	ldr	r3, [pc, #468]	; (800273c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d018      	beq.n	80025a4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002572:	4b72      	ldr	r3, [pc, #456]	; (800273c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	f003 0203 	and.w	r2, r3, #3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	429a      	cmp	r2, r3
 8002580:	d10d      	bne.n	800259e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
       ||
 8002586:	2b00      	cmp	r3, #0
 8002588:	d009      	beq.n	800259e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800258a:	4b6c      	ldr	r3, [pc, #432]	; (800273c <RCCEx_PLLSAI1_Config+0x1e4>)
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	091b      	lsrs	r3, r3, #4
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	1c5a      	adds	r2, r3, #1
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
       ||
 800259a:	429a      	cmp	r2, r3
 800259c:	d047      	beq.n	800262e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	73fb      	strb	r3, [r7, #15]
 80025a2:	e044      	b.n	800262e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2b03      	cmp	r3, #3
 80025aa:	d018      	beq.n	80025de <RCCEx_PLLSAI1_Config+0x86>
 80025ac:	2b03      	cmp	r3, #3
 80025ae:	d825      	bhi.n	80025fc <RCCEx_PLLSAI1_Config+0xa4>
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d002      	beq.n	80025ba <RCCEx_PLLSAI1_Config+0x62>
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d009      	beq.n	80025cc <RCCEx_PLLSAI1_Config+0x74>
 80025b8:	e020      	b.n	80025fc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025ba:	4b60      	ldr	r3, [pc, #384]	; (800273c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d11d      	bne.n	8002602 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025ca:	e01a      	b.n	8002602 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025cc:	4b5b      	ldr	r3, [pc, #364]	; (800273c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d116      	bne.n	8002606 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025dc:	e013      	b.n	8002606 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025de:	4b57      	ldr	r3, [pc, #348]	; (800273c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10f      	bne.n	800260a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025ea:	4b54      	ldr	r3, [pc, #336]	; (800273c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d109      	bne.n	800260a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025fa:	e006      	b.n	800260a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002600:	e004      	b.n	800260c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002602:	bf00      	nop
 8002604:	e002      	b.n	800260c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002606:	bf00      	nop
 8002608:	e000      	b.n	800260c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800260a:	bf00      	nop
    }

    if(status == HAL_OK)
 800260c:	7bfb      	ldrb	r3, [r7, #15]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10d      	bne.n	800262e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002612:	4b4a      	ldr	r3, [pc, #296]	; (800273c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6819      	ldr	r1, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	3b01      	subs	r3, #1
 8002624:	011b      	lsls	r3, r3, #4
 8002626:	430b      	orrs	r3, r1
 8002628:	4944      	ldr	r1, [pc, #272]	; (800273c <RCCEx_PLLSAI1_Config+0x1e4>)
 800262a:	4313      	orrs	r3, r2
 800262c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800262e:	7bfb      	ldrb	r3, [r7, #15]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d17d      	bne.n	8002730 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002634:	4b41      	ldr	r3, [pc, #260]	; (800273c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a40      	ldr	r2, [pc, #256]	; (800273c <RCCEx_PLLSAI1_Config+0x1e4>)
 800263a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800263e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002640:	f7fe faf2 	bl	8000c28 <HAL_GetTick>
 8002644:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002646:	e009      	b.n	800265c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002648:	f7fe faee 	bl	8000c28 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d902      	bls.n	800265c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	73fb      	strb	r3, [r7, #15]
        break;
 800265a:	e005      	b.n	8002668 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800265c:	4b37      	ldr	r3, [pc, #220]	; (800273c <RCCEx_PLLSAI1_Config+0x1e4>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1ef      	bne.n	8002648 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002668:	7bfb      	ldrb	r3, [r7, #15]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d160      	bne.n	8002730 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d111      	bne.n	8002698 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002674:	4b31      	ldr	r3, [pc, #196]	; (800273c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800267c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	6892      	ldr	r2, [r2, #8]
 8002684:	0211      	lsls	r1, r2, #8
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	68d2      	ldr	r2, [r2, #12]
 800268a:	0912      	lsrs	r2, r2, #4
 800268c:	0452      	lsls	r2, r2, #17
 800268e:	430a      	orrs	r2, r1
 8002690:	492a      	ldr	r1, [pc, #168]	; (800273c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002692:	4313      	orrs	r3, r2
 8002694:	610b      	str	r3, [r1, #16]
 8002696:	e027      	b.n	80026e8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d112      	bne.n	80026c4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800269e:	4b27      	ldr	r3, [pc, #156]	; (800273c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80026a6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	6892      	ldr	r2, [r2, #8]
 80026ae:	0211      	lsls	r1, r2, #8
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	6912      	ldr	r2, [r2, #16]
 80026b4:	0852      	lsrs	r2, r2, #1
 80026b6:	3a01      	subs	r2, #1
 80026b8:	0552      	lsls	r2, r2, #21
 80026ba:	430a      	orrs	r2, r1
 80026bc:	491f      	ldr	r1, [pc, #124]	; (800273c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	610b      	str	r3, [r1, #16]
 80026c2:	e011      	b.n	80026e8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026c4:	4b1d      	ldr	r3, [pc, #116]	; (800273c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80026cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	6892      	ldr	r2, [r2, #8]
 80026d4:	0211      	lsls	r1, r2, #8
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	6952      	ldr	r2, [r2, #20]
 80026da:	0852      	lsrs	r2, r2, #1
 80026dc:	3a01      	subs	r2, #1
 80026de:	0652      	lsls	r2, r2, #25
 80026e0:	430a      	orrs	r2, r1
 80026e2:	4916      	ldr	r1, [pc, #88]	; (800273c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80026e8:	4b14      	ldr	r3, [pc, #80]	; (800273c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a13      	ldr	r2, [pc, #76]	; (800273c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80026f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f4:	f7fe fa98 	bl	8000c28 <HAL_GetTick>
 80026f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026fa:	e009      	b.n	8002710 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026fc:	f7fe fa94 	bl	8000c28 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d902      	bls.n	8002710 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	73fb      	strb	r3, [r7, #15]
          break;
 800270e:	e005      	b.n	800271c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002710:	4b0a      	ldr	r3, [pc, #40]	; (800273c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d0ef      	beq.n	80026fc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800271c:	7bfb      	ldrb	r3, [r7, #15]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d106      	bne.n	8002730 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002722:	4b06      	ldr	r3, [pc, #24]	; (800273c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002724:	691a      	ldr	r2, [r3, #16]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	4904      	ldr	r1, [pc, #16]	; (800273c <RCCEx_PLLSAI1_Config+0x1e4>)
 800272c:	4313      	orrs	r3, r2
 800272e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002730:	7bfb      	ldrb	r3, [r7, #15]
}
 8002732:	4618      	mov	r0, r3
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40021000 	.word	0x40021000

08002740 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800274a:	2300      	movs	r3, #0
 800274c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800274e:	4b6a      	ldr	r3, [pc, #424]	; (80028f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	f003 0303 	and.w	r3, r3, #3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d018      	beq.n	800278c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800275a:	4b67      	ldr	r3, [pc, #412]	; (80028f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	f003 0203 	and.w	r2, r3, #3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	429a      	cmp	r2, r3
 8002768:	d10d      	bne.n	8002786 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
       ||
 800276e:	2b00      	cmp	r3, #0
 8002770:	d009      	beq.n	8002786 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002772:	4b61      	ldr	r3, [pc, #388]	; (80028f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	091b      	lsrs	r3, r3, #4
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	1c5a      	adds	r2, r3, #1
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
       ||
 8002782:	429a      	cmp	r2, r3
 8002784:	d047      	beq.n	8002816 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	73fb      	strb	r3, [r7, #15]
 800278a:	e044      	b.n	8002816 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2b03      	cmp	r3, #3
 8002792:	d018      	beq.n	80027c6 <RCCEx_PLLSAI2_Config+0x86>
 8002794:	2b03      	cmp	r3, #3
 8002796:	d825      	bhi.n	80027e4 <RCCEx_PLLSAI2_Config+0xa4>
 8002798:	2b01      	cmp	r3, #1
 800279a:	d002      	beq.n	80027a2 <RCCEx_PLLSAI2_Config+0x62>
 800279c:	2b02      	cmp	r3, #2
 800279e:	d009      	beq.n	80027b4 <RCCEx_PLLSAI2_Config+0x74>
 80027a0:	e020      	b.n	80027e4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027a2:	4b55      	ldr	r3, [pc, #340]	; (80028f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d11d      	bne.n	80027ea <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027b2:	e01a      	b.n	80027ea <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027b4:	4b50      	ldr	r3, [pc, #320]	; (80028f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d116      	bne.n	80027ee <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027c4:	e013      	b.n	80027ee <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027c6:	4b4c      	ldr	r3, [pc, #304]	; (80028f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10f      	bne.n	80027f2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027d2:	4b49      	ldr	r3, [pc, #292]	; (80028f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d109      	bne.n	80027f2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027e2:	e006      	b.n	80027f2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	73fb      	strb	r3, [r7, #15]
      break;
 80027e8:	e004      	b.n	80027f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027ea:	bf00      	nop
 80027ec:	e002      	b.n	80027f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027ee:	bf00      	nop
 80027f0:	e000      	b.n	80027f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80027f4:	7bfb      	ldrb	r3, [r7, #15]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10d      	bne.n	8002816 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027fa:	4b3f      	ldr	r3, [pc, #252]	; (80028f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6819      	ldr	r1, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	3b01      	subs	r3, #1
 800280c:	011b      	lsls	r3, r3, #4
 800280e:	430b      	orrs	r3, r1
 8002810:	4939      	ldr	r1, [pc, #228]	; (80028f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002812:	4313      	orrs	r3, r2
 8002814:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002816:	7bfb      	ldrb	r3, [r7, #15]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d167      	bne.n	80028ec <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800281c:	4b36      	ldr	r3, [pc, #216]	; (80028f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a35      	ldr	r2, [pc, #212]	; (80028f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002822:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002826:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002828:	f7fe f9fe 	bl	8000c28 <HAL_GetTick>
 800282c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800282e:	e009      	b.n	8002844 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002830:	f7fe f9fa 	bl	8000c28 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d902      	bls.n	8002844 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	73fb      	strb	r3, [r7, #15]
        break;
 8002842:	e005      	b.n	8002850 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002844:	4b2c      	ldr	r3, [pc, #176]	; (80028f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1ef      	bne.n	8002830 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002850:	7bfb      	ldrb	r3, [r7, #15]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d14a      	bne.n	80028ec <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d111      	bne.n	8002880 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800285c:	4b26      	ldr	r3, [pc, #152]	; (80028f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800285e:	695b      	ldr	r3, [r3, #20]
 8002860:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002864:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	6892      	ldr	r2, [r2, #8]
 800286c:	0211      	lsls	r1, r2, #8
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	68d2      	ldr	r2, [r2, #12]
 8002872:	0912      	lsrs	r2, r2, #4
 8002874:	0452      	lsls	r2, r2, #17
 8002876:	430a      	orrs	r2, r1
 8002878:	491f      	ldr	r1, [pc, #124]	; (80028f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800287a:	4313      	orrs	r3, r2
 800287c:	614b      	str	r3, [r1, #20]
 800287e:	e011      	b.n	80028a4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002880:	4b1d      	ldr	r3, [pc, #116]	; (80028f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002882:	695b      	ldr	r3, [r3, #20]
 8002884:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002888:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	6892      	ldr	r2, [r2, #8]
 8002890:	0211      	lsls	r1, r2, #8
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	6912      	ldr	r2, [r2, #16]
 8002896:	0852      	lsrs	r2, r2, #1
 8002898:	3a01      	subs	r2, #1
 800289a:	0652      	lsls	r2, r2, #25
 800289c:	430a      	orrs	r2, r1
 800289e:	4916      	ldr	r1, [pc, #88]	; (80028f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80028a4:	4b14      	ldr	r3, [pc, #80]	; (80028f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a13      	ldr	r2, [pc, #76]	; (80028f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b0:	f7fe f9ba 	bl	8000c28 <HAL_GetTick>
 80028b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80028b6:	e009      	b.n	80028cc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028b8:	f7fe f9b6 	bl	8000c28 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d902      	bls.n	80028cc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	73fb      	strb	r3, [r7, #15]
          break;
 80028ca:	e005      	b.n	80028d8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80028cc:	4b0a      	ldr	r3, [pc, #40]	; (80028f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d0ef      	beq.n	80028b8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80028d8:	7bfb      	ldrb	r3, [r7, #15]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d106      	bne.n	80028ec <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80028de:	4b06      	ldr	r3, [pc, #24]	; (80028f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028e0:	695a      	ldr	r2, [r3, #20]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	4904      	ldr	r1, [pc, #16]	; (80028f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80028ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	40021000 	.word	0x40021000

080028fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e040      	b.n	8002990 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002912:	2b00      	cmp	r3, #0
 8002914:	d106      	bne.n	8002924 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7fd ff56 	bl	80007d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2224      	movs	r2, #36	; 0x24
 8002928:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f022 0201 	bic.w	r2, r2, #1
 8002938:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 f95c 	bl	8002bf8 <UART_SetConfig>
 8002940:	4603      	mov	r3, r0
 8002942:	2b01      	cmp	r3, #1
 8002944:	d101      	bne.n	800294a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e022      	b.n	8002990 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294e:	2b00      	cmp	r3, #0
 8002950:	d002      	beq.n	8002958 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 fc0a 	bl	800316c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	685a      	ldr	r2, [r3, #4]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002966:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689a      	ldr	r2, [r3, #8]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002976:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f042 0201 	orr.w	r2, r2, #1
 8002986:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 fc91 	bl	80032b0 <UART_CheckIdleState>
 800298e:	4603      	mov	r3, r0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b08a      	sub	sp, #40	; 0x28
 800299c:	af02      	add	r7, sp, #8
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	603b      	str	r3, [r7, #0]
 80029a4:	4613      	mov	r3, r2
 80029a6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029ac:	2b20      	cmp	r3, #32
 80029ae:	f040 8082 	bne.w	8002ab6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d002      	beq.n	80029be <HAL_UART_Transmit+0x26>
 80029b8:	88fb      	ldrh	r3, [r7, #6]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e07a      	b.n	8002ab8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d101      	bne.n	80029d0 <HAL_UART_Transmit+0x38>
 80029cc:	2302      	movs	r3, #2
 80029ce:	e073      	b.n	8002ab8 <HAL_UART_Transmit+0x120>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2221      	movs	r2, #33	; 0x21
 80029e4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029e6:	f7fe f91f 	bl	8000c28 <HAL_GetTick>
 80029ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	88fa      	ldrh	r2, [r7, #6]
 80029f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	88fa      	ldrh	r2, [r7, #6]
 80029f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a04:	d108      	bne.n	8002a18 <HAL_UART_Transmit+0x80>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d104      	bne.n	8002a18 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	61bb      	str	r3, [r7, #24]
 8002a16:	e003      	b.n	8002a20 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002a28:	e02d      	b.n	8002a86 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2200      	movs	r2, #0
 8002a32:	2180      	movs	r1, #128	; 0x80
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f000 fc84 	bl	8003342 <UART_WaitOnFlagUntilTimeout>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e039      	b.n	8002ab8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10b      	bne.n	8002a62 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	881a      	ldrh	r2, [r3, #0]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a56:	b292      	uxth	r2, r2
 8002a58:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	3302      	adds	r3, #2
 8002a5e:	61bb      	str	r3, [r7, #24]
 8002a60:	e008      	b.n	8002a74 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	781a      	ldrb	r2, [r3, #0]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	b292      	uxth	r2, r2
 8002a6c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	3301      	adds	r3, #1
 8002a72:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1cb      	bne.n	8002a2a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	2140      	movs	r1, #64	; 0x40
 8002a9c:	68f8      	ldr	r0, [r7, #12]
 8002a9e:	f000 fc50 	bl	8003342 <UART_WaitOnFlagUntilTimeout>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e005      	b.n	8002ab8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2220      	movs	r2, #32
 8002ab0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	e000      	b.n	8002ab8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002ab6:	2302      	movs	r3, #2
  }
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3720      	adds	r7, #32
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	4613      	mov	r3, r2
 8002acc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ad2:	2b20      	cmp	r3, #32
 8002ad4:	d166      	bne.n	8002ba4 <HAL_UART_Transmit_DMA+0xe4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d002      	beq.n	8002ae2 <HAL_UART_Transmit_DMA+0x22>
 8002adc:	88fb      	ldrh	r3, [r7, #6]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e05f      	b.n	8002ba6 <HAL_UART_Transmit_DMA+0xe6>
    }

    __HAL_LOCK(huart);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d101      	bne.n	8002af4 <HAL_UART_Transmit_DMA+0x34>
 8002af0:	2302      	movs	r3, #2
 8002af2:	e058      	b.n	8002ba6 <HAL_UART_Transmit_DMA+0xe6>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	68ba      	ldr	r2, [r7, #8]
 8002b00:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	88fa      	ldrh	r2, [r7, #6]
 8002b06:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	88fa      	ldrh	r2, [r7, #6]
 8002b0e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2221      	movs	r2, #33	; 0x21
 8002b1e:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d02b      	beq.n	8002b80 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b2c:	4a20      	ldr	r2, [pc, #128]	; (8002bb0 <HAL_UART_Transmit_DMA+0xf0>)
 8002b2e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b34:	4a1f      	ldr	r2, [pc, #124]	; (8002bb4 <HAL_UART_Transmit_DMA+0xf4>)
 8002b36:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b3c:	4a1e      	ldr	r2, [pc, #120]	; (8002bb8 <HAL_UART_Transmit_DMA+0xf8>)
 8002b3e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b44:	2200      	movs	r2, #0
 8002b46:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b50:	4619      	mov	r1, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	3328      	adds	r3, #40	; 0x28
 8002b58:	461a      	mov	r2, r3
 8002b5a:	88fb      	ldrh	r3, [r7, #6]
 8002b5c:	f7fe f955 	bl	8000e0a <HAL_DMA_Start_IT>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00c      	beq.n	8002b80 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2210      	movs	r2, #16
 8002b6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2220      	movs	r2, #32
 8002b7a:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e012      	b.n	8002ba6 <HAL_UART_Transmit_DMA+0xe6>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2240      	movs	r2, #64	; 0x40
 8002b86:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689a      	ldr	r2, [r3, #8]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b9e:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	e000      	b.n	8002ba6 <HAL_UART_Transmit_DMA+0xe6>
  }
  else
  {
    return HAL_BUSY;
 8002ba4:	2302      	movs	r3, #2
  }
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	080034c3 	.word	0x080034c3
 8002bb4:	08003517 	.word	0x08003517
 8002bb8:	08003533 	.word	0x08003533

08002bbc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bfc:	b08a      	sub	sp, #40	; 0x28
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c02:	2300      	movs	r3, #0
 8002c04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	431a      	orrs	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	431a      	orrs	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	69db      	ldr	r3, [r3, #28]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	4ba4      	ldr	r3, [pc, #656]	; (8002eb8 <UART_SetConfig+0x2c0>)
 8002c28:	4013      	ands	r3, r2
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	6812      	ldr	r2, [r2, #0]
 8002c2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c30:	430b      	orrs	r3, r1
 8002c32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	68da      	ldr	r2, [r3, #12]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	430a      	orrs	r2, r1
 8002c48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a99      	ldr	r2, [pc, #612]	; (8002ebc <UART_SetConfig+0x2c4>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d004      	beq.n	8002c64 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c60:	4313      	orrs	r3, r2
 8002c62:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c74:	430a      	orrs	r2, r1
 8002c76:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a90      	ldr	r2, [pc, #576]	; (8002ec0 <UART_SetConfig+0x2c8>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d126      	bne.n	8002cd0 <UART_SetConfig+0xd8>
 8002c82:	4b90      	ldr	r3, [pc, #576]	; (8002ec4 <UART_SetConfig+0x2cc>)
 8002c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c88:	f003 0303 	and.w	r3, r3, #3
 8002c8c:	2b03      	cmp	r3, #3
 8002c8e:	d81b      	bhi.n	8002cc8 <UART_SetConfig+0xd0>
 8002c90:	a201      	add	r2, pc, #4	; (adr r2, 8002c98 <UART_SetConfig+0xa0>)
 8002c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c96:	bf00      	nop
 8002c98:	08002ca9 	.word	0x08002ca9
 8002c9c:	08002cb9 	.word	0x08002cb9
 8002ca0:	08002cb1 	.word	0x08002cb1
 8002ca4:	08002cc1 	.word	0x08002cc1
 8002ca8:	2301      	movs	r3, #1
 8002caa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cae:	e116      	b.n	8002ede <UART_SetConfig+0x2e6>
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cb6:	e112      	b.n	8002ede <UART_SetConfig+0x2e6>
 8002cb8:	2304      	movs	r3, #4
 8002cba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cbe:	e10e      	b.n	8002ede <UART_SetConfig+0x2e6>
 8002cc0:	2308      	movs	r3, #8
 8002cc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cc6:	e10a      	b.n	8002ede <UART_SetConfig+0x2e6>
 8002cc8:	2310      	movs	r3, #16
 8002cca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cce:	e106      	b.n	8002ede <UART_SetConfig+0x2e6>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a7c      	ldr	r2, [pc, #496]	; (8002ec8 <UART_SetConfig+0x2d0>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d138      	bne.n	8002d4c <UART_SetConfig+0x154>
 8002cda:	4b7a      	ldr	r3, [pc, #488]	; (8002ec4 <UART_SetConfig+0x2cc>)
 8002cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce0:	f003 030c 	and.w	r3, r3, #12
 8002ce4:	2b0c      	cmp	r3, #12
 8002ce6:	d82d      	bhi.n	8002d44 <UART_SetConfig+0x14c>
 8002ce8:	a201      	add	r2, pc, #4	; (adr r2, 8002cf0 <UART_SetConfig+0xf8>)
 8002cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cee:	bf00      	nop
 8002cf0:	08002d25 	.word	0x08002d25
 8002cf4:	08002d45 	.word	0x08002d45
 8002cf8:	08002d45 	.word	0x08002d45
 8002cfc:	08002d45 	.word	0x08002d45
 8002d00:	08002d35 	.word	0x08002d35
 8002d04:	08002d45 	.word	0x08002d45
 8002d08:	08002d45 	.word	0x08002d45
 8002d0c:	08002d45 	.word	0x08002d45
 8002d10:	08002d2d 	.word	0x08002d2d
 8002d14:	08002d45 	.word	0x08002d45
 8002d18:	08002d45 	.word	0x08002d45
 8002d1c:	08002d45 	.word	0x08002d45
 8002d20:	08002d3d 	.word	0x08002d3d
 8002d24:	2300      	movs	r3, #0
 8002d26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d2a:	e0d8      	b.n	8002ede <UART_SetConfig+0x2e6>
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d32:	e0d4      	b.n	8002ede <UART_SetConfig+0x2e6>
 8002d34:	2304      	movs	r3, #4
 8002d36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d3a:	e0d0      	b.n	8002ede <UART_SetConfig+0x2e6>
 8002d3c:	2308      	movs	r3, #8
 8002d3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d42:	e0cc      	b.n	8002ede <UART_SetConfig+0x2e6>
 8002d44:	2310      	movs	r3, #16
 8002d46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d4a:	e0c8      	b.n	8002ede <UART_SetConfig+0x2e6>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a5e      	ldr	r2, [pc, #376]	; (8002ecc <UART_SetConfig+0x2d4>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d125      	bne.n	8002da2 <UART_SetConfig+0x1aa>
 8002d56:	4b5b      	ldr	r3, [pc, #364]	; (8002ec4 <UART_SetConfig+0x2cc>)
 8002d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002d60:	2b30      	cmp	r3, #48	; 0x30
 8002d62:	d016      	beq.n	8002d92 <UART_SetConfig+0x19a>
 8002d64:	2b30      	cmp	r3, #48	; 0x30
 8002d66:	d818      	bhi.n	8002d9a <UART_SetConfig+0x1a2>
 8002d68:	2b20      	cmp	r3, #32
 8002d6a:	d00a      	beq.n	8002d82 <UART_SetConfig+0x18a>
 8002d6c:	2b20      	cmp	r3, #32
 8002d6e:	d814      	bhi.n	8002d9a <UART_SetConfig+0x1a2>
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d002      	beq.n	8002d7a <UART_SetConfig+0x182>
 8002d74:	2b10      	cmp	r3, #16
 8002d76:	d008      	beq.n	8002d8a <UART_SetConfig+0x192>
 8002d78:	e00f      	b.n	8002d9a <UART_SetConfig+0x1a2>
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d80:	e0ad      	b.n	8002ede <UART_SetConfig+0x2e6>
 8002d82:	2302      	movs	r3, #2
 8002d84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d88:	e0a9      	b.n	8002ede <UART_SetConfig+0x2e6>
 8002d8a:	2304      	movs	r3, #4
 8002d8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d90:	e0a5      	b.n	8002ede <UART_SetConfig+0x2e6>
 8002d92:	2308      	movs	r3, #8
 8002d94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d98:	e0a1      	b.n	8002ede <UART_SetConfig+0x2e6>
 8002d9a:	2310      	movs	r3, #16
 8002d9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002da0:	e09d      	b.n	8002ede <UART_SetConfig+0x2e6>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a4a      	ldr	r2, [pc, #296]	; (8002ed0 <UART_SetConfig+0x2d8>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d125      	bne.n	8002df8 <UART_SetConfig+0x200>
 8002dac:	4b45      	ldr	r3, [pc, #276]	; (8002ec4 <UART_SetConfig+0x2cc>)
 8002dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002db6:	2bc0      	cmp	r3, #192	; 0xc0
 8002db8:	d016      	beq.n	8002de8 <UART_SetConfig+0x1f0>
 8002dba:	2bc0      	cmp	r3, #192	; 0xc0
 8002dbc:	d818      	bhi.n	8002df0 <UART_SetConfig+0x1f8>
 8002dbe:	2b80      	cmp	r3, #128	; 0x80
 8002dc0:	d00a      	beq.n	8002dd8 <UART_SetConfig+0x1e0>
 8002dc2:	2b80      	cmp	r3, #128	; 0x80
 8002dc4:	d814      	bhi.n	8002df0 <UART_SetConfig+0x1f8>
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d002      	beq.n	8002dd0 <UART_SetConfig+0x1d8>
 8002dca:	2b40      	cmp	r3, #64	; 0x40
 8002dcc:	d008      	beq.n	8002de0 <UART_SetConfig+0x1e8>
 8002dce:	e00f      	b.n	8002df0 <UART_SetConfig+0x1f8>
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dd6:	e082      	b.n	8002ede <UART_SetConfig+0x2e6>
 8002dd8:	2302      	movs	r3, #2
 8002dda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dde:	e07e      	b.n	8002ede <UART_SetConfig+0x2e6>
 8002de0:	2304      	movs	r3, #4
 8002de2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002de6:	e07a      	b.n	8002ede <UART_SetConfig+0x2e6>
 8002de8:	2308      	movs	r3, #8
 8002dea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dee:	e076      	b.n	8002ede <UART_SetConfig+0x2e6>
 8002df0:	2310      	movs	r3, #16
 8002df2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002df6:	e072      	b.n	8002ede <UART_SetConfig+0x2e6>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a35      	ldr	r2, [pc, #212]	; (8002ed4 <UART_SetConfig+0x2dc>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d12a      	bne.n	8002e58 <UART_SetConfig+0x260>
 8002e02:	4b30      	ldr	r3, [pc, #192]	; (8002ec4 <UART_SetConfig+0x2cc>)
 8002e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e10:	d01a      	beq.n	8002e48 <UART_SetConfig+0x250>
 8002e12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e16:	d81b      	bhi.n	8002e50 <UART_SetConfig+0x258>
 8002e18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e1c:	d00c      	beq.n	8002e38 <UART_SetConfig+0x240>
 8002e1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e22:	d815      	bhi.n	8002e50 <UART_SetConfig+0x258>
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d003      	beq.n	8002e30 <UART_SetConfig+0x238>
 8002e28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e2c:	d008      	beq.n	8002e40 <UART_SetConfig+0x248>
 8002e2e:	e00f      	b.n	8002e50 <UART_SetConfig+0x258>
 8002e30:	2300      	movs	r3, #0
 8002e32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e36:	e052      	b.n	8002ede <UART_SetConfig+0x2e6>
 8002e38:	2302      	movs	r3, #2
 8002e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e3e:	e04e      	b.n	8002ede <UART_SetConfig+0x2e6>
 8002e40:	2304      	movs	r3, #4
 8002e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e46:	e04a      	b.n	8002ede <UART_SetConfig+0x2e6>
 8002e48:	2308      	movs	r3, #8
 8002e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e4e:	e046      	b.n	8002ede <UART_SetConfig+0x2e6>
 8002e50:	2310      	movs	r3, #16
 8002e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e56:	e042      	b.n	8002ede <UART_SetConfig+0x2e6>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a17      	ldr	r2, [pc, #92]	; (8002ebc <UART_SetConfig+0x2c4>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d13a      	bne.n	8002ed8 <UART_SetConfig+0x2e0>
 8002e62:	4b18      	ldr	r3, [pc, #96]	; (8002ec4 <UART_SetConfig+0x2cc>)
 8002e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e68:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002e6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e70:	d01a      	beq.n	8002ea8 <UART_SetConfig+0x2b0>
 8002e72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e76:	d81b      	bhi.n	8002eb0 <UART_SetConfig+0x2b8>
 8002e78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e7c:	d00c      	beq.n	8002e98 <UART_SetConfig+0x2a0>
 8002e7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e82:	d815      	bhi.n	8002eb0 <UART_SetConfig+0x2b8>
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <UART_SetConfig+0x298>
 8002e88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e8c:	d008      	beq.n	8002ea0 <UART_SetConfig+0x2a8>
 8002e8e:	e00f      	b.n	8002eb0 <UART_SetConfig+0x2b8>
 8002e90:	2300      	movs	r3, #0
 8002e92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e96:	e022      	b.n	8002ede <UART_SetConfig+0x2e6>
 8002e98:	2302      	movs	r3, #2
 8002e9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e9e:	e01e      	b.n	8002ede <UART_SetConfig+0x2e6>
 8002ea0:	2304      	movs	r3, #4
 8002ea2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ea6:	e01a      	b.n	8002ede <UART_SetConfig+0x2e6>
 8002ea8:	2308      	movs	r3, #8
 8002eaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002eae:	e016      	b.n	8002ede <UART_SetConfig+0x2e6>
 8002eb0:	2310      	movs	r3, #16
 8002eb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002eb6:	e012      	b.n	8002ede <UART_SetConfig+0x2e6>
 8002eb8:	efff69f3 	.word	0xefff69f3
 8002ebc:	40008000 	.word	0x40008000
 8002ec0:	40013800 	.word	0x40013800
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	40004400 	.word	0x40004400
 8002ecc:	40004800 	.word	0x40004800
 8002ed0:	40004c00 	.word	0x40004c00
 8002ed4:	40005000 	.word	0x40005000
 8002ed8:	2310      	movs	r3, #16
 8002eda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4aa0      	ldr	r2, [pc, #640]	; (8003164 <UART_SetConfig+0x56c>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d17a      	bne.n	8002fde <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002ee8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	d824      	bhi.n	8002f3a <UART_SetConfig+0x342>
 8002ef0:	a201      	add	r2, pc, #4	; (adr r2, 8002ef8 <UART_SetConfig+0x300>)
 8002ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef6:	bf00      	nop
 8002ef8:	08002f1d 	.word	0x08002f1d
 8002efc:	08002f3b 	.word	0x08002f3b
 8002f00:	08002f25 	.word	0x08002f25
 8002f04:	08002f3b 	.word	0x08002f3b
 8002f08:	08002f2b 	.word	0x08002f2b
 8002f0c:	08002f3b 	.word	0x08002f3b
 8002f10:	08002f3b 	.word	0x08002f3b
 8002f14:	08002f3b 	.word	0x08002f3b
 8002f18:	08002f33 	.word	0x08002f33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f1c:	f7fe ffa6 	bl	8001e6c <HAL_RCC_GetPCLK1Freq>
 8002f20:	61f8      	str	r0, [r7, #28]
        break;
 8002f22:	e010      	b.n	8002f46 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f24:	4b90      	ldr	r3, [pc, #576]	; (8003168 <UART_SetConfig+0x570>)
 8002f26:	61fb      	str	r3, [r7, #28]
        break;
 8002f28:	e00d      	b.n	8002f46 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f2a:	f7fe ff07 	bl	8001d3c <HAL_RCC_GetSysClockFreq>
 8002f2e:	61f8      	str	r0, [r7, #28]
        break;
 8002f30:	e009      	b.n	8002f46 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f36:	61fb      	str	r3, [r7, #28]
        break;
 8002f38:	e005      	b.n	8002f46 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002f44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 80fd 	beq.w	8003148 <UART_SetConfig+0x550>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	685a      	ldr	r2, [r3, #4]
 8002f52:	4613      	mov	r3, r2
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	4413      	add	r3, r2
 8002f58:	69fa      	ldr	r2, [r7, #28]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d305      	bcc.n	8002f6a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f64:	69fa      	ldr	r2, [r7, #28]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d903      	bls.n	8002f72 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002f70:	e0ea      	b.n	8003148 <UART_SetConfig+0x550>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	2200      	movs	r2, #0
 8002f76:	461c      	mov	r4, r3
 8002f78:	4615      	mov	r5, r2
 8002f7a:	f04f 0200 	mov.w	r2, #0
 8002f7e:	f04f 0300 	mov.w	r3, #0
 8002f82:	022b      	lsls	r3, r5, #8
 8002f84:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002f88:	0222      	lsls	r2, r4, #8
 8002f8a:	68f9      	ldr	r1, [r7, #12]
 8002f8c:	6849      	ldr	r1, [r1, #4]
 8002f8e:	0849      	lsrs	r1, r1, #1
 8002f90:	2000      	movs	r0, #0
 8002f92:	4688      	mov	r8, r1
 8002f94:	4681      	mov	r9, r0
 8002f96:	eb12 0a08 	adds.w	sl, r2, r8
 8002f9a:	eb43 0b09 	adc.w	fp, r3, r9
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	603b      	str	r3, [r7, #0]
 8002fa6:	607a      	str	r2, [r7, #4]
 8002fa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fac:	4650      	mov	r0, sl
 8002fae:	4659      	mov	r1, fp
 8002fb0:	f7fd f966 	bl	8000280 <__aeabi_uldivmod>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	4613      	mov	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fc2:	d308      	bcc.n	8002fd6 <UART_SetConfig+0x3de>
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fca:	d204      	bcs.n	8002fd6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	60da      	str	r2, [r3, #12]
 8002fd4:	e0b8      	b.n	8003148 <UART_SetConfig+0x550>
        }
        else
        {
          ret = HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002fdc:	e0b4      	b.n	8003148 <UART_SetConfig+0x550>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fe6:	d15f      	bne.n	80030a8 <UART_SetConfig+0x4b0>
  {
    switch (clocksource)
 8002fe8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002fec:	2b08      	cmp	r3, #8
 8002fee:	d828      	bhi.n	8003042 <UART_SetConfig+0x44a>
 8002ff0:	a201      	add	r2, pc, #4	; (adr r2, 8002ff8 <UART_SetConfig+0x400>)
 8002ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff6:	bf00      	nop
 8002ff8:	0800301d 	.word	0x0800301d
 8002ffc:	08003025 	.word	0x08003025
 8003000:	0800302d 	.word	0x0800302d
 8003004:	08003043 	.word	0x08003043
 8003008:	08003033 	.word	0x08003033
 800300c:	08003043 	.word	0x08003043
 8003010:	08003043 	.word	0x08003043
 8003014:	08003043 	.word	0x08003043
 8003018:	0800303b 	.word	0x0800303b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800301c:	f7fe ff26 	bl	8001e6c <HAL_RCC_GetPCLK1Freq>
 8003020:	61f8      	str	r0, [r7, #28]
        break;
 8003022:	e014      	b.n	800304e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003024:	f7fe ff38 	bl	8001e98 <HAL_RCC_GetPCLK2Freq>
 8003028:	61f8      	str	r0, [r7, #28]
        break;
 800302a:	e010      	b.n	800304e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800302c:	4b4e      	ldr	r3, [pc, #312]	; (8003168 <UART_SetConfig+0x570>)
 800302e:	61fb      	str	r3, [r7, #28]
        break;
 8003030:	e00d      	b.n	800304e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003032:	f7fe fe83 	bl	8001d3c <HAL_RCC_GetSysClockFreq>
 8003036:	61f8      	str	r0, [r7, #28]
        break;
 8003038:	e009      	b.n	800304e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800303a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800303e:	61fb      	str	r3, [r7, #28]
        break;
 8003040:	e005      	b.n	800304e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003042:	2300      	movs	r3, #0
 8003044:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800304c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d079      	beq.n	8003148 <UART_SetConfig+0x550>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	005a      	lsls	r2, r3, #1
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	085b      	lsrs	r3, r3, #1
 800305e:	441a      	add	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	fbb2 f3f3 	udiv	r3, r2, r3
 8003068:	b29b      	uxth	r3, r3
 800306a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	2b0f      	cmp	r3, #15
 8003070:	d916      	bls.n	80030a0 <UART_SetConfig+0x4a8>
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003078:	d212      	bcs.n	80030a0 <UART_SetConfig+0x4a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	b29b      	uxth	r3, r3
 800307e:	f023 030f 	bic.w	r3, r3, #15
 8003082:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	085b      	lsrs	r3, r3, #1
 8003088:	b29b      	uxth	r3, r3
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	b29a      	uxth	r2, r3
 8003090:	8afb      	ldrh	r3, [r7, #22]
 8003092:	4313      	orrs	r3, r2
 8003094:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	8afa      	ldrh	r2, [r7, #22]
 800309c:	60da      	str	r2, [r3, #12]
 800309e:	e053      	b.n	8003148 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80030a6:	e04f      	b.n	8003148 <UART_SetConfig+0x550>
      }
    }
  }
  else
  {
    switch (clocksource)
 80030a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030ac:	2b08      	cmp	r3, #8
 80030ae:	d828      	bhi.n	8003102 <UART_SetConfig+0x50a>
 80030b0:	a201      	add	r2, pc, #4	; (adr r2, 80030b8 <UART_SetConfig+0x4c0>)
 80030b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b6:	bf00      	nop
 80030b8:	080030dd 	.word	0x080030dd
 80030bc:	080030e5 	.word	0x080030e5
 80030c0:	080030ed 	.word	0x080030ed
 80030c4:	08003103 	.word	0x08003103
 80030c8:	080030f3 	.word	0x080030f3
 80030cc:	08003103 	.word	0x08003103
 80030d0:	08003103 	.word	0x08003103
 80030d4:	08003103 	.word	0x08003103
 80030d8:	080030fb 	.word	0x080030fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030dc:	f7fe fec6 	bl	8001e6c <HAL_RCC_GetPCLK1Freq>
 80030e0:	61f8      	str	r0, [r7, #28]
        break;
 80030e2:	e014      	b.n	800310e <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030e4:	f7fe fed8 	bl	8001e98 <HAL_RCC_GetPCLK2Freq>
 80030e8:	61f8      	str	r0, [r7, #28]
        break;
 80030ea:	e010      	b.n	800310e <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030ec:	4b1e      	ldr	r3, [pc, #120]	; (8003168 <UART_SetConfig+0x570>)
 80030ee:	61fb      	str	r3, [r7, #28]
        break;
 80030f0:	e00d      	b.n	800310e <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030f2:	f7fe fe23 	bl	8001d3c <HAL_RCC_GetSysClockFreq>
 80030f6:	61f8      	str	r0, [r7, #28]
        break;
 80030f8:	e009      	b.n	800310e <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030fe:	61fb      	str	r3, [r7, #28]
        break;
 8003100:	e005      	b.n	800310e <UART_SetConfig+0x516>
      default:
        pclk = 0U;
 8003102:	2300      	movs	r3, #0
 8003104:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800310c:	bf00      	nop
    }

    if (pclk != 0U)
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d019      	beq.n	8003148 <UART_SetConfig+0x550>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	085a      	lsrs	r2, r3, #1
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	441a      	add	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	fbb2 f3f3 	udiv	r3, r2, r3
 8003126:	b29b      	uxth	r3, r3
 8003128:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	2b0f      	cmp	r3, #15
 800312e:	d908      	bls.n	8003142 <UART_SetConfig+0x54a>
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003136:	d204      	bcs.n	8003142 <UART_SetConfig+0x54a>
      {
        huart->Instance->BRR = usartdiv;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	60da      	str	r2, [r3, #12]
 8003140:	e002      	b.n	8003148 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003154:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003158:	4618      	mov	r0, r3
 800315a:	3728      	adds	r7, #40	; 0x28
 800315c:	46bd      	mov	sp, r7
 800315e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003162:	bf00      	nop
 8003164:	40008000 	.word	0x40008000
 8003168:	00f42400 	.word	0x00f42400

0800316c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003178:	f003 0301 	and.w	r3, r3, #1
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00a      	beq.n	8003196 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00a      	beq.n	80031b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031bc:	f003 0304 	and.w	r3, r3, #4
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00a      	beq.n	80031da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031de:	f003 0308 	and.w	r3, r3, #8
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00a      	beq.n	80031fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003200:	f003 0310 	and.w	r3, r3, #16
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00a      	beq.n	800321e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	430a      	orrs	r2, r1
 800321c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003222:	f003 0320 	and.w	r3, r3, #32
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00a      	beq.n	8003240 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	430a      	orrs	r2, r1
 800323e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003248:	2b00      	cmp	r3, #0
 800324a:	d01a      	beq.n	8003282 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	430a      	orrs	r2, r1
 8003260:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800326a:	d10a      	bne.n	8003282 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00a      	beq.n	80032a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	605a      	str	r2, [r3, #4]
  }
}
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af02      	add	r7, sp, #8
 80032b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80032c0:	f7fd fcb2 	bl	8000c28 <HAL_GetTick>
 80032c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0308 	and.w	r3, r3, #8
 80032d0:	2b08      	cmp	r3, #8
 80032d2:	d10e      	bne.n	80032f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f82d 	bl	8003342 <UART_WaitOnFlagUntilTimeout>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e023      	b.n	800333a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	2b04      	cmp	r3, #4
 80032fe:	d10e      	bne.n	800331e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003300:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003304:	9300      	str	r3, [sp, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 f817 	bl	8003342 <UART_WaitOnFlagUntilTimeout>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e00d      	b.n	800333a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2220      	movs	r2, #32
 8003322:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2220      	movs	r2, #32
 8003328:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b084      	sub	sp, #16
 8003346:	af00      	add	r7, sp, #0
 8003348:	60f8      	str	r0, [r7, #12]
 800334a:	60b9      	str	r1, [r7, #8]
 800334c:	603b      	str	r3, [r7, #0]
 800334e:	4613      	mov	r3, r2
 8003350:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003352:	e05e      	b.n	8003412 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335a:	d05a      	beq.n	8003412 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800335c:	f7fd fc64 	bl	8000c28 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	429a      	cmp	r2, r3
 800336a:	d302      	bcc.n	8003372 <UART_WaitOnFlagUntilTimeout+0x30>
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d11b      	bne.n	80033aa <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003380:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 0201 	bic.w	r2, r2, #1
 8003390:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2220      	movs	r2, #32
 8003396:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2220      	movs	r2, #32
 800339c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e043      	b.n	8003432 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0304 	and.w	r3, r3, #4
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d02c      	beq.n	8003412 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	69db      	ldr	r3, [r3, #28]
 80033be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033c6:	d124      	bne.n	8003412 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033d0:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80033e0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	689a      	ldr	r2, [r3, #8]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f022 0201 	bic.w	r2, r2, #1
 80033f0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2220      	movs	r2, #32
 80033f6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2220      	movs	r2, #32
 80033fc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2220      	movs	r2, #32
 8003402:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e00f      	b.n	8003432 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	69da      	ldr	r2, [r3, #28]
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	4013      	ands	r3, r2
 800341c:	68ba      	ldr	r2, [r7, #8]
 800341e:	429a      	cmp	r2, r3
 8003420:	bf0c      	ite	eq
 8003422:	2301      	moveq	r3, #1
 8003424:	2300      	movne	r3, #0
 8003426:	b2db      	uxtb	r3, r3
 8003428:	461a      	mov	r2, r3
 800342a:	79fb      	ldrb	r3, [r7, #7]
 800342c:	429a      	cmp	r2, r3
 800342e:	d091      	beq.n	8003354 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800343a:	b480      	push	{r7}
 800343c:	b083      	sub	sp, #12
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003450:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2220      	movs	r2, #32
 8003456:	679a      	str	r2, [r3, #120]	; 0x78
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800347a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689a      	ldr	r2, [r3, #8]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 0201 	bic.w	r2, r2, #1
 800348a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003490:	2b01      	cmp	r3, #1
 8003492:	d107      	bne.n	80034a4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f022 0210 	bic.w	r2, r2, #16
 80034a2:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2220      	movs	r2, #32
 80034a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	665a      	str	r2, [r3, #100]	; 0x64
}
 80034b6:	bf00      	nop
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr

080034c2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b084      	sub	sp, #16
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ce:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0320 	and.w	r3, r3, #32
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d114      	bne.n	8003508 <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	689a      	ldr	r2, [r3, #8]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034f4:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003504:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003506:	e002      	b.n	800350e <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f7ff fb57 	bl	8002bbc <HAL_UART_TxCpltCallback>
}
 800350e:	bf00      	nop
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b084      	sub	sp, #16
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003522:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f7ff fb53 	bl	8002bd0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800352a:	bf00      	nop
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b086      	sub	sp, #24
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003544:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800354a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003556:	2b80      	cmp	r3, #128	; 0x80
 8003558:	d109      	bne.n	800356e <UART_DMAError+0x3c>
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	2b21      	cmp	r3, #33	; 0x21
 800355e:	d106      	bne.n	800356e <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	2200      	movs	r2, #0
 8003564:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8003568:	6978      	ldr	r0, [r7, #20]
 800356a:	f7ff ff66 	bl	800343a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003578:	2b40      	cmp	r3, #64	; 0x40
 800357a:	d109      	bne.n	8003590 <UART_DMAError+0x5e>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2b22      	cmp	r3, #34	; 0x22
 8003580:	d106      	bne.n	8003590 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	2200      	movs	r2, #0
 8003586:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800358a:	6978      	ldr	r0, [r7, #20]
 800358c:	f7ff ff6a 	bl	8003464 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003596:	f043 0210 	orr.w	r2, r3, #16
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80035a0:	6978      	ldr	r0, [r7, #20]
 80035a2:	f7ff fb1f 	bl	8002be4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035a6:	bf00      	nop
 80035a8:	3718      	adds	r7, #24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <_ZNK8IXFEvent12getEventTypeEv>:

    /** \brief Returns the type of the event.
     *
     * Can be used to distinguish between an event or a timeout.
     */
    inline eEventType getEventType() const { return _eventType; }
 80035ae:	b480      	push	{r7}
 80035b0:	b083      	sub	sp, #12
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80035bc:	4618      	mov	r0, r3
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <_ZNK8IXFEvent5getIdEv>:
    /** \brief Sets pointer to behavioral class (see #_pBehavior).
     * Sets the behavior in which the event should be executed.
     */
    inline void setBehavior(IXFReactive * pBehavior) { _pBehavior = pBehavior; }

    inline int getId() const { return _id; }		///< Returns #_id identifying the event in the behaviors context.
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	4618      	mov	r0, r3
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <_ZN11EventStatusC1ENS_12eEventStatusE>:
    /**
     * Constructor
     *
     * \param eventStatus Initial value of the event status.
     */
    EventStatus(eEventStatus eventStatus = Unknown) : _status(eventStatus) {}
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	460b      	mov	r3, r1
 80035ea:	70fb      	strb	r3, [r7, #3]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	78fa      	ldrb	r2, [r7, #3]
 80035f0:	701a      	strb	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4618      	mov	r0, r3
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <_ZN13ButtonManager10initializeEv>:


using namespace std;

void ButtonManager::initialize()
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
    rootState = STATE_INITIAL;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	741a      	strb	r2, [r3, #16]
}
 800360e:	bf00      	nop
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr

0800361a <_ZN13ButtonManager19initializeRelationsEP8ToButtonP3Led>:

void ButtonManager::initializeRelations(ToButton * p, Led * l)
{
 800361a:	b480      	push	{r7}
 800361c:	b085      	sub	sp, #20
 800361e:	af00      	add	r7, sp, #0
 8003620:	60f8      	str	r0, [r7, #12]
 8003622:	60b9      	str	r1, [r7, #8]
 8003624:	607a      	str	r2, [r7, #4]
    pButton = p;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	68ba      	ldr	r2, [r7, #8]
 800362a:	615a      	str	r2, [r3, #20]
    pLed = l;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	619a      	str	r2, [r3, #24]
}
 8003632:	bf00      	nop
 8003634:	3714      	adds	r7, #20
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
	...

08003640 <_ZN15ToButtonManagerC1Ev>:
public:
	virtual ~ToButton() = default;

};

class ToButtonManager
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	4a04      	ldr	r2, [pc, #16]	; (800365c <_ZN15ToButtonManagerC1Ev+0x1c>)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	601a      	str	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4618      	mov	r0, r3
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr
 800365c:	08008628 	.word	0x08008628

08003660 <_ZN15ToButtonManagerD1Ev>:
public:
	virtual void pressed() = 0;
	virtual void released() = 0;

public:
	virtual ~ToButtonManager() = default;
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	4a04      	ldr	r2, [pc, #16]	; (800367c <_ZN15ToButtonManagerD1Ev+0x1c>)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	601a      	str	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4618      	mov	r0, r3
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr
 800367c:	08008628 	.word	0x08008628

08003680 <_ZN15ToButtonManagerD0Ev>:
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f7ff ffe9 	bl	8003660 <_ZN15ToButtonManagerD1Ev>
 800368e:	2104      	movs	r1, #4
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f003 fa03 	bl	8006a9c <_ZdlPvj>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4618      	mov	r0, r3
 800369a:	3708      	adds	r7, #8
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <_ZN13ButtonManagerC1Ev>:
{
    static ButtonManager bm;
    return bm;
}

ButtonManager::ButtonManager()
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 : rootState(STATE_INITIAL),
   pButton(nullptr)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2100      	movs	r1, #0
 80036ac:	4618      	mov	r0, r3
 80036ae:	f001 f8d3 	bl	8004858 <_ZN10XFReactiveC1EP8XFThread>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	330c      	adds	r3, #12
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7ff ffc2 	bl	8003640 <_ZN15ToButtonManagerC1Ev>
 80036bc:	4a08      	ldr	r2, [pc, #32]	; (80036e0 <_ZN13ButtonManagerC1Ev+0x40>)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	4a08      	ldr	r2, [pc, #32]	; (80036e4 <_ZN13ButtonManagerC1Ev+0x44>)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	60da      	str	r2, [r3, #12]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	741a      	strb	r2, [r3, #16]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	615a      	str	r2, [r3, #20]
{}
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4618      	mov	r0, r3
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	080085e4 	.word	0x080085e4
 80036e4:	08008610 	.word	0x08008610

080036e8 <_ZN13ButtonManagerD1Ev>:
{}

void ButtonManager::operator=(ButtonManager &)
{}

ButtonManager::~ButtonManager()
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	4a09      	ldr	r2, [pc, #36]	; (8003718 <_ZN13ButtonManagerD1Ev+0x30>)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	601a      	str	r2, [r3, #0]
 80036f6:	4a09      	ldr	r2, [pc, #36]	; (800371c <_ZN13ButtonManagerD1Ev+0x34>)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	60da      	str	r2, [r3, #12]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	330c      	adds	r3, #12
 8003700:	4618      	mov	r0, r3
 8003702:	f7ff ffad 	bl	8003660 <_ZN15ToButtonManagerD1Ev>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4618      	mov	r0, r3
 800370a:	f001 f8c7 	bl	800489c <_ZN10XFReactiveD1Ev>
{}
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4618      	mov	r0, r3
 8003712:	3708      	adds	r7, #8
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	080085e4 	.word	0x080085e4
 800371c:	08008610 	.word	0x08008610

08003720 <_ZThn12_N13ButtonManagerD1Ev>:
private:
    /* Factory Pattern */
    ButtonManager();
    ButtonManager(ButtonManager &);
    void operator=(ButtonManager &);
    virtual ~ButtonManager();
 8003720:	f1a0 000c 	sub.w	r0, r0, #12
 8003724:	f7ff bfe0 	b.w	80036e8 <_ZN13ButtonManagerD1Ev>

08003728 <_ZN13ButtonManagerD0Ev>:
ButtonManager::~ButtonManager()
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
{}
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f7ff ffd9 	bl	80036e8 <_ZN13ButtonManagerD1Ev>
 8003736:	211c      	movs	r1, #28
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f003 f9af 	bl	8006a9c <_ZdlPvj>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4618      	mov	r0, r3
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <_ZThn12_N13ButtonManagerD0Ev>:
 8003748:	f1a0 000c 	sub.w	r0, r0, #12
 800374c:	f7ff bfec 	b.w	8003728 <_ZN13ButtonManagerD0Ev>

08003750 <_ZN13ButtonManager7pressedEv>:

void ButtonManager::pressed()
{
 8003750:	b590      	push	{r4, r7, lr}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
    Trace::outln("Button pressed");
 8003758:	480d      	ldr	r0, [pc, #52]	; (8003790 <_ZN13ButtonManager7pressedEv+0x40>)
 800375a:	f000 fd63 	bl	8004224 <_ZN5Trace5outlnEPKcz>
    //create the pressed event
    XFEvent* ev = new XFEvent(evPressed, this);
 800375e:	2014      	movs	r0, #20
 8003760:	f003 f9ad 	bl	8006abe <_Znwj>
 8003764:	4603      	mov	r3, r0
 8003766:	461c      	mov	r4, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	461a      	mov	r2, r3
 800376c:	2100      	movs	r1, #0
 800376e:	4620      	mov	r0, r4
 8003770:	f000 ffc2 	bl	80046f8 <_ZN7XFEventC1EiP11IXFReactive>
 8003774:	60fc      	str	r4, [r7, #12]
    //fire the event
    pushEvent(ev);
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	330c      	adds	r3, #12
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68f9      	ldr	r1, [r7, #12]
 8003782:	4610      	mov	r0, r2
 8003784:	4798      	blx	r3
}
 8003786:	bf00      	nop
 8003788:	3714      	adds	r7, #20
 800378a:	46bd      	mov	sp, r7
 800378c:	bd90      	pop	{r4, r7, pc}
 800378e:	bf00      	nop
 8003790:	08008048 	.word	0x08008048

08003794 <_ZThn12_N13ButtonManager7pressedEv>:

    /* SAP Pattern */
    void pressed();
 8003794:	f1a0 000c 	sub.w	r0, r0, #12
 8003798:	f7ff bfda 	b.w	8003750 <_ZN13ButtonManager7pressedEv>

0800379c <_ZN13ButtonManager8releasedEv>:

void ButtonManager::released()
{
 800379c:	b590      	push	{r4, r7, lr}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
	Trace::outln("Button released");
 80037a4:	480d      	ldr	r0, [pc, #52]	; (80037dc <_ZN13ButtonManager8releasedEv+0x40>)
 80037a6:	f000 fd3d 	bl	8004224 <_ZN5Trace5outlnEPKcz>
    //create the released event
    XFEvent* ev = new XFEvent(evReleased, this);
 80037aa:	2014      	movs	r0, #20
 80037ac:	f003 f987 	bl	8006abe <_Znwj>
 80037b0:	4603      	mov	r3, r0
 80037b2:	461c      	mov	r4, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	461a      	mov	r2, r3
 80037b8:	2101      	movs	r1, #1
 80037ba:	4620      	mov	r0, r4
 80037bc:	f000 ff9c 	bl	80046f8 <_ZN7XFEventC1EiP11IXFReactive>
 80037c0:	60fc      	str	r4, [r7, #12]
    //fire the event
    pushEvent(ev);
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	330c      	adds	r3, #12
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68f9      	ldr	r1, [r7, #12]
 80037ce:	4610      	mov	r0, r2
 80037d0:	4798      	blx	r3
}
 80037d2:	bf00      	nop
 80037d4:	3714      	adds	r7, #20
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd90      	pop	{r4, r7, pc}
 80037da:	bf00      	nop
 80037dc:	08008058 	.word	0x08008058

080037e0 <_ZThn12_N13ButtonManager8releasedEv>:
    void released();
 80037e0:	f1a0 000c 	sub.w	r0, r0, #12
 80037e4:	f7ff bfda 	b.w	800379c <_ZN13ButtonManager8releasedEv>

080037e8 <_ZN13ButtonManager12processEventEv>:

EventStatus ButtonManager::processEvent()
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
    // will we handle the event ?
    EventStatus result = EventStatus::Unknown;
 80037f0:	f107 0308 	add.w	r3, r7, #8
 80037f4:	2100      	movs	r1, #0
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7ff fef2 	bl	80035e0 <_ZN11EventStatusC1ENS_12eEventStatusE>
    // get the actual event
    const IXFEvent* ev = this->getCurrentEvent();
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4618      	mov	r0, r3
 8003800:	f001 f908 	bl	8004a14 <_ZNK10XFReactive15getCurrentEventEv>
 8003804:	6178      	str	r0, [r7, #20]

    // save the current state
    smState lastState = rootState;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	7c1b      	ldrb	r3, [r3, #16]
 800380a:	74fb      	strb	r3, [r7, #19]

    // the transition switch
    switch (rootState)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	7c1b      	ldrb	r3, [r3, #16]
 8003810:	2b04      	cmp	r3, #4
 8003812:	f200 8092 	bhi.w	800393a <_ZN13ButtonManager12processEventEv+0x152>
 8003816:	a201      	add	r2, pc, #4	; (adr r2, 800381c <_ZN13ButtonManager12processEventEv+0x34>)
 8003818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800381c:	08003831 	.word	0x08003831
 8003820:	0800384f 	.word	0x0800384f
 8003824:	08003879 	.word	0x08003879
 8003828:	080038d5 	.word	0x080038d5
 800382c:	080038ff 	.word	0x080038ff
    {
        case STATE_INITIAL:
            if (ev->getEventType() == IXFEvent::Initial)
 8003830:	6978      	ldr	r0, [r7, #20]
 8003832:	f7ff febc 	bl	80035ae <_ZNK8IXFEvent12getEventTypeEv>
 8003836:	4603      	mov	r3, r0
 8003838:	2b01      	cmp	r3, #1
 800383a:	bf0c      	ite	eq
 800383c:	2301      	moveq	r3, #1
 800383e:	2300      	movne	r3, #0
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d070      	beq.n	8003928 <_ZN13ButtonManager12processEventEv+0x140>
            {
                rootState = STATE_WAIT;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2201      	movs	r2, #1
 800384a:	741a      	strb	r2, [r3, #16]
            }
            break;
 800384c:	e06c      	b.n	8003928 <_ZN13ButtonManager12processEventEv+0x140>
        case STATE_WAIT:
            if (ev->getEventType() == IXFEvent::Event &&
 800384e:	6978      	ldr	r0, [r7, #20]
 8003850:	f7ff fead 	bl	80035ae <_ZNK8IXFEvent12getEventTypeEv>
 8003854:	4603      	mov	r3, r0
 8003856:	2b03      	cmp	r3, #3
 8003858:	d107      	bne.n	800386a <_ZN13ButtonManager12processEventEv+0x82>
                ev->getId() == evPressed)
 800385a:	6978      	ldr	r0, [r7, #20]
 800385c:	f7ff feb4 	bl	80035c8 <_ZNK8IXFEvent5getIdEv>
 8003860:	4603      	mov	r3, r0
            if (ev->getEventType() == IXFEvent::Event &&
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <_ZN13ButtonManager12processEventEv+0x82>
 8003866:	2301      	movs	r3, #1
 8003868:	e000      	b.n	800386c <_ZN13ButtonManager12processEventEv+0x84>
 800386a:	2300      	movs	r3, #0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d05d      	beq.n	800392c <_ZN13ButtonManager12processEventEv+0x144>
            {
                rootState = STATE_PRESSED;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2202      	movs	r2, #2
 8003874:	741a      	strb	r2, [r3, #16]
            }
            break;
 8003876:	e059      	b.n	800392c <_ZN13ButtonManager12processEventEv+0x144>
        case STATE_PRESSED:
            // if the timeout wins
            if (ev->getEventType() == IXFEvent::Timeout &&
 8003878:	6978      	ldr	r0, [r7, #20]
 800387a:	f7ff fe98 	bl	80035ae <_ZNK8IXFEvent12getEventTypeEv>
 800387e:	4603      	mov	r3, r0
 8003880:	2b04      	cmp	r3, #4
 8003882:	d10c      	bne.n	800389e <_ZN13ButtonManager12processEventEv+0xb6>
                    getCurrentTimeout()->getId() == tmLongPressed)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4618      	mov	r0, r3
 8003888:	f001 f8de 	bl	8004a48 <_ZN10XFReactive17getCurrentTimeoutEv>
 800388c:	4603      	mov	r3, r0
 800388e:	4618      	mov	r0, r3
 8003890:	f7ff fe9a 	bl	80035c8 <_ZNK8IXFEvent5getIdEv>
 8003894:	4603      	mov	r3, r0
            if (ev->getEventType() == IXFEvent::Timeout &&
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <_ZN13ButtonManager12processEventEv+0xb6>
 800389a:	2301      	movs	r3, #1
 800389c:	e000      	b.n	80038a0 <_ZN13ButtonManager12processEventEv+0xb8>
 800389e:	2300      	movs	r3, #0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d002      	beq.n	80038aa <_ZN13ButtonManager12processEventEv+0xc2>
            {
                rootState = STATE_LONG;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2204      	movs	r2, #4
 80038a8:	741a      	strb	r2, [r3, #16]
            }
            // if the released event wins
            if (ev->getEventType() == IXFEvent::Event &&
 80038aa:	6978      	ldr	r0, [r7, #20]
 80038ac:	f7ff fe7f 	bl	80035ae <_ZNK8IXFEvent12getEventTypeEv>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b03      	cmp	r3, #3
 80038b4:	d107      	bne.n	80038c6 <_ZN13ButtonManager12processEventEv+0xde>
                    ev->getId() == evReleased)
 80038b6:	6978      	ldr	r0, [r7, #20]
 80038b8:	f7ff fe86 	bl	80035c8 <_ZNK8IXFEvent5getIdEv>
 80038bc:	4603      	mov	r3, r0
            if (ev->getEventType() == IXFEvent::Event &&
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d101      	bne.n	80038c6 <_ZN13ButtonManager12processEventEv+0xde>
 80038c2:	2301      	movs	r3, #1
 80038c4:	e000      	b.n	80038c8 <_ZN13ButtonManager12processEventEv+0xe0>
 80038c6:	2300      	movs	r3, #0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d031      	beq.n	8003930 <_ZN13ButtonManager12processEventEv+0x148>
            {
                rootState = STATE_CLICK;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2203      	movs	r2, #3
 80038d0:	741a      	strb	r2, [r3, #16]
            }
            break;
 80038d2:	e02d      	b.n	8003930 <_ZN13ButtonManager12processEventEv+0x148>
        case STATE_CLICK:
            if (ev->getEventType() == IXFEvent::Timeout &&
 80038d4:	6978      	ldr	r0, [r7, #20]
 80038d6:	f7ff fe6a 	bl	80035ae <_ZNK8IXFEvent12getEventTypeEv>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b04      	cmp	r3, #4
 80038de:	d107      	bne.n	80038f0 <_ZN13ButtonManager12processEventEv+0x108>
            		ev->getId() == tmLed)
 80038e0:	6978      	ldr	r0, [r7, #20]
 80038e2:	f7ff fe71 	bl	80035c8 <_ZNK8IXFEvent5getIdEv>
 80038e6:	4603      	mov	r3, r0
            if (ev->getEventType() == IXFEvent::Timeout &&
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d101      	bne.n	80038f0 <_ZN13ButtonManager12processEventEv+0x108>
 80038ec:	2301      	movs	r3, #1
 80038ee:	e000      	b.n	80038f2 <_ZN13ButtonManager12processEventEv+0x10a>
 80038f0:	2300      	movs	r3, #0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d01e      	beq.n	8003934 <_ZN13ButtonManager12processEventEv+0x14c>
            {
                rootState = STATE_WAIT;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	741a      	strb	r2, [r3, #16]
            }
            break;
 80038fc:	e01a      	b.n	8003934 <_ZN13ButtonManager12processEventEv+0x14c>
        case STATE_LONG:
        	if (ev->getEventType() == IXFEvent::Timeout &&
 80038fe:	6978      	ldr	r0, [r7, #20]
 8003900:	f7ff fe55 	bl	80035ae <_ZNK8IXFEvent12getEventTypeEv>
 8003904:	4603      	mov	r3, r0
 8003906:	2b04      	cmp	r3, #4
 8003908:	d107      	bne.n	800391a <_ZN13ButtonManager12processEventEv+0x132>
        			ev->getId() == tmLed)
 800390a:	6978      	ldr	r0, [r7, #20]
 800390c:	f7ff fe5c 	bl	80035c8 <_ZNK8IXFEvent5getIdEv>
 8003910:	4603      	mov	r3, r0
        	if (ev->getEventType() == IXFEvent::Timeout &&
 8003912:	2b01      	cmp	r3, #1
 8003914:	d101      	bne.n	800391a <_ZN13ButtonManager12processEventEv+0x132>
 8003916:	2301      	movs	r3, #1
 8003918:	e000      	b.n	800391c <_ZN13ButtonManager12processEventEv+0x134>
 800391a:	2300      	movs	r3, #0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00b      	beq.n	8003938 <_ZN13ButtonManager12processEventEv+0x150>
            {
                rootState = STATE_WAIT;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	741a      	strb	r2, [r3, #16]
            }
            break;
 8003926:	e007      	b.n	8003938 <_ZN13ButtonManager12processEventEv+0x150>
            break;
 8003928:	bf00      	nop
 800392a:	e006      	b.n	800393a <_ZN13ButtonManager12processEventEv+0x152>
            break;
 800392c:	bf00      	nop
 800392e:	e004      	b.n	800393a <_ZN13ButtonManager12processEventEv+0x152>
            break;
 8003930:	bf00      	nop
 8003932:	e002      	b.n	800393a <_ZN13ButtonManager12processEventEv+0x152>
            break;
 8003934:	bf00      	nop
 8003936:	e000      	b.n	800393a <_ZN13ButtonManager12processEventEv+0x152>
            break;
 8003938:	bf00      	nop
    }

    // the action switch
    if (lastState != rootState)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	7c1b      	ldrb	r3, [r3, #16]
 800393e:	7cfa      	ldrb	r2, [r7, #19]
 8003940:	429a      	cmp	r2, r3
 8003942:	d06b      	beq.n	8003a1c <_ZN13ButtonManager12processEventEv+0x234>
    {
        result = EventStatus::Consumed;
 8003944:	f107 030c 	add.w	r3, r7, #12
 8003948:	2101      	movs	r1, #1
 800394a:	4618      	mov	r0, r3
 800394c:	f7ff fe48 	bl	80035e0 <_ZN11EventStatusC1ENS_12eEventStatusE>
 8003950:	7b3b      	ldrb	r3, [r7, #12]
 8003952:	723b      	strb	r3, [r7, #8]
        switch (rootState)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	7c1b      	ldrb	r3, [r3, #16]
 8003958:	2b04      	cmp	r3, #4
 800395a:	d867      	bhi.n	8003a2c <_ZN13ButtonManager12processEventEv+0x244>
 800395c:	a201      	add	r2, pc, #4	; (adr r2, 8003964 <_ZN13ButtonManager12processEventEv+0x17c>)
 800395e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003962:	bf00      	nop
 8003964:	08003a2d 	.word	0x08003a2d
 8003968:	08003979 	.word	0x08003979
 800396c:	0800398b 	.word	0x0800398b
 8003970:	080039ad 	.word	0x080039ad
 8003974:	080039f1 	.word	0x080039f1
        {
            case STATE_INITIAL:
            break;
            case STATE_WAIT:
            	Trace::outln("-- button manager waiting -- ");
 8003978:	482f      	ldr	r0, [pc, #188]	; (8003a38 <_ZN13ButtonManager12processEventEv+0x250>)
 800397a:	f000 fc53 	bl	8004224 <_ZN5Trace5outlnEPKcz>
            	pLed->turnOff();									// turn always LED off while waiting
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	4618      	mov	r0, r3
 8003984:	f000 fb9e 	bl	80040c4 <_ZN3Led7turnOffEv>
                break;
 8003988:	e050      	b.n	8003a2c <_ZN13ButtonManager12processEventEv+0x244>
            case STATE_PRESSED:
            	Trace::outln("-- button manager sees a button pressed -- ");
 800398a:	482c      	ldr	r0, [pc, #176]	; (8003a3c <_ZN13ButtonManager12processEventEv+0x254>)
 800398c:	f000 fc4a 	bl	8004224 <_ZN5Trace5outlnEPKcz>
                /* start the long pressed timeout
                 */
                getThread()->scheduleTimeout(tmLongPressed, longPressTimeout, this);
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	3318      	adds	r3, #24
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4610      	mov	r0, r2
 800399c:	4798      	blx	r3
 800399e:	4b28      	ldr	r3, [pc, #160]	; (8003a40 <_ZN13ButtonManager12processEventEv+0x258>)
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2100      	movs	r1, #0
 80039a6:	f001 f9ac 	bl	8004d02 <_ZN8XFThread15scheduleTimeoutEiiP11IXFReactive>
                break;
 80039aa:	e03f      	b.n	8003a2c <_ZN13ButtonManager12processEventEv+0x244>
            case STATE_CLICK:
            	Trace::outln("-- button manager sees a button clicked -- ");
 80039ac:	4825      	ldr	r0, [pc, #148]	; (8003a44 <_ZN13ButtonManager12processEventEv+0x25c>)
 80039ae:	f000 fc39 	bl	8004224 <_ZN5Trace5outlnEPKcz>
                getThread()->unscheduleTimeout(tmLongPressed, this);		// stop long pressed timeout
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	3318      	adds	r3, #24
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4610      	mov	r0, r2
 80039be:	4798      	blx	r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	461a      	mov	r2, r3
 80039c4:	2100      	movs	r1, #0
 80039c6:	f001 f9af 	bl	8004d28 <_ZN8XFThread17unscheduleTimeoutEiP11IXFReactive>
                getThread()->scheduleTimeout(tmLed, led_time_click, this);	// start led timeout
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	3318      	adds	r3, #24
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4610      	mov	r0, r2
 80039d6:	4798      	blx	r3
 80039d8:	4b1b      	ldr	r3, [pc, #108]	; (8003a48 <_ZN13ButtonManager12processEventEv+0x260>)
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2101      	movs	r1, #1
 80039e0:	f001 f98f 	bl	8004d02 <_ZN8XFThread15scheduleTimeoutEiiP11IXFReactive>
                pLed->turnOn();												// turn on LED
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	4618      	mov	r0, r3
 80039ea:	f000 fb5d 	bl	80040a8 <_ZN3Led6turnOnEv>
                break;
 80039ee:	e01d      	b.n	8003a2c <_ZN13ButtonManager12processEventEv+0x244>
            case STATE_LONG:
            	Trace::outln("-- button manager sees a long button press -- ");
 80039f0:	4816      	ldr	r0, [pc, #88]	; (8003a4c <_ZN13ButtonManager12processEventEv+0x264>)
 80039f2:	f000 fc17 	bl	8004224 <_ZN5Trace5outlnEPKcz>
            	getThread()->scheduleTimeout(tmLed, led_time_long, this);	// start led timeout
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	3318      	adds	r3, #24
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4610      	mov	r0, r2
 8003a02:	4798      	blx	r3
 8003a04:	4b12      	ldr	r3, [pc, #72]	; (8003a50 <_ZN13ButtonManager12processEventEv+0x268>)
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	f001 f979 	bl	8004d02 <_ZN8XFThread15scheduleTimeoutEiiP11IXFReactive>
            	pLed->turnOn();												// turn on LED
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f000 fb47 	bl	80040a8 <_ZN3Led6turnOnEv>
                break;
 8003a1a:	e007      	b.n	8003a2c <_ZN13ButtonManager12processEventEv+0x244>
        }
    }
    else
    {
        result = EventStatus::NotConsumed;
 8003a1c:	f107 0310 	add.w	r3, r7, #16
 8003a20:	2102      	movs	r1, #2
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7ff fddc 	bl	80035e0 <_ZN11EventStatusC1ENS_12eEventStatusE>
 8003a28:	7c3b      	ldrb	r3, [r7, #16]
 8003a2a:	723b      	strb	r3, [r7, #8]
    }
    return result;
 8003a2c:	7a3b      	ldrb	r3, [r7, #8]
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3718      	adds	r7, #24
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	08008068 	.word	0x08008068
 8003a3c:	08008088 	.word	0x08008088
 8003a40:	2000000c 	.word	0x2000000c
 8003a44:	080080b4 	.word	0x080080b4
 8003a48:	20000014 	.word	0x20000014
 8003a4c:	080080e0 	.word	0x080080e0
 8003a50:	20000010 	.word	0x20000010

08003a54 <_ZN13ButtonManager5startEv>:

void ButtonManager::start()
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
    this->startBehavior();
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	3308      	adds	r3, #8
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4610      	mov	r0, r2
 8003a68:	4798      	blx	r3
}
 8003a6a:	bf00      	nop
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <_ZN7Factory16buildApplicationEv>:
#include "board/button.h"
//#include "board/display/simpledisplay.h"
#include "factory.h"

void Factory::buildApplication()
{
 8003a72:	b5b0      	push	{r4, r5, r7, lr}
 8003a74:	b082      	sub	sp, #8
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
	board::initialize();	// Initialize board specific stuff
 8003a7a:	f000 f8e5 	bl	8003c48 <_ZN5board10initializeEv>

	//
	// Initialize objects
	//
	led().initialize();
 8003a7e:	f000 f8cf 	bl	8003c20 <_ZN7Factory3ledEv>
 8003a82:	4603      	mov	r3, r0
 8003a84:	4618      	mov	r0, r3
 8003a86:	f000 fb05 	bl	8004094 <_ZN3Led10initializeEv>
	button().initialize();
 8003a8a:	f000 f89b 	bl	8003bc4 <_ZN7Factory6buttonEv>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	4618      	mov	r0, r3
 8003a92:	f000 f969 	bl	8003d68 <_ZN6Button10initializeEv>
	buttonManager().initialize();
 8003a96:	f000 f85f 	bl	8003b58 <_ZN7Factory13buttonManagerEv>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7ff fdaf 	bl	8003600 <_ZN13ButtonManager10initializeEv>
#endif // USE_DISPLAY

	//
	// Initialize relations
	//
	buttonManager().initializeRelations(&button(), &led());
 8003aa2:	f000 f859 	bl	8003b58 <_ZN7Factory13buttonManagerEv>
 8003aa6:	4604      	mov	r4, r0
 8003aa8:	f000 f88c 	bl	8003bc4 <_ZN7Factory6buttonEv>
 8003aac:	4605      	mov	r5, r0
 8003aae:	f000 f8b7 	bl	8003c20 <_ZN7Factory3ledEv>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	4629      	mov	r1, r5
 8003ab8:	4620      	mov	r0, r4
 8003aba:	f7ff fdae 	bl	800361a <_ZN13ButtonManager19initializeRelationsEP8ToButtonP3Led>
	button().initializeRelations(&buttonManager());
 8003abe:	f000 f881 	bl	8003bc4 <_ZN7Factory6buttonEv>
 8003ac2:	4604      	mov	r4, r0
 8003ac4:	f000 f848 	bl	8003b58 <_ZN7Factory13buttonManagerEv>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d001      	beq.n	8003ad2 <_ZN7Factory16buildApplicationEv+0x60>
 8003ace:	330c      	adds	r3, #12
 8003ad0:	e000      	b.n	8003ad4 <_ZN7Factory16buildApplicationEv+0x62>
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	4620      	mov	r0, r4
 8003ad8:	f000 f967 	bl	8003daa <_ZN6Button19initializeRelationsEP15ToButtonManager>
#endif // USE_DISPLAY

	//
	// Start state machines
	//
	buttonManager().start();
 8003adc:	f000 f83c 	bl	8003b58 <_ZN7Factory13buttonManagerEv>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7ff ffb6 	bl	8003a54 <_ZN13ButtonManager5startEv>
	button().start();
 8003ae8:	f000 f86c 	bl	8003bc4 <_ZN7Factory6buttonEv>
 8003aec:	4603      	mov	r3, r0
 8003aee:	4618      	mov	r0, r3
 8003af0:	f000 f976 	bl	8003de0 <_ZN6Button5startEv>
}
 8003af4:	bf00      	nop
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bdb0      	pop	{r4, r5, r7, pc}

08003afc <_ZN7Factory8instanceEv>:

//static
Factory & Factory::instance()
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
    static Factory theInstance;
 8003b00:	4b0f      	ldr	r3, [pc, #60]	; (8003b40 <_ZN7Factory8instanceEv+0x44>)
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	f3bf 8f5b 	dmb	ish
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	bf0c      	ite	eq
 8003b12:	2301      	moveq	r3, #1
 8003b14:	2300      	movne	r3, #0
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00d      	beq.n	8003b38 <_ZN7Factory8instanceEv+0x3c>
 8003b1c:	4808      	ldr	r0, [pc, #32]	; (8003b40 <_ZN7Factory8instanceEv+0x44>)
 8003b1e:	f002 ffbf 	bl	8006aa0 <__cxa_guard_acquire>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	bf14      	ite	ne
 8003b28:	2301      	movne	r3, #1
 8003b2a:	2300      	moveq	r3, #0
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d002      	beq.n	8003b38 <_ZN7Factory8instanceEv+0x3c>
 8003b32:	4803      	ldr	r0, [pc, #12]	; (8003b40 <_ZN7Factory8instanceEv+0x44>)
 8003b34:	f002 ffc0 	bl	8006ab8 <__cxa_guard_release>
    return theInstance;
 8003b38:	4b02      	ldr	r3, [pc, #8]	; (8003b44 <_ZN7Factory8instanceEv+0x48>)
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	20000134 	.word	0x20000134
 8003b44:	20000130 	.word	0x20000130

08003b48 <__tcf_0>:

//static
ButtonManager & Factory::buttonManager()
{
	static ButtonManager bm;
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	4801      	ldr	r0, [pc, #4]	; (8003b54 <__tcf_0+0xc>)
 8003b4e:	f7ff fdcb 	bl	80036e8 <_ZN13ButtonManagerD1Ev>
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	20000138 	.word	0x20000138

08003b58 <_ZN7Factory13buttonManagerEv>:
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	af00      	add	r7, sp, #0
	static ButtonManager bm;
 8003b5c:	4b12      	ldr	r3, [pc, #72]	; (8003ba8 <_ZN7Factory13buttonManagerEv+0x50>)
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	f3bf 8f5b 	dmb	ish
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	bf0c      	ite	eq
 8003b6e:	2301      	moveq	r3, #1
 8003b70:	2300      	movne	r3, #0
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d013      	beq.n	8003ba0 <_ZN7Factory13buttonManagerEv+0x48>
 8003b78:	480b      	ldr	r0, [pc, #44]	; (8003ba8 <_ZN7Factory13buttonManagerEv+0x50>)
 8003b7a:	f002 ff91 	bl	8006aa0 <__cxa_guard_acquire>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	bf14      	ite	ne
 8003b84:	2301      	movne	r3, #1
 8003b86:	2300      	moveq	r3, #0
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d008      	beq.n	8003ba0 <_ZN7Factory13buttonManagerEv+0x48>
 8003b8e:	4807      	ldr	r0, [pc, #28]	; (8003bac <_ZN7Factory13buttonManagerEv+0x54>)
 8003b90:	f7ff fd86 	bl	80036a0 <_ZN13ButtonManagerC1Ev>
 8003b94:	4806      	ldr	r0, [pc, #24]	; (8003bb0 <_ZN7Factory13buttonManagerEv+0x58>)
 8003b96:	f002 fffb 	bl	8006b90 <atexit>
 8003b9a:	4803      	ldr	r0, [pc, #12]	; (8003ba8 <_ZN7Factory13buttonManagerEv+0x50>)
 8003b9c:	f002 ff8c 	bl	8006ab8 <__cxa_guard_release>

	return bm;
 8003ba0:	4b02      	ldr	r3, [pc, #8]	; (8003bac <_ZN7Factory13buttonManagerEv+0x54>)
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	20000154 	.word	0x20000154
 8003bac:	20000138 	.word	0x20000138
 8003bb0:	08003b49 	.word	0x08003b49

08003bb4 <__tcf_1>:

//static
Button & Factory::button()
{
	static Button button;
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	4801      	ldr	r0, [pc, #4]	; (8003bc0 <__tcf_1+0xc>)
 8003bba:	f000 f8a1 	bl	8003d00 <_ZN6ButtonD1Ev>
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	20000158 	.word	0x20000158

08003bc4 <_ZN7Factory6buttonEv>:
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
	static Button button;
 8003bc8:	4b12      	ldr	r3, [pc, #72]	; (8003c14 <_ZN7Factory6buttonEv+0x50>)
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	f3bf 8f5b 	dmb	ish
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	bf0c      	ite	eq
 8003bda:	2301      	moveq	r3, #1
 8003bdc:	2300      	movne	r3, #0
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d013      	beq.n	8003c0c <_ZN7Factory6buttonEv+0x48>
 8003be4:	480b      	ldr	r0, [pc, #44]	; (8003c14 <_ZN7Factory6buttonEv+0x50>)
 8003be6:	f002 ff5b 	bl	8006aa0 <__cxa_guard_acquire>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	bf14      	ite	ne
 8003bf0:	2301      	movne	r3, #1
 8003bf2:	2300      	moveq	r3, #0
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d008      	beq.n	8003c0c <_ZN7Factory6buttonEv+0x48>
 8003bfa:	4807      	ldr	r0, [pc, #28]	; (8003c18 <_ZN7Factory6buttonEv+0x54>)
 8003bfc:	f000 f85a 	bl	8003cb4 <_ZN6ButtonC1Ev>
 8003c00:	4806      	ldr	r0, [pc, #24]	; (8003c1c <_ZN7Factory6buttonEv+0x58>)
 8003c02:	f002 ffc5 	bl	8006b90 <atexit>
 8003c06:	4803      	ldr	r0, [pc, #12]	; (8003c14 <_ZN7Factory6buttonEv+0x50>)
 8003c08:	f002 ff56 	bl	8006ab8 <__cxa_guard_release>

	return button;
 8003c0c:	4b02      	ldr	r3, [pc, #8]	; (8003c18 <_ZN7Factory6buttonEv+0x54>)
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	20000170 	.word	0x20000170
 8003c18:	20000158 	.word	0x20000158
 8003c1c:	08003bb5 	.word	0x08003bb5

08003c20 <_ZN7Factory3ledEv>:

//static
Led & Factory::led()
{
 8003c20:	b480      	push	{r7}
 8003c22:	af00      	add	r7, sp, #0
	static Led led;

	return led;
 8003c24:	4b02      	ldr	r3, [pc, #8]	; (8003c30 <_ZN7Factory3ledEv+0x10>)
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr
 8003c30:	20000174 	.word	0x20000174

08003c34 <Factory_buildApplication>:
	return display;
}
#endif // USE_DISPLAY

void Factory_buildApplication()
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
    Factory::instance().buildApplication();
 8003c38:	f7ff ff60 	bl	8003afc <_ZN7Factory8instanceEv>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7ff ff17 	bl	8003a72 <_ZN7Factory16buildApplicationEv>
}
 8003c44:	bf00      	nop
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <_ZN5board10initializeEv>:
#include "platform-config.h"
#include "trace/trace.h"
#include "board.h"

void board::initialize()
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
#if (USE_TRACE != 0)
	Trace::initialize();
 8003c4c:	f000 fa6e 	bl	800412c <_ZN5Trace10initializeEv>
#endif // USE_TRACE
}
 8003c50:	bf00      	nop
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <_ZN8ToButtonC1Ev>:
{
	PRESSED,
	RELEASED
};

class ToButton
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	4a04      	ldr	r2, [pc, #16]	; (8003c70 <_ZN8ToButtonC1Ev+0x1c>)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4618      	mov	r0, r3
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr
 8003c70:	0800867c 	.word	0x0800867c

08003c74 <_ZN8ToButtonD1Ev>:
{
public:
	virtual BState checkButtonState() = 0;

public:
	virtual ~ToButton() = default;
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	4a04      	ldr	r2, [pc, #16]	; (8003c90 <_ZN8ToButtonD1Ev+0x1c>)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	601a      	str	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4618      	mov	r0, r3
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr
 8003c90:	0800867c 	.word	0x0800867c

08003c94 <_ZN8ToButtonD0Ev>:
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f7ff ffe9 	bl	8003c74 <_ZN8ToButtonD1Ev>
 8003ca2:	2104      	movs	r1, #4
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f002 fef9 	bl	8006a9c <_ZdlPvj>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4618      	mov	r0, r3
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <_ZN6ButtonC1Ev>:
#include "mcu/mcu.h"
#include "trace/trace.h"
#include "main.h"
#include "button.h"

Button::Button()
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 : pManager(nullptr),
   state(RELEASED),
   rootState(STATE_INITIAL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7ff ffc8 	bl	8003c54 <_ZN8ToButtonC1Ev>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	3304      	adds	r3, #4
 8003cc8:	2100      	movs	r1, #0
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f000 fdc4 	bl	8004858 <_ZN10XFReactiveC1EP8XFThread>
 8003cd0:	4a09      	ldr	r2, [pc, #36]	; (8003cf8 <_ZN6ButtonC1Ev+0x44>)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	601a      	str	r2, [r3, #0]
 8003cd6:	4a09      	ldr	r2, [pc, #36]	; (8003cfc <_ZN6ButtonC1Ev+0x48>)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	605a      	str	r2, [r3, #4]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	611a      	str	r2, [r3, #16]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	751a      	strb	r2, [r3, #20]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	755a      	strb	r2, [r3, #21]
{
}
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3708      	adds	r7, #8
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	08008640 	.word	0x08008640
 8003cfc:	08008658 	.word	0x08008658

08003d00 <_ZN6ButtonD1Ev>:

Button::~Button()
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	4a09      	ldr	r2, [pc, #36]	; (8003d30 <_ZN6ButtonD1Ev+0x30>)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	601a      	str	r2, [r3, #0]
 8003d0e:	4a09      	ldr	r2, [pc, #36]	; (8003d34 <_ZN6ButtonD1Ev+0x34>)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	605a      	str	r2, [r3, #4]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	3304      	adds	r3, #4
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f000 fdbf 	bl	800489c <_ZN10XFReactiveD1Ev>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7ff ffa7 	bl	8003c74 <_ZN8ToButtonD1Ev>
{
}
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3708      	adds	r7, #8
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	08008640 	.word	0x08008640
 8003d34:	08008658 	.word	0x08008658

08003d38 <_ZThn4_N6ButtonD1Ev>:
class Button : public ToButton,
			   public XFReactive
{
public:
	Button();
    virtual ~Button();
 8003d38:	f1a0 0004 	sub.w	r0, r0, #4
 8003d3c:	f7ff bfe0 	b.w	8003d00 <_ZN6ButtonD1Ev>

08003d40 <_ZN6ButtonD0Ev>:
Button::~Button()
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
}
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f7ff ffd9 	bl	8003d00 <_ZN6ButtonD1Ev>
 8003d4e:	2118      	movs	r1, #24
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f002 fea3 	bl	8006a9c <_ZdlPvj>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3708      	adds	r7, #8
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <_ZThn4_N6ButtonD0Ev>:
 8003d60:	f1a0 0004 	sub.w	r0, r0, #4
 8003d64:	f7ff bfec 	b.w	8003d40 <_ZN6ButtonD0Ev>

08003d68 <_ZN6Button10initializeEv>:

void Button::initialize()
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
	// Initialize hardware
	initializeHardware();
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 f810 	bl	8003d96 <_ZN6Button18initializeHardwareEv>

	// Read actual button state (GPIO state)
	// (It may be pressed already at start up!)
	state = checkButtonState();
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	4798      	blx	r3
 8003d80:	4603      	mov	r3, r0
 8003d82:	461a      	mov	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	751a      	strb	r2, [r3, #20]

	// state machine state
	rootState = STATE_INITIAL;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	755a      	strb	r2, [r3, #21]
}
 8003d8e:	bf00      	nop
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <_ZN6Button18initializeHardwareEv>:

void Button::initializeHardware()
{
 8003d96:	b480      	push	{r7}
 8003d98:	b083      	sub	sp, #12
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
    //
    // This means that in this method no additional hardware initialization
    // code must be called. It is already implemented in the MX_GPIO_Init()
    // function in the 'Core/Src/main.c' file and also called in the main()
    // function!
}
 8003d9e:	bf00      	nop
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr

08003daa <_ZN6Button19initializeRelationsEP15ToButtonManager>:

void Button::initializeRelations(ToButtonManager * p)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b082      	sub	sp, #8
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
 8003db2:	6039      	str	r1, [r7, #0]
	setButtonManager(p);
 8003db4:	6839      	ldr	r1, [r7, #0]
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f804 	bl	8003dc4 <_ZN6Button16setButtonManagerEP15ToButtonManager>
}
 8003dbc:	bf00      	nop
 8003dbe:	3708      	adds	r7, #8
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <_ZN6Button16setButtonManagerEP15ToButtonManager>:

int Button::pollInterval = 20;	// [ms]

void Button::setButtonManager(ToButtonManager * p)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
	pManager = p;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	611a      	str	r2, [r3, #16]
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <_ZN6Button5startEv>:

void Button::start()
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
	startBehavior();	// Start state machine
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	1d1a      	adds	r2, r3, #4
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	3308      	adds	r3, #8
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4610      	mov	r0, r2
 8003df6:	4798      	blx	r3
}
 8003df8:	bf00      	nop
 8003dfa:	3708      	adds	r7, #8
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <_ZN6Button16checkButtonStateEv>:

BState Button::checkButtonState()
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
	// TODO: Implement method accordingly.
	bool state_released = readGpio();
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 f80d 	bl	8003e28 <_ZN6Button8readGpioEv>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	73fb      	strb	r3, [r7, #15]
	if(state_released)
 8003e12:	7bfb      	ldrb	r3, [r7, #15]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d001      	beq.n	8003e1c <_ZN6Button16checkButtonStateEv+0x1c>
	{
		return RELEASED;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e000      	b.n	8003e1e <_ZN6Button16checkButtonStateEv+0x1e>
	}
	else
	{
		return PRESSED;
 8003e1c:	2300      	movs	r3, #0
	}
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
	...

08003e28 <_ZN6Button8readGpioEv>:

bool Button::readGpio()
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
    // TODO: Call HAL_GPIO_ReadPin(...) function to get actual GPIO level of the button.
	GPIO_PinState current_state = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8003e30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003e34:	480b      	ldr	r0, [pc, #44]	; (8003e64 <_ZN6Button8readGpioEv+0x3c>)
 8003e36:	f7fd fa23 	bl	8001280 <HAL_GPIO_ReadPin>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	73fb      	strb	r3, [r7, #15]
	switch(current_state)
 8003e3e:	7bfb      	ldrb	r3, [r7, #15]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d002      	beq.n	8003e4a <_ZN6Button8readGpioEv+0x22>
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d002      	beq.n	8003e4e <_ZN6Button8readGpioEv+0x26>
 8003e48:	e003      	b.n	8003e52 <_ZN6Button8readGpioEv+0x2a>
	{
	case GPIO_PIN_RESET:
		return false;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	e005      	b.n	8003e5a <_ZN6Button8readGpioEv+0x32>
	case GPIO_PIN_SET:
		return true;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e003      	b.n	8003e5a <_ZN6Button8readGpioEv+0x32>
	default:
		Trace::outln("[ERROR] undefined GPIO Pin read!");
 8003e52:	4805      	ldr	r0, [pc, #20]	; (8003e68 <_ZN6Button8readGpioEv+0x40>)
 8003e54:	f000 f9e6 	bl	8004224 <_ZN5Trace5outlnEPKcz>
		return false;
 8003e58:	2300      	movs	r3, #0
	}
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	48000800 	.word	0x48000800
 8003e68:	08008110 	.word	0x08008110

08003e6c <_ZN6Button12processEventEv>:

EventStatus Button::processEvent()
{
 8003e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e6e:	b087      	sub	sp, #28
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
    // Do we handle the event?
    EventStatus result = EventStatus::Unknown;
 8003e74:	f107 0308 	add.w	r3, r7, #8
 8003e78:	2100      	movs	r1, #0
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7ff fbb0 	bl	80035e0 <_ZN11EventStatusC1ENS_12eEventStatusE>

    // TODO: Implement state-machine here.
    // get the actual event
	const IXFEvent* ev = this->getCurrentEvent();
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	3304      	adds	r3, #4
 8003e84:	4618      	mov	r0, r3
 8003e86:	f000 fdc5 	bl	8004a14 <_ZNK10XFReactive15getCurrentEventEv>
 8003e8a:	6178      	str	r0, [r7, #20]

	// save the current state
	smState lastState = rootState;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	7d5b      	ldrb	r3, [r3, #21]
 8003e90:	74fb      	strb	r3, [r7, #19]

	// the transition switch
	switch (rootState)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	7d5b      	ldrb	r3, [r3, #21]
 8003e96:	2b03      	cmp	r3, #3
 8003e98:	d853      	bhi.n	8003f42 <_ZN6Button12processEventEv+0xd6>
 8003e9a:	a201      	add	r2, pc, #4	; (adr r2, 8003ea0 <_ZN6Button12processEventEv+0x34>)
 8003e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea0:	08003eb1 	.word	0x08003eb1
 8003ea4:	08003ecf 	.word	0x08003ecf
 8003ea8:	08003ef9 	.word	0x08003ef9
 8003eac:	08003f17 	.word	0x08003f17
	{
		case STATE_INITIAL:
			if (ev->getEventType() == IXFEvent::Initial)
 8003eb0:	6978      	ldr	r0, [r7, #20]
 8003eb2:	f7ff fb7c 	bl	80035ae <_ZNK8IXFEvent12getEventTypeEv>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	bf0c      	ite	eq
 8003ebc:	2301      	moveq	r3, #1
 8003ebe:	2300      	movne	r3, #0
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d036      	beq.n	8003f34 <_ZN6Button12processEventEv+0xc8>
			{
				rootState = STATE_WAIT;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	755a      	strb	r2, [r3, #21]
			}
			break;
 8003ecc:	e032      	b.n	8003f34 <_ZN6Button12processEventEv+0xc8>
		case STATE_WAIT:
			if (ev->getEventType() == IXFEvent::Timeout &&
 8003ece:	6978      	ldr	r0, [r7, #20]
 8003ed0:	f7ff fb6d 	bl	80035ae <_ZNK8IXFEvent12getEventTypeEv>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b04      	cmp	r3, #4
 8003ed8:	d107      	bne.n	8003eea <_ZN6Button12processEventEv+0x7e>
				ev->getId() == tmPollButton)
 8003eda:	6978      	ldr	r0, [r7, #20]
 8003edc:	f7ff fb74 	bl	80035c8 <_ZNK8IXFEvent5getIdEv>
 8003ee0:	4603      	mov	r3, r0
			if (ev->getEventType() == IXFEvent::Timeout &&
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <_ZN6Button12processEventEv+0x7e>
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e000      	b.n	8003eec <_ZN6Button12processEventEv+0x80>
 8003eea:	2300      	movs	r3, #0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d023      	beq.n	8003f38 <_ZN6Button12processEventEv+0xcc>
			{
				rootState = STATE_GET_BSTATE;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	755a      	strb	r2, [r3, #21]
			}
			break;
 8003ef6:	e01f      	b.n	8003f38 <_ZN6Button12processEventEv+0xcc>
		case STATE_GET_BSTATE:
			// if the timeout wins
			if (ev->getEventType() == IXFEvent::NullTransition)
 8003ef8:	6978      	ldr	r0, [r7, #20]
 8003efa:	f7ff fb58 	bl	80035ae <_ZNK8IXFEvent12getEventTypeEv>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	bf0c      	ite	eq
 8003f04:	2301      	moveq	r3, #1
 8003f06:	2300      	movne	r3, #0
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d016      	beq.n	8003f3c <_ZN6Button12processEventEv+0xd0>
			{
				rootState = STATE_SEND_MANAGER;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2203      	movs	r2, #3
 8003f12:	755a      	strb	r2, [r3, #21]
			}
			break;
 8003f14:	e012      	b.n	8003f3c <_ZN6Button12processEventEv+0xd0>
		case STATE_SEND_MANAGER:
			if (ev->getEventType() == IXFEvent::NullTransition)
 8003f16:	6978      	ldr	r0, [r7, #20]
 8003f18:	f7ff fb49 	bl	80035ae <_ZNK8IXFEvent12getEventTypeEv>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	bf0c      	ite	eq
 8003f22:	2301      	moveq	r3, #1
 8003f24:	2300      	movne	r3, #0
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d009      	beq.n	8003f40 <_ZN6Button12processEventEv+0xd4>
			{
				rootState = STATE_WAIT;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	755a      	strb	r2, [r3, #21]
			}
			break;
 8003f32:	e005      	b.n	8003f40 <_ZN6Button12processEventEv+0xd4>
			break;
 8003f34:	bf00      	nop
 8003f36:	e004      	b.n	8003f42 <_ZN6Button12processEventEv+0xd6>
			break;
 8003f38:	bf00      	nop
 8003f3a:	e002      	b.n	8003f42 <_ZN6Button12processEventEv+0xd6>
			break;
 8003f3c:	bf00      	nop
 8003f3e:	e000      	b.n	8003f42 <_ZN6Button12processEventEv+0xd6>
			break;
 8003f40:	bf00      	nop
	}

	// the action switch
	if (lastState != rootState)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	7d5b      	ldrb	r3, [r3, #21]
 8003f46:	7cfa      	ldrb	r2, [r7, #19]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	f000 808a 	beq.w	8004062 <_ZN6Button12processEventEv+0x1f6>
	{
		result = EventStatus::Consumed;
 8003f4e:	f107 030c 	add.w	r3, r7, #12
 8003f52:	2101      	movs	r1, #1
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7ff fb43 	bl	80035e0 <_ZN11EventStatusC1ENS_12eEventStatusE>
 8003f5a:	7b3b      	ldrb	r3, [r7, #12]
 8003f5c:	723b      	strb	r3, [r7, #8]
		switch (rootState)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	7d5b      	ldrb	r3, [r3, #21]
 8003f62:	2b03      	cmp	r3, #3
 8003f64:	f200 8085 	bhi.w	8004072 <_ZN6Button12processEventEv+0x206>
 8003f68:	a201      	add	r2, pc, #4	; (adr r2, 8003f70 <_ZN6Button12processEventEv+0x104>)
 8003f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f6e:	bf00      	nop
 8003f70:	08004073 	.word	0x08004073
 8003f74:	08003f81 	.word	0x08003f81
 8003f78:	08003fa7 	.word	0x08003fa7
 8003f7c:	08004003 	.word	0x08004003
		{
			case STATE_INITIAL:
				break;
			case STATE_WAIT:
				Trace::outln("-- button start poll timeout -- ");
 8003f80:	483e      	ldr	r0, [pc, #248]	; (800407c <_ZN6Button12processEventEv+0x210>)
 8003f82:	f000 f94f 	bl	8004224 <_ZN5Trace5outlnEPKcz>
				getThread()->scheduleTimeout(tmPollButton, pollInterval, this);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	1d1a      	adds	r2, r3, #4
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	3318      	adds	r3, #24
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4610      	mov	r0, r2
 8003f94:	4798      	blx	r3
 8003f96:	4b3a      	ldr	r3, [pc, #232]	; (8004080 <_ZN6Button12processEventEv+0x214>)
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	3304      	adds	r3, #4
 8003f9e:	2100      	movs	r1, #0
 8003fa0:	f000 feaf 	bl	8004d02 <_ZN8XFThread15scheduleTimeoutEiiP11IXFReactive>
				break;
 8003fa4:	e065      	b.n	8004072 <_ZN6Button12processEventEv+0x206>
			case STATE_GET_BSTATE:
				Trace::outln("-- button get button state -- ");
 8003fa6:	4837      	ldr	r0, [pc, #220]	; (8004084 <_ZN6Button12processEventEv+0x218>)
 8003fa8:	f000 f93c 	bl	8004224 <_ZN5Trace5outlnEPKcz>
				state = checkButtonState();								// check the button state and store it into 'state'
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	4798      	blx	r3
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	461a      	mov	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	751a      	strb	r2, [r3, #20]
				getThread()->unscheduleTimeout(tmPollButton, this);		// stop the poll timeout
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	1d1a      	adds	r2, r3, #4
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	3318      	adds	r3, #24
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4610      	mov	r0, r2
 8003fcc:	4798      	blx	r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	3304      	adds	r3, #4
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	2100      	movs	r1, #0
 8003fd6:	f000 fea7 	bl	8004d28 <_ZN8XFThread17unscheduleTimeoutEiP11IXFReactive>
				GEN(XFNullTransition()); 								// generate a default transition to get out of here
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	1d1d      	adds	r5, r3, #4
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	330c      	adds	r3, #12
 8003fe4:	681c      	ldr	r4, [r3, #0]
 8003fe6:	2014      	movs	r0, #20
 8003fe8:	f002 fd69 	bl	8006abe <_Znwj>
 8003fec:	4603      	mov	r3, r0
 8003fee:	461e      	mov	r6, r3
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	2100      	movs	r1, #0
 8003ff4:	4630      	mov	r0, r6
 8003ff6:	f000 fbb7 	bl	8004768 <_ZN16XFNullTransitionC1EiP11IXFReactive>
 8003ffa:	4631      	mov	r1, r6
 8003ffc:	4628      	mov	r0, r5
 8003ffe:	47a0      	blx	r4
				break;
 8004000:	e037      	b.n	8004072 <_ZN6Button12processEventEv+0x206>
			case STATE_SEND_MANAGER:
				Trace::outln("-- button send state to manager -- ");
 8004002:	4821      	ldr	r0, [pc, #132]	; (8004088 <_ZN6Button12processEventEv+0x21c>)
 8004004:	f000 f90e 	bl	8004224 <_ZN5Trace5outlnEPKcz>
				// send states to button manager
				if(state == PRESSED)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	7d1b      	ldrb	r3, [r3, #20]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d107      	bne.n	8004020 <_ZN6Button12processEventEv+0x1b4>
				{
					pManager->pressed();
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	691a      	ldr	r2, [r3, #16]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4610      	mov	r0, r2
 800401e:	4798      	blx	r3
				}
				if(state == RELEASED)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	7d1b      	ldrb	r3, [r3, #20]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d108      	bne.n	800403a <_ZN6Button12processEventEv+0x1ce>
				{
					pManager->released();
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	691a      	ldr	r2, [r3, #16]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	3304      	adds	r3, #4
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4610      	mov	r0, r2
 8004038:	4798      	blx	r3
				}
				// generate a default transition to get out of here
				GEN(XFNullTransition());
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	1d1d      	adds	r5, r3, #4
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	330c      	adds	r3, #12
 8004044:	681c      	ldr	r4, [r3, #0]
 8004046:	2014      	movs	r0, #20
 8004048:	f002 fd39 	bl	8006abe <_Znwj>
 800404c:	4603      	mov	r3, r0
 800404e:	461e      	mov	r6, r3
 8004050:	2200      	movs	r2, #0
 8004052:	2100      	movs	r1, #0
 8004054:	4630      	mov	r0, r6
 8004056:	f000 fb87 	bl	8004768 <_ZN16XFNullTransitionC1EiP11IXFReactive>
 800405a:	4631      	mov	r1, r6
 800405c:	4628      	mov	r0, r5
 800405e:	47a0      	blx	r4
				break;
 8004060:	e007      	b.n	8004072 <_ZN6Button12processEventEv+0x206>
		}
	}
	else
	{
		result = EventStatus::NotConsumed;
 8004062:	f107 0310 	add.w	r3, r7, #16
 8004066:	2102      	movs	r1, #2
 8004068:	4618      	mov	r0, r3
 800406a:	f7ff fab9 	bl	80035e0 <_ZN11EventStatusC1ENS_12eEventStatusE>
 800406e:	7c3b      	ldrb	r3, [r7, #16]
 8004070:	723b      	strb	r3, [r7, #8]
	}

    return result;
 8004072:	7a3b      	ldrb	r3, [r7, #8]
}
 8004074:	4618      	mov	r0, r3
 8004076:	371c      	adds	r7, #28
 8004078:	46bd      	mov	sp, r7
 800407a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800407c:	08008134 	.word	0x08008134
 8004080:	20000018 	.word	0x20000018
 8004084:	08008158 	.word	0x08008158
 8004088:	08008178 	.word	0x08008178

0800408c <_ZThn4_N6Button12processEventEv>:

    void start();							///< Starts the state-machine.

protected:
    void initializeHardware();				///< Initializes hardware needed by this class.
    virtual EventStatus processEvent(); 	///< Implements the state machine for this class.
 800408c:	f1a0 0004 	sub.w	r0, r0, #4
 8004090:	f7ff beec 	b.w	8003e6c <_ZN6Button12processEventEv>

08004094 <_ZN3Led10initializeEv>:
#include "mcu/mcu.h"
#include "main.h"
#include "board/led.h"

void Led::initialize()
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
    //
    // This means that in this method no additional hardware initialization
    // code must be called. It is already implemented in the MX_GPIO_Init()
    // function in the 'Core/Src/main.c' file and also called in the main()
    // function!
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <_ZN3Led6turnOnEv>:

void Led::turnOn()
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
	// TODO: Call HAL_GPIO_WritePin(...) function to set GPIO pin connected to the LED.
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin ,GPIO_PIN_SET);
 80040b0:	2201      	movs	r2, #1
 80040b2:	2120      	movs	r1, #32
 80040b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040b8:	f7fd f8fa 	bl	80012b0 <HAL_GPIO_WritePin>
}
 80040bc:	bf00      	nop
 80040be:	3708      	adds	r7, #8
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <_ZN3Led7turnOffEv>:

void Led::turnOff()
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
    // TODO: Same procedure as mentioned above to turn of the LED.
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin ,GPIO_PIN_RESET);
 80040cc:	2200      	movs	r2, #0
 80040ce:	2120      	movs	r1, #32
 80040d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040d4:	f7fd f8ec 	bl	80012b0 <HAL_GPIO_WritePin>
}
 80040d8:	bf00      	nop
 80040da:	3708      	adds	r7, #8
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <_ZN4Uart4uartEh>:
	/**
	 * Static accessor to the instances of UART. Used by the factory.
	 * You should not use this method directly. Use the factory to
	 * access an UART instead.
	 */
	static inline Uart & uart(const unsigned char uartNbr)
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	4603      	mov	r3, r0
 80040e8:	71fb      	strb	r3, [r7, #7]
	{
		assert(uartNbr < UART_COUNT);
 80040ea:	79fb      	ldrb	r3, [r7, #7]
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d905      	bls.n	80040fc <_ZN4Uart4uartEh+0x1c>
 80040f0:	4b06      	ldr	r3, [pc, #24]	; (800410c <_ZN4Uart4uartEh+0x2c>)
 80040f2:	4a07      	ldr	r2, [pc, #28]	; (8004110 <_ZN4Uart4uartEh+0x30>)
 80040f4:	2125      	movs	r1, #37	; 0x25
 80040f6:	4807      	ldr	r0, [pc, #28]	; (8004114 <_ZN4Uart4uartEh+0x34>)
 80040f8:	f002 fd2c 	bl	8006b54 <__assert_func>
		return *_sUart[uartNbr];
 80040fc:	79fb      	ldrb	r3, [r7, #7]
 80040fe:	4a06      	ldr	r2, [pc, #24]	; (8004118 <_ZN4Uart4uartEh+0x38>)
 8004100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	}
 8004104:	4618      	mov	r0, r3
 8004106:	3708      	adds	r7, #8
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	0800819c 	.word	0x0800819c
 8004110:	080081b4 	.word	0x080081b4
 8004114:	080081dc 	.word	0x080081dc
 8004118:	20000310 	.word	0x20000310

0800411c <__tcf_0>:
	static Uart uart(1);	// UART2

	uart.initialize(115200);
#endif // TC_STM32
#ifdef TC_STM32CUBEIDE
	static Uart uart(TRACE_UART_INDEX, &huart2);    // UART2
 800411c:	b580      	push	{r7, lr}
 800411e:	af00      	add	r7, sp, #0
 8004120:	4801      	ldr	r0, [pc, #4]	; (8004128 <__tcf_0+0xc>)
 8004122:	f000 f921 	bl	8004368 <_ZN4UartD1Ev>
 8004126:	bd80      	pop	{r7, pc}
 8004128:	20000278 	.word	0x20000278

0800412c <_ZN5Trace10initializeEv>:
{
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
	static Uart uart(TRACE_UART_INDEX, &huart2);    // UART2
 8004130:	4b14      	ldr	r3, [pc, #80]	; (8004184 <_ZN5Trace10initializeEv+0x58>)
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	f3bf 8f5b 	dmb	ish
 8004138:	b2db      	uxtb	r3, r3
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b00      	cmp	r3, #0
 8004140:	bf0c      	ite	eq
 8004142:	2301      	moveq	r3, #1
 8004144:	2300      	movne	r3, #0
 8004146:	b2db      	uxtb	r3, r3
 8004148:	2b00      	cmp	r3, #0
 800414a:	d016      	beq.n	800417a <_ZN5Trace10initializeEv+0x4e>
 800414c:	480d      	ldr	r0, [pc, #52]	; (8004184 <_ZN5Trace10initializeEv+0x58>)
 800414e:	f002 fca7 	bl	8006aa0 <__cxa_guard_acquire>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	bf14      	ite	ne
 8004158:	2301      	movne	r3, #1
 800415a:	2300      	moveq	r3, #0
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00b      	beq.n	800417a <_ZN5Trace10initializeEv+0x4e>
 8004162:	2300      	movs	r3, #0
 8004164:	4a08      	ldr	r2, [pc, #32]	; (8004188 <_ZN5Trace10initializeEv+0x5c>)
 8004166:	2101      	movs	r1, #1
 8004168:	4808      	ldr	r0, [pc, #32]	; (800418c <_ZN5Trace10initializeEv+0x60>)
 800416a:	f000 f8b1 	bl	80042d0 <_ZN4UartC1EhP20__UART_HandleTypeDefb>
 800416e:	4808      	ldr	r0, [pc, #32]	; (8004190 <_ZN5Trace10initializeEv+0x64>)
 8004170:	f002 fd0e 	bl	8006b90 <atexit>
 8004174:	4803      	ldr	r0, [pc, #12]	; (8004184 <_ZN5Trace10initializeEv+0x58>)
 8004176:	f002 fc9f 	bl	8006ab8 <__cxa_guard_release>

	// Baud-rate is defined by STM32CubeIDE's .ioc file
    uart.initialize();
 800417a:	4804      	ldr	r0, [pc, #16]	; (800418c <_ZN5Trace10initializeEv+0x60>)
 800417c:	f000 f914 	bl	80043a8 <_ZN4Uart10initializeEv>
#endif // TC_STM32CUBEIDE
#endif
#endif
}
 8004180:	bf00      	nop
 8004182:	bd80      	pop	{r7, pc}
 8004184:	20000308 	.word	0x20000308
 8004188:	200000a4 	.word	0x200000a4
 800418c:	20000278 	.word	0x20000278
 8004190:	0800411d 	.word	0x0800411d

08004194 <_ZN5Trace6_printEPcb>:
 * @param str The string to print
 * @param addEndLine If true check if the string ends with a new line.
 */
// static
void Trace::_print(char * str, bool addEndLine /* = false */)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	460b      	mov	r3, r1
 800419e:	70fb      	strb	r3, [r7, #3]
#if (USE_TRACE != 0)
	const int len = strlen(str);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7fc f815 	bl	80001d0 <strlen>
 80041a6:	4603      	mov	r3, r0
 80041a8:	60fb      	str	r3, [r7, #12]

	if (addEndLine && (str[len - 1] != '\n'))
 80041aa:	78fb      	ldrb	r3, [r7, #3]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d01a      	beq.n	80041e6 <_ZN5Trace6_printEPcb+0x52>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	3b01      	subs	r3, #1
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	4413      	add	r3, r2
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	2b0a      	cmp	r3, #10
 80041bc:	d013      	beq.n	80041e6 <_ZN5Trace6_printEPcb+0x52>
		str[len + 1] = '\n';
		str[len + 2] = '\0';
		assert(len < TRACE_BUFFER_SIZE - 2);	// String too long for buffer
#else
		// Add "\r" (linux host)
		str[len] 	 = '\r';
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	4413      	add	r3, r2
 80041c4:	220d      	movs	r2, #13
 80041c6:	701a      	strb	r2, [r3, #0]
		str[len + 1] = '\0';
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	3301      	adds	r3, #1
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	4413      	add	r3, r2
 80041d0:	2200      	movs	r2, #0
 80041d2:	701a      	strb	r2, [r3, #0]
		assert(len < TRACE_BUFFER_SIZE - 1);	// String too long for buffer
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2bfe      	cmp	r3, #254	; 0xfe
 80041d8:	dd0e      	ble.n	80041f8 <_ZN5Trace6_printEPcb+0x64>
 80041da:	4b0e      	ldr	r3, [pc, #56]	; (8004214 <_ZN5Trace6_printEPcb+0x80>)
 80041dc:	4a0e      	ldr	r2, [pc, #56]	; (8004218 <_ZN5Trace6_printEPcb+0x84>)
 80041de:	2143      	movs	r1, #67	; 0x43
 80041e0:	480e      	ldr	r0, [pc, #56]	; (800421c <_ZN5Trace6_printEPcb+0x88>)
 80041e2:	f002 fcb7 	bl	8006b54 <__assert_func>
#endif
	}
	else
	{
		assert(len < TRACE_BUFFER_SIZE);		// String too long for buffer
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2bff      	cmp	r3, #255	; 0xff
 80041ea:	dd05      	ble.n	80041f8 <_ZN5Trace6_printEPcb+0x64>
 80041ec:	4b0c      	ldr	r3, [pc, #48]	; (8004220 <_ZN5Trace6_printEPcb+0x8c>)
 80041ee:	4a0a      	ldr	r2, [pc, #40]	; (8004218 <_ZN5Trace6_printEPcb+0x84>)
 80041f0:	2148      	movs	r1, #72	; 0x48
 80041f2:	480a      	ldr	r0, [pc, #40]	; (800421c <_ZN5Trace6_printEPcb+0x88>)
 80041f4:	f002 fcae 	bl	8006b54 <__assert_func>
	}

	Uart::uart(TRACE_UART_INDEX).write(str);
 80041f8:	2001      	movs	r0, #1
 80041fa:	f7ff ff71 	bl	80040e0 <_ZN4Uart4uartEh>
 80041fe:	4603      	mov	r3, r0
 8004200:	2200      	movs	r2, #0
 8004202:	6879      	ldr	r1, [r7, #4]
 8004204:	4618      	mov	r0, r3
 8004206:	f000 f8da 	bl	80043be <_ZN4Uart5writeEPKcj>
#endif // USE_TRACE
}
 800420a:	bf00      	nop
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	08008254 	.word	0x08008254
 8004218:	08008270 	.word	0x08008270
 800421c:	08008298 	.word	0x08008298
 8004220:	080082d0 	.word	0x080082d0

08004224 <_ZN5Trace5outlnEPKcz>:

// static
void Trace::outln(const char * const format, ...)
{
 8004224:	b40f      	push	{r0, r1, r2, r3}
 8004226:	b580      	push	{r7, lr}
 8004228:	b082      	sub	sp, #8
 800422a:	af00      	add	r7, sp, #0
#if (USE_TRACE != 0)
	va_list args;

	va_start(args, format);
 800422c:	f107 0314 	add.w	r3, r7, #20
 8004230:	607b      	str	r3, [r7, #4]
	vsiprintf(strTrace, format, args);
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	6939      	ldr	r1, [r7, #16]
 8004236:	4807      	ldr	r0, [pc, #28]	; (8004254 <_ZN5Trace5outlnEPKcz+0x30>)
 8004238:	f003 f964 	bl	8007504 <vsiprintf>
	va_end(args);

	_print(strTrace, true);
 800423c:	2101      	movs	r1, #1
 800423e:	4805      	ldr	r0, [pc, #20]	; (8004254 <_ZN5Trace5outlnEPKcz+0x30>)
 8004240:	f7ff ffa8 	bl	8004194 <_ZN5Trace6_printEPcb>
#endif // USE_TRACE
}
 8004244:	bf00      	nop
 8004246:	3708      	adds	r7, #8
 8004248:	46bd      	mov	sp, r7
 800424a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800424e:	b004      	add	sp, #16
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	20000178 	.word	0x20000178

08004258 <enterCritical>:
volatile unsigned char bInISR = 0;
volatile unsigned char bEnterCriticalRegionNested = 0;


void enterCritical()
{
 8004258:	b480      	push	{r7}
 800425a:	af00      	add	r7, sp, #0
	// Only disable interrupts when not calling from an ISR
	if (!inISR())
 800425c:	4b0b      	ldr	r3, [pc, #44]	; (800428c <enterCritical+0x34>)
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10c      	bne.n	8004280 <enterCritical+0x28>
	{
		if (!bEnterCriticalRegionNested)
 8004266:	4b0a      	ldr	r3, [pc, #40]	; (8004290 <enterCritical+0x38>)
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	b2db      	uxtb	r3, r3
 800426c:	2b00      	cmp	r3, #0
 800426e:	d100      	bne.n	8004272 <enterCritical+0x1a>
		{
			// Turn off the priority configurable interrupts
			asm volatile ("cpsid i");
 8004270:	b672      	cpsid	i
		}
		bEnterCriticalRegionNested++;
 8004272:	4b07      	ldr	r3, [pc, #28]	; (8004290 <enterCritical+0x38>)
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	b2db      	uxtb	r3, r3
 8004278:	3301      	adds	r3, #1
 800427a:	b2da      	uxtb	r2, r3
 800427c:	4b04      	ldr	r3, [pc, #16]	; (8004290 <enterCritical+0x38>)
 800427e:	701a      	strb	r2, [r3, #0]
	}

}
 8004280:	bf00      	nop
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	2000030c 	.word	0x2000030c
 8004290:	2000030d 	.word	0x2000030d

08004294 <exitCritical>:

void exitCritical()
{
 8004294:	b480      	push	{r7}
 8004296:	af00      	add	r7, sp, #0
	// Only enable interrupts when not calling from an ISR
	if (!inISR())
 8004298:	4b0b      	ldr	r3, [pc, #44]	; (80042c8 <exitCritical+0x34>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10c      	bne.n	80042bc <exitCritical+0x28>
	{
		bEnterCriticalRegionNested--;
 80042a2:	4b0a      	ldr	r3, [pc, #40]	; (80042cc <exitCritical+0x38>)
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	3b01      	subs	r3, #1
 80042aa:	b2da      	uxtb	r2, r3
 80042ac:	4b07      	ldr	r3, [pc, #28]	; (80042cc <exitCritical+0x38>)
 80042ae:	701a      	strb	r2, [r3, #0]

		if (!bEnterCriticalRegionNested)
 80042b0:	4b06      	ldr	r3, [pc, #24]	; (80042cc <exitCritical+0x38>)
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d100      	bne.n	80042bc <exitCritical+0x28>
		{
			// Turn on the interrupts with configurable priority
			asm volatile("cpsie i");
 80042ba:	b662      	cpsie	i
		}
	}
}
 80042bc:	bf00      	nop
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	2000030c 	.word	0x2000030c
 80042cc:	2000030d 	.word	0x2000030d

080042d0 <_ZN4UartC1EhP20__UART_HandleTypeDefb>:
#endif

Uart * Uart::_sUart[Uart::UART_COUNT];				// Comment: Startup script should initialize pointers to zero (.bss section)
bool Uart::_sInitialized[Uart::UART_COUNT];			// Same for other arrays

Uart::Uart(const unsigned char uartNbr, UART_HandleTypeDef * uartHandle, bool bTxDMA /* = false */)
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	607a      	str	r2, [r7, #4]
 80042da:	461a      	mov	r2, r3
 80042dc:	460b      	mov	r3, r1
 80042de:	72fb      	strb	r3, [r7, #11]
 80042e0:	4613      	mov	r3, r2
 80042e2:	72bb      	strb	r3, [r7, #10]
 : _uartNbr(-1),
   _pUartHandle(NULL),
   _bTxDMA(bTxDMA)
 80042e4:	4a1a      	ldr	r2, [pc, #104]	; (8004350 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x80>)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	601a      	str	r2, [r3, #0]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	22ff      	movs	r2, #255	; 0xff
 80042ee:	711a      	strb	r2, [r3, #4]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	609a      	str	r2, [r3, #8]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	7aba      	ldrb	r2, [r7, #10]
 80042fa:	731a      	strb	r2, [r3, #12]
{
	assert(uartNbr < UART_COUNT);
 80042fc:	7afb      	ldrb	r3, [r7, #11]
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d905      	bls.n	800430e <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x3e>
 8004302:	4b14      	ldr	r3, [pc, #80]	; (8004354 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x84>)
 8004304:	4a14      	ldr	r2, [pc, #80]	; (8004358 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x88>)
 8004306:	2111      	movs	r1, #17
 8004308:	4814      	ldr	r0, [pc, #80]	; (800435c <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x8c>)
 800430a:	f002 fc23 	bl	8006b54 <__assert_func>

	if (uartNbr < UART_COUNT)
 800430e:	7afb      	ldrb	r3, [r7, #11]
 8004310:	2b02      	cmp	r3, #2
 8004312:	d817      	bhi.n	8004344 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x74>
    {
        if (!_sUart[uartNbr])
 8004314:	7afb      	ldrb	r3, [r7, #11]
 8004316:	4a12      	ldr	r2, [pc, #72]	; (8004360 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x90>)
 8004318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d10b      	bne.n	8004338 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x68>
        {
            // Register instance
            _sUart[uartNbr] = this;
 8004320:	7afb      	ldrb	r3, [r7, #11]
 8004322:	490f      	ldr	r1, [pc, #60]	; (8004360 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x90>)
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            _uartNbr = uartNbr;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	7afa      	ldrb	r2, [r7, #11]
 800432e:	711a      	strb	r2, [r3, #4]

            _pUartHandle = uartHandle;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	609a      	str	r2, [r3, #8]
 8004336:	e005      	b.n	8004344 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x74>
        }
        else
        {
            assert(false);  // Error: Instance for specified UART already exists.
 8004338:	4b0a      	ldr	r3, [pc, #40]	; (8004364 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x94>)
 800433a:	4a07      	ldr	r2, [pc, #28]	; (8004358 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x88>)
 800433c:	211f      	movs	r1, #31
 800433e:	4807      	ldr	r0, [pc, #28]	; (800435c <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x8c>)
 8004340:	f002 fc08 	bl	8006b54 <__assert_func>
        }
    }
}
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	4618      	mov	r0, r3
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	08008690 	.word	0x08008690
 8004354:	080082e8 	.word	0x080082e8
 8004358:	08008300 	.word	0x08008300
 800435c:	08008338 	.word	0x08008338
 8004360:	20000310 	.word	0x20000310
 8004364:	08008370 	.word	0x08008370

08004368 <_ZN4UartD1Ev>:

Uart::~Uart()
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	4a04      	ldr	r2, [pc, #16]	; (8004384 <_ZN4UartD1Ev+0x1c>)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	601a      	str	r2, [r3, #0]
{

}
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4618      	mov	r0, r3
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr
 8004384:	08008690 	.word	0x08008690

08004388 <_ZN4UartD0Ev>:
Uart::~Uart()
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
}
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f7ff ffe9 	bl	8004368 <_ZN4UartD1Ev>
 8004396:	2190      	movs	r1, #144	; 0x90
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f002 fb7f 	bl	8006a9c <_ZdlPvj>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4618      	mov	r0, r3
 80043a2:	3708      	adds	r7, #8
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <_ZN4Uart10initializeEv>:

bool Uart::initialize()
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
	return true;
 80043b0:	2301      	movs	r3, #1
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <_ZN4Uart5writeEPKcj>:
    __HAL_UART_DISABLE(_pUartHandle);
    return true;
}

void Uart::write(const char * str, unsigned int length /* = 0 */)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b084      	sub	sp, #16
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	60f8      	str	r0, [r7, #12]
 80043c6:	60b9      	str	r1, [r7, #8]
 80043c8:	607a      	str	r2, [r7, #4]
	if (!length)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d103      	bne.n	80043d8 <_ZN4Uart5writeEPKcj+0x1a>
	{
		length = strlen(str);
 80043d0:	68b8      	ldr	r0, [r7, #8]
 80043d2:	f7fb fefd 	bl	80001d0 <strlen>
 80043d6:	6078      	str	r0, [r7, #4]
	}

    if (!_bTxDMA)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	7b1b      	ldrb	r3, [r3, #12]
 80043dc:	f083 0301 	eor.w	r3, r3, #1
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d008      	beq.n	80043f8 <_ZN4Uart5writeEPKcj+0x3a>
    {   // Transmit without DMA
        // Send next character
        HAL_UART_Transmit(_pUartHandle, (uint8_t *)str, length, 50);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6898      	ldr	r0, [r3, #8]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	2332      	movs	r3, #50	; 0x32
 80043f0:	68b9      	ldr	r1, [r7, #8]
 80043f2:	f7fe fad1 	bl	8002998 <HAL_UART_Transmit>
    }
    else
    {   // TX DMA enabled
        writeUsingDMA((const uint8_t *)str, length);
    }
}
 80043f6:	e004      	b.n	8004402 <_ZN4Uart5writeEPKcj+0x44>
        writeUsingDMA((const uint8_t *)str, length);
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	68b9      	ldr	r1, [r7, #8]
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f000 f805 	bl	800440c <_ZN4Uart13writeUsingDMAEPKhm>
}
 8004402:	bf00      	nop
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
	...

0800440c <_ZN4Uart13writeUsingDMAEPKhm>:

void Uart::writeUsingDMA(const uint8_t * str, uint32_t length)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
    assert(length <= sizeof(_pTxDmaBuffer));
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2b80      	cmp	r3, #128	; 0x80
 800441c:	d905      	bls.n	800442a <_ZN4Uart13writeUsingDMAEPKhm+0x1e>
 800441e:	4b13      	ldr	r3, [pc, #76]	; (800446c <_ZN4Uart13writeUsingDMAEPKhm+0x60>)
 8004420:	4a13      	ldr	r2, [pc, #76]	; (8004470 <_ZN4Uart13writeUsingDMAEPKhm+0x64>)
 8004422:	2150      	movs	r1, #80	; 0x50
 8004424:	4813      	ldr	r0, [pc, #76]	; (8004474 <_ZN4Uart13writeUsingDMAEPKhm+0x68>)
 8004426:	f002 fb95 	bl	8006b54 <__assert_func>

    // Copy data to TX DMA buffer
    ::memcpy(_pTxDmaBuffer, str, length);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	330d      	adds	r3, #13
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	68b9      	ldr	r1, [r7, #8]
 8004432:	4618      	mov	r0, r3
 8004434:	f002 fbfe 	bl	8006c34 <memcpy>

    // Check that a Tx process is not already ongoing
    // (should never happen, but who knows!)
    while (_pUartHandle->gState != HAL_UART_STATE_READY)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800443e:	2b20      	cmp	r3, #32
 8004440:	bf14      	ite	ne
 8004442:	2301      	movne	r3, #1
 8004444:	2300      	moveq	r3, #0
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2b00      	cmp	r3, #0
 800444a:	d001      	beq.n	8004450 <_ZN4Uart13writeUsingDMAEPKhm+0x44>
    { continue; }
 800444c:	bf00      	nop
    while (_pUartHandle->gState != HAL_UART_STATE_READY)
 800444e:	e7f3      	b.n	8004438 <_ZN4Uart13writeUsingDMAEPKhm+0x2c>

    // Give data to TX DMA
    HAL_UART_Transmit_DMA(_pUartHandle, _pTxDmaBuffer, length);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6898      	ldr	r0, [r3, #8]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	330d      	adds	r3, #13
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	b292      	uxth	r2, r2
 800445c:	4619      	mov	r1, r3
 800445e:	f7fe fb2f 	bl	8002ac0 <HAL_UART_Transmit_DMA>
}
 8004462:	bf00      	nop
 8004464:	3710      	adds	r7, #16
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	08008378 	.word	0x08008378
 8004470:	08008398 	.word	0x08008398
 8004474:	08008338 	.word	0x08008338

08004478 <_ZN8IXFEventC1ENS_10eEventTypeEiP11IXFReactive>:

public :
    /**
     * Default class constructor
     */
    IXFEvent(eEventType eventType, int id, IXFReactive * pBehavior) : _eventType(eventType), _id(id), _pBehavior(pBehavior) { _eventStatus.shouldDelete = true; }
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	607a      	str	r2, [r7, #4]
 8004482:	603b      	str	r3, [r7, #0]
 8004484:	460b      	mov	r3, r1
 8004486:	72fb      	strb	r3, [r7, #11]
 8004488:	4a0d      	ldr	r2, [pc, #52]	; (80044c0 <_ZN8IXFEventC1ENS_10eEventTypeEiP11IXFReactive+0x48>)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	601a      	str	r2, [r3, #0]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	7afa      	ldrb	r2, [r7, #11]
 8004492:	711a      	strb	r2, [r3, #4]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	609a      	str	r2, [r3, #8]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	330c      	adds	r3, #12
 800449e:	4618      	mov	r0, r3
 80044a0:	f000 f830 	bl	8004504 <_ZN8IXFEvent13_tEventStatusC1Ev>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	683a      	ldr	r2, [r7, #0]
 80044a8:	611a      	str	r2, [r3, #16]
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	7b13      	ldrb	r3, [r2, #12]
 80044ae:	f043 0301 	orr.w	r3, r3, #1
 80044b2:	7313      	strb	r3, [r2, #12]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	4618      	mov	r0, r3
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	080086b0 	.word	0x080086b0

080044c4 <_ZN8IXFEventD1Ev>:
    virtual ~IXFEvent() {}		///< Class destructor
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	4a04      	ldr	r2, [pc, #16]	; (80044e0 <_ZN8IXFEventD1Ev+0x1c>)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	601a      	str	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4618      	mov	r0, r3
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr
 80044e0:	080086b0 	.word	0x080086b0

080044e4 <_ZN8IXFEventD0Ev>:
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f7ff ffe9 	bl	80044c4 <_ZN8IXFEventD1Ev>
 80044f2:	2114      	movs	r1, #20
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f002 fad1 	bl	8006a9c <_ZdlPvj>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4618      	mov	r0, r3
 80044fe:	3708      	adds	r7, #8
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <_ZN8IXFEvent13_tEventStatusC1Ev>:
protected:
    typedef struct _tEventStatus
    {
        unsigned char shouldDelete : 1;	///< True in case the event should be deleted after consume.

        _tEventStatus()
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
        {
            shouldDelete = true;
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	7813      	ldrb	r3, [r2, #0]
 8004510:	f043 0301 	orr.w	r3, r3, #1
 8004514:	7013      	strb	r3, [r2, #0]
        }
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4618      	mov	r0, r3
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <_ZN12InitialEventC1Ev>:
#include "xf.h"
#include "initialevent.h"

InitialEvent::InitialEvent()
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
    : IXFEvent(IXFEvent::Initial, 0, NULL)
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	2300      	movs	r3, #0
 8004530:	2200      	movs	r2, #0
 8004532:	2101      	movs	r1, #1
 8004534:	f7ff ffa0 	bl	8004478 <_ZN8IXFEventC1ENS_10eEventTypeEiP11IXFReactive>
 8004538:	4a03      	ldr	r2, [pc, #12]	; (8004548 <_ZN12InitialEventC1Ev+0x24>)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	601a      	str	r2, [r3, #0]
{
}
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4618      	mov	r0, r3
 8004542:	3708      	adds	r7, #8
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	080086a0 	.word	0x080086a0

0800454c <_ZN12InitialEventD1Ev>:

InitialEvent::~InitialEvent()
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	4a05      	ldr	r2, [pc, #20]	; (800456c <_ZN12InitialEventD1Ev+0x20>)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	601a      	str	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4618      	mov	r0, r3
 800455e:	f7ff ffb1 	bl	80044c4 <_ZN8IXFEventD1Ev>
{

}
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4618      	mov	r0, r3
 8004566:	3708      	adds	r7, #8
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	080086a0 	.word	0x080086a0

08004570 <_ZN12InitialEventD0Ev>:
InitialEvent::~InitialEvent()
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
}
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f7ff ffe7 	bl	800454c <_ZN12InitialEventD1Ev>
 800457e:	2114      	movs	r1, #20
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f002 fa8b 	bl	8006a9c <_ZdlPvj>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4618      	mov	r0, r3
 800458a:	3708      	adds	r7, #8
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <_ZNK16XFTimeoutManager12tickIntervalEv>:
    void start();

    void scheduleTimeout(int timeoutId, int interval, IXFReactive * pReactive);
    void unscheduleTimeout(int timeoutId, IXFReactive * pReactive);
    void tick();														///< Called regularly in XFTimeoutManager::_tickInterval time
    inline int tickInterval() const { return _tickInterval; }			///< Returns tick time interval in milliseconds.
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	4618      	mov	r0, r3
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <_ZN2XF4initEi>:
/**
 * Initializes the eXecution Framework (XF). Call
 * this method prior to initialize the other objects of the system.
 */
void XF::init(int timeInterval)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
    // Create and initialize XFTimeoutManager
    XFTimeoutManager::getInstance()->setTickInterval(timeInterval);
 80045b0:	f001 fc3e 	bl	8005e30 <_ZN16XFTimeoutManager11getInstanceEv>
 80045b4:	4603      	mov	r3, r0
 80045b6:	6879      	ldr	r1, [r7, #4]
 80045b8:	4618      	mov	r0, r3
 80045ba:	f001 fc4f 	bl	8005e5c <_ZN16XFTimeoutManager15setTickIntervalEi>
    // Start it
    XFTimeoutManager::getInstance()->start();
 80045be:	f001 fc37 	bl	8005e30 <_ZN16XFTimeoutManager11getInstanceEv>
 80045c2:	4603      	mov	r3, r0
 80045c4:	4618      	mov	r0, r3
 80045c6:	f001 fc57 	bl	8005e78 <_ZN16XFTimeoutManager5startEv>
}
 80045ca:	bf00      	nop
 80045cc:	3708      	adds	r7, #8
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
	...

080045d4 <_ZN2XF5startEv>:


#if defined(TC_STM32) || defined(TC_STM32CUBEIDE) /*******************************************************************/

void XF::start()
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	af00      	add	r7, sp, #0
    _isRunning = true;     // From here the XF is running
 80045d8:	4b03      	ldr	r3, [pc, #12]	; (80045e8 <_ZN2XF5startEv+0x14>)
 80045da:	2201      	movs	r2, #1
 80045dc:	701a      	strb	r2, [r3, #0]

    _mainThread.start();
 80045de:	4803      	ldr	r0, [pc, #12]	; (80045ec <_ZN2XF5startEv+0x18>)
 80045e0:	f000 fb36 	bl	8004c50 <_ZN8XFThread5startEv>
}
 80045e4:	bf00      	nop
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	2000031c 	.word	0x2000031c
 80045ec:	20000320 	.word	0x20000320

080045f0 <_ZN2XF13getMainThreadEv>:

#endif /**************************************************************************************************************/


XFThread * XF::getMainThread()
{
 80045f0:	b480      	push	{r7}
 80045f2:	af00      	add	r7, sp, #0
    return &_mainThread;
 80045f4:	4b02      	ldr	r3, [pc, #8]	; (8004600 <_ZN2XF13getMainThreadEv+0x10>)
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr
 8004600:	20000320 	.word	0x20000320

08004604 <_ZN2XF9isRunningEv>:

bool XF::isRunning()
{
 8004604:	b480      	push	{r7}
 8004606:	af00      	add	r7, sp, #0
    return _isRunning;
 8004608:	4b03      	ldr	r3, [pc, #12]	; (8004618 <_ZN2XF9isRunningEv+0x14>)
 800460a:	781b      	ldrb	r3, [r3, #0]
}
 800460c:	4618      	mov	r0, r3
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	2000031c 	.word	0x2000031c

0800461c <XF_init>:

void XF_init(int timeInterval)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
    XF::init(timeInterval);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f7ff ffbf 	bl	80045a8 <_ZN2XF4initEi>
}
 800462a:	bf00      	nop
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <XF_start>:

void XF_start()
{
 8004632:	b580      	push	{r7, lr}
 8004634:	af00      	add	r7, sp, #0
    XF::start();
 8004636:	f7ff ffcd 	bl	80045d4 <_ZN2XF5startEv>
}
 800463a:	bf00      	nop
 800463c:	bd80      	pop	{r7, pc}

0800463e <XF_isRunning>:

bool XF_isRunning()
{
 800463e:	b580      	push	{r7, lr}
 8004640:	af00      	add	r7, sp, #0
    return XF::isRunning();
 8004642:	f7ff ffdf 	bl	8004604 <_ZN2XF9isRunningEv>
 8004646:	4603      	mov	r3, r0
}
 8004648:	4618      	mov	r0, r3
 800464a:	bd80      	pop	{r7, pc}

0800464c <XF_tick>:

void XF_tick()
{
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0
    enterISR();                                     // Tell critical section we are in an ISR
 8004650:	4b09      	ldr	r3, [pc, #36]	; (8004678 <XF_tick+0x2c>)
 8004652:	2201      	movs	r2, #1
 8004654:	701a      	strb	r2, [r3, #0]
    if (XF::isRunning())                            // Call tick only if XF is running
 8004656:	f7ff ffd5 	bl	8004604 <_ZN2XF9isRunningEv>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d005      	beq.n	800466c <XF_tick+0x20>
    {
        XFTimeoutManager::getInstance()->tick();    // Call framework hook tick function
 8004660:	f001 fbe6 	bl	8005e30 <_ZN16XFTimeoutManager11getInstanceEv>
 8004664:	4603      	mov	r3, r0
 8004666:	4618      	mov	r0, r3
 8004668:	f001 fc48 	bl	8005efc <_ZN16XFTimeoutManager4tickEv>
    }
    exitISR();
 800466c:	4b02      	ldr	r3, [pc, #8]	; (8004678 <XF_tick+0x2c>)
 800466e:	2200      	movs	r2, #0
 8004670:	701a      	strb	r2, [r3, #0]
}
 8004672:	bf00      	nop
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	2000030c 	.word	0x2000030c

0800467c <XF_tickIntervalInMilliseconds>:

int32_t XF_tickIntervalInMilliseconds()
{
 800467c:	b580      	push	{r7, lr}
 800467e:	af00      	add	r7, sp, #0
    return XFTimeoutManager::getInstance()->tickInterval();
 8004680:	f001 fbd6 	bl	8005e30 <_ZN16XFTimeoutManager11getInstanceEv>
 8004684:	4603      	mov	r3, r0
 8004686:	4618      	mov	r0, r3
 8004688:	f7ff ff82 	bl	8004590 <_ZNK16XFTimeoutManager12tickIntervalEv>
 800468c:	4603      	mov	r3, r0
}
 800468e:	4618      	mov	r0, r3
 8004690:	bd80      	pop	{r7, pc}
	...

08004694 <_Z41__static_initialization_and_destruction_0ii>:
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d107      	bne.n	80046b4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d102      	bne.n	80046b4 <_Z41__static_initialization_and_destruction_0ii+0x20>
XFThread XF::_mainThread;
 80046ae:	4809      	ldr	r0, [pc, #36]	; (80046d4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80046b0:	f000 fa94 	bl	8004bdc <_ZN8XFThreadC1Ev>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d107      	bne.n	80046ca <_Z41__static_initialization_and_destruction_0ii+0x36>
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d102      	bne.n	80046ca <_Z41__static_initialization_and_destruction_0ii+0x36>
 80046c4:	4803      	ldr	r0, [pc, #12]	; (80046d4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80046c6:	f000 fa9f 	bl	8004c08 <_ZN8XFThreadD1Ev>
}
 80046ca:	bf00      	nop
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	20000320 	.word	0x20000320

080046d8 <_GLOBAL__sub_I__ZN2XF13_bInitializedE>:
 80046d8:	b580      	push	{r7, lr}
 80046da:	af00      	add	r7, sp, #0
 80046dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80046e0:	2001      	movs	r0, #1
 80046e2:	f7ff ffd7 	bl	8004694 <_Z41__static_initialization_and_destruction_0ii>
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <_GLOBAL__sub_D__ZN2XF13_bInitializedE>:
 80046e8:	b580      	push	{r7, lr}
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80046f0:	2000      	movs	r0, #0
 80046f2:	f7ff ffcf 	bl	8004694 <_Z41__static_initialization_and_destruction_0ii>
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <_ZN7XFEventC1EiP11IXFReactive>:
 * Constructor for the class
 *
 * \param id Identifier uniquely identifying the event in the context of the behavior
 * \param pBehavior The Behavior for which the event was constructed (will consume the event)
 **/
XFEvent::XFEvent(int id, IXFReactive * pBehavior)
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
    : IXFEvent(IXFEvent::Event, id, pBehavior)
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68ba      	ldr	r2, [r7, #8]
 800470a:	2103      	movs	r1, #3
 800470c:	f7ff feb4 	bl	8004478 <_ZN8IXFEventC1ENS_10eEventTypeEiP11IXFReactive>
 8004710:	4a03      	ldr	r2, [pc, #12]	; (8004720 <_ZN7XFEventC1EiP11IXFReactive+0x28>)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	601a      	str	r2, [r3, #0]
{

}
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	4618      	mov	r0, r3
 800471a:	3710      	adds	r7, #16
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	080086c0 	.word	0x080086c0

08004724 <_ZN7XFEventD1Ev>:

XFEvent::~XFEvent()
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	4a05      	ldr	r2, [pc, #20]	; (8004744 <_ZN7XFEventD1Ev+0x20>)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	601a      	str	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4618      	mov	r0, r3
 8004736:	f7ff fec5 	bl	80044c4 <_ZN8IXFEventD1Ev>
{

}
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4618      	mov	r0, r3
 800473e:	3708      	adds	r7, #8
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	080086c0 	.word	0x080086c0

08004748 <_ZN7XFEventD0Ev>:
XFEvent::~XFEvent()
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
}
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f7ff ffe7 	bl	8004724 <_ZN7XFEventD1Ev>
 8004756:	2114      	movs	r1, #20
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f002 f99f 	bl	8006a9c <_ZdlPvj>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4618      	mov	r0, r3
 8004762:	3708      	adds	r7, #8
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <_ZN16XFNullTransitionC1EiP11IXFReactive>:
 * Constuctor
 *
 * @param id		ID of the null transition.
 * \param pBehavior Behavior in which the null transition will be executed.
 */
XFNullTransition::XFNullTransition( int id , IXFReactive * pBehavior)
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
 : IXFEvent(IXFEvent::NullTransition, id , pBehavior)
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68ba      	ldr	r2, [r7, #8]
 800477a:	2102      	movs	r1, #2
 800477c:	f7ff fe7c 	bl	8004478 <_ZN8IXFEventC1ENS_10eEventTypeEiP11IXFReactive>
 8004780:	4a03      	ldr	r2, [pc, #12]	; (8004790 <_ZN16XFNullTransitionC1EiP11IXFReactive+0x28>)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	601a      	str	r2, [r3, #0]
{
}
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	4618      	mov	r0, r3
 800478a:	3710      	adds	r7, #16
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	080086d0 	.word	0x080086d0

08004794 <_ZN16XFNullTransitionD1Ev>:

XFNullTransition::~XFNullTransition()
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	4a05      	ldr	r2, [pc, #20]	; (80047b4 <_ZN16XFNullTransitionD1Ev+0x20>)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	601a      	str	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7ff fe8d 	bl	80044c4 <_ZN8IXFEventD1Ev>
{

}
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4618      	mov	r0, r3
 80047ae:	3708      	adds	r7, #8
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	080086d0 	.word	0x080086d0

080047b8 <_ZN16XFNullTransitionD0Ev>:
XFNullTransition::~XFNullTransition()
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
}
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f7ff ffe7 	bl	8004794 <_ZN16XFNullTransitionD1Ev>
 80047c6:	2114      	movs	r1, #20
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f002 f967 	bl	8006a9c <_ZdlPvj>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4618      	mov	r0, r3
 80047d2:	3708      	adds	r7, #8
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <_ZN8IXFEvent11setBehaviorEP11IXFReactive>:
    inline void setBehavior(IXFReactive * pBehavior) { _pBehavior = pBehavior; }
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	611a      	str	r2, [r3, #16]
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <_ZN11IXFReactiveC1EP9IXFThread>:
    /**
     * Constructor
     *
     * \param pThread Reference to thread executing the behavior of this class.
     */
    IXFReactive(IXFThread * pThread = NULL) { (void)pThread; }
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
 80047fe:	4a05      	ldr	r2, [pc, #20]	; (8004814 <_ZN11IXFReactiveC1EP9IXFThread+0x20>)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	601a      	str	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4618      	mov	r0, r3
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	08008704 	.word	0x08008704

08004818 <_ZN11IXFReactiveD1Ev>:
    virtual ~IXFReactive() {}
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	4a04      	ldr	r2, [pc, #16]	; (8004834 <_ZN11IXFReactiveD1Ev+0x1c>)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	601a      	str	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4618      	mov	r0, r3
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr
 8004834:	08008704 	.word	0x08008704

08004838 <_ZN11IXFReactiveD0Ev>:
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f7ff ffe9 	bl	8004818 <_ZN11IXFReactiveD1Ev>
 8004846:	2104      	movs	r1, #4
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f002 f927 	bl	8006a9c <_ZdlPvj>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4618      	mov	r0, r3
 8004852:	3708      	adds	r7, #8
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <_ZN10XFReactiveC1EP8XFThread>:
/**
 * Constructor
 *
 * \param pThread Reference to thread who will process the behavioral part of this reactive class.
 */
XFReactive::XFReactive(XFThread * pThread)
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
 : _pThread((pThread) ? pThread : XF::getMainThread()),
   _pCurrentEvent(nullptr)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2100      	movs	r1, #0
 8004866:	4618      	mov	r0, r3
 8004868:	f7ff ffc4 	bl	80047f4 <_ZN11IXFReactiveC1EP9IXFThread>
 800486c:	4a0a      	ldr	r2, [pc, #40]	; (8004898 <_ZN10XFReactiveC1EP8XFThread+0x40>)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	601a      	str	r2, [r3, #0]
 : _pThread((pThread) ? pThread : XF::getMainThread()),
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d103      	bne.n	8004880 <_ZN10XFReactiveC1EP8XFThread+0x28>
 8004878:	f7ff feba 	bl	80045f0 <_ZN2XF13getMainThreadEv>
 800487c:	4603      	mov	r3, r0
 800487e:	e000      	b.n	8004882 <_ZN10XFReactiveC1EP8XFThread+0x2a>
 8004880:	683b      	ldr	r3, [r7, #0]
   _pCurrentEvent(nullptr)
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	6053      	str	r3, [r2, #4]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	609a      	str	r2, [r3, #8]
{
}
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4618      	mov	r0, r3
 8004890:	3708      	adds	r7, #8
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	080086e0 	.word	0x080086e0

0800489c <_ZN10XFReactiveD1Ev>:

XFReactive::~XFReactive()
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	4a05      	ldr	r2, [pc, #20]	; (80048bc <_ZN10XFReactiveD1Ev+0x20>)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	601a      	str	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4618      	mov	r0, r3
 80048ae:	f7ff ffb3 	bl	8004818 <_ZN11IXFReactiveD1Ev>
{

}
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4618      	mov	r0, r3
 80048b6:	3708      	adds	r7, #8
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	080086e0 	.word	0x080086e0

080048c0 <_ZN10XFReactiveD0Ev>:
XFReactive::~XFReactive()
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
}
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f7ff ffe7 	bl	800489c <_ZN10XFReactiveD1Ev>
 80048ce:	210c      	movs	r1, #12
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f002 f8e3 	bl	8006a9c <_ZdlPvj>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4618      	mov	r0, r3
 80048da:	3708      	adds	r7, #8
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <_ZN10XFReactive13startBehaviorEv>:

void XFReactive::startBehavior()
{
 80048e0:	b5b0      	push	{r4, r5, r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
    GEN(InitialEvent());
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	330c      	adds	r3, #12
 80048ee:	681c      	ldr	r4, [r3, #0]
 80048f0:	2014      	movs	r0, #20
 80048f2:	f002 f8e4 	bl	8006abe <_Znwj>
 80048f6:	4603      	mov	r3, r0
 80048f8:	461d      	mov	r5, r3
 80048fa:	4628      	mov	r0, r5
 80048fc:	f7ff fe12 	bl	8004524 <_ZN12InitialEventC1Ev>
 8004900:	4629      	mov	r1, r5
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	47a0      	blx	r4
}
 8004906:	bf00      	nop
 8004908:	3708      	adds	r7, #8
 800490a:	46bd      	mov	sp, r7
 800490c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004910 <_ZN10XFReactive9pushEventEP8IXFEvent>:


void XFReactive::pushEvent(IXFEvent * pEvent)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
    assert(pEvent);
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d105      	bne.n	800492c <_ZN10XFReactive9pushEventEP8IXFEvent+0x1c>
 8004920:	4b0c      	ldr	r3, [pc, #48]	; (8004954 <_ZN10XFReactive9pushEventEP8IXFEvent+0x44>)
 8004922:	4a0d      	ldr	r2, [pc, #52]	; (8004958 <_ZN10XFReactive9pushEventEP8IXFEvent+0x48>)
 8004924:	2120      	movs	r1, #32
 8004926:	480d      	ldr	r0, [pc, #52]	; (800495c <_ZN10XFReactive9pushEventEP8IXFEvent+0x4c>)
 8004928:	f002 f914 	bl	8006b54 <__assert_func>

    // Set owner
    pEvent->setBehavior(this);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4619      	mov	r1, r3
 8004930:	6838      	ldr	r0, [r7, #0]
 8004932:	f7ff ff51 	bl	80047d8 <_ZN8IXFEvent11setBehaviorEP11IXFReactive>
    // Push to threads event queue
    getThread()->pushEvent(pEvent);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	3318      	adds	r3, #24
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	4798      	blx	r3
 8004942:	4603      	mov	r3, r0
 8004944:	6839      	ldr	r1, [r7, #0]
 8004946:	4618      	mov	r0, r3
 8004948:	f000 f9cb 	bl	8004ce2 <_ZN8XFThread9pushEventEP8IXFEvent>
}
 800494c:	bf00      	nop
 800494e:	3708      	adds	r7, #8
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	080083cc 	.word	0x080083cc
 8004958:	080083d4 	.word	0x080083d4
 800495c:	08008404 	.word	0x08008404

08004960 <_ZN10XFReactive7processEP8IXFEvent>:
 * Must only be called by the associated thread (see #_pThread).
 *
 * \param pEvent The event to process.
 */
EventStatus XFReactive::process(IXFEvent * pEvent)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
    EventStatus eventStatus;
 800496a:	f107 030c 	add.w	r3, r7, #12
 800496e:	2100      	movs	r1, #0
 8004970:	4618      	mov	r0, r3
 8004972:	f7fe fe35 	bl	80035e0 <_ZN11EventStatusC1ENS_12eEventStatusE>

    assert(pEvent);
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d105      	bne.n	8004988 <_ZN10XFReactive7processEP8IXFEvent+0x28>
 800497c:	4b0d      	ldr	r3, [pc, #52]	; (80049b4 <_ZN10XFReactive7processEP8IXFEvent+0x54>)
 800497e:	4a0e      	ldr	r2, [pc, #56]	; (80049b8 <_ZN10XFReactive7processEP8IXFEvent+0x58>)
 8004980:	2136      	movs	r1, #54	; 0x36
 8004982:	480e      	ldr	r0, [pc, #56]	; (80049bc <_ZN10XFReactive7processEP8IXFEvent+0x5c>)
 8004984:	f002 f8e6 	bl	8006b54 <__assert_func>

    setCurrentEvent(pEvent);
 8004988:	6839      	ldr	r1, [r7, #0]
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 f833 	bl	80049f6 <_ZN10XFReactive15setCurrentEventEP8IXFEvent>

    eventStatus = processEvent();
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	3314      	adds	r3, #20
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	4798      	blx	r3
 800499c:	4603      	mov	r3, r0
 800499e:	733b      	strb	r3, [r7, #12]

    setCurrentEvent(NULL);
 80049a0:	2100      	movs	r1, #0
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 f827 	bl	80049f6 <_ZN10XFReactive15setCurrentEventEP8IXFEvent>

    return eventStatus;
 80049a8:	7b3b      	ldrb	r3, [r7, #12]
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	080083cc 	.word	0x080083cc
 80049b8:	08008420 	.word	0x08008420
 80049bc:	08008404 	.word	0x08008404

080049c0 <_ZN10XFReactive12processEventEv>:
/**
 * Executes the current event in its implemented behavior.
 * This method needs to be overridden to implement the behavior needed.
 */
EventStatus XFReactive::processEvent()
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
    // You should really implement this function in
    // the derived class!

    return EventStatus::Unknown;
 80049c8:	f107 030c 	add.w	r3, r7, #12
 80049cc:	2100      	movs	r1, #0
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7fe fe06 	bl	80035e0 <_ZN11EventStatusC1ENS_12eEventStatusE>
 80049d4:	7b3b      	ldrb	r3, [r7, #12]
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <_ZN10XFReactive9getThreadEv>:


XFThread * XFReactive::getThread()
{
 80049de:	b480      	push	{r7}
 80049e0:	b083      	sub	sp, #12
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
    return _pThread;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr

080049f6 <_ZN10XFReactive15setCurrentEventEP8IXFEvent>:

void XFReactive::setCurrentEvent(IXFEvent * pEvent)
{
 80049f6:	b480      	push	{r7}
 80049f8:	b083      	sub	sp, #12
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
 80049fe:	6039      	str	r1, [r7, #0]
    _pCurrentEvent = pEvent;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	683a      	ldr	r2, [r7, #0]
 8004a04:	609a      	str	r2, [r3, #8]
}
 8004a06:	bf00      	nop
 8004a08:	370c      	adds	r7, #12
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
	...

08004a14 <_ZNK10XFReactive15getCurrentEventEv>:

IXFEvent * XFReactive::getCurrentEvent() const
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
    assert(_pCurrentEvent);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d105      	bne.n	8004a30 <_ZNK10XFReactive15getCurrentEventEv+0x1c>
 8004a24:	4b05      	ldr	r3, [pc, #20]	; (8004a3c <_ZNK10XFReactive15getCurrentEventEv+0x28>)
 8004a26:	4a06      	ldr	r2, [pc, #24]	; (8004a40 <_ZNK10XFReactive15getCurrentEventEv+0x2c>)
 8004a28:	215a      	movs	r1, #90	; 0x5a
 8004a2a:	4806      	ldr	r0, [pc, #24]	; (8004a44 <_ZNK10XFReactive15getCurrentEventEv+0x30>)
 8004a2c:	f002 f892 	bl	8006b54 <__assert_func>
    return _pCurrentEvent;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689b      	ldr	r3, [r3, #8]
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3708      	adds	r7, #8
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	08008454 	.word	0x08008454
 8004a40:	08008464 	.word	0x08008464
 8004a44:	08008404 	.word	0x08008404

08004a48 <_ZN10XFReactive17getCurrentTimeoutEv>:
/** \brief Returns a reference to the actually processed timeout.
 *
 * Will work only if the current event is of type IXFEvent::Timeout.
 */
XFTimeout * XFReactive::getCurrentTimeout()
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
    assert(getCurrentEvent()->getEventType() == IXFEvent::Timeout);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f7ff ffdf 	bl	8004a14 <_ZNK10XFReactive15getCurrentEventEv>
 8004a56:	4603      	mov	r3, r0
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f7fe fda8 	bl	80035ae <_ZNK8IXFEvent12getEventTypeEv>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b04      	cmp	r3, #4
 8004a62:	d005      	beq.n	8004a70 <_ZN10XFReactive17getCurrentTimeoutEv+0x28>
 8004a64:	4b06      	ldr	r3, [pc, #24]	; (8004a80 <_ZN10XFReactive17getCurrentTimeoutEv+0x38>)
 8004a66:	4a07      	ldr	r2, [pc, #28]	; (8004a84 <_ZN10XFReactive17getCurrentTimeoutEv+0x3c>)
 8004a68:	2164      	movs	r1, #100	; 0x64
 8004a6a:	4807      	ldr	r0, [pc, #28]	; (8004a88 <_ZN10XFReactive17getCurrentTimeoutEv+0x40>)
 8004a6c:	f002 f872 	bl	8006b54 <__assert_func>

    return (XFTimeout *)getCurrentEvent();
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f7ff ffcf 	bl	8004a14 <_ZNK10XFReactive15getCurrentEventEv>
 8004a76:	4603      	mov	r3, r0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3708      	adds	r7, #8
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	08008494 	.word	0x08008494
 8004a84:	080084cc 	.word	0x080084cc
 8004a88:	08008404 	.word	0x08008404

08004a8c <_ZNK8IXFEvent11getBehaviorEv>:
    inline IXFReactive * getBehavior() const { return _pBehavior; }
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	4618      	mov	r0, r3
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <_ZNK8IXFEvent12shouldDeleteEv>:
    inline bool shouldDelete() const { return _eventStatus.shouldDelete; }
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	7b1b      	ldrb	r3, [r3, #12]
 8004ab0:	f003 0301 	and.w	r3, r3, #1
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	bf14      	ite	ne
 8004aba:	2301      	movne	r3, #1
 8004abc:	2300      	moveq	r3, #0
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	4618      	mov	r0, r3
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004af2:	d205      	bcs.n	8004b00 <_ZSt16__deque_buf_sizej+0x1c>
 8004af4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004afe:	e000      	b.n	8004b02 <_ZSt16__deque_buf_sizej+0x1e>
 8004b00:	2301      	movs	r3, #1
 8004b02:	4618      	mov	r0, r3
 8004b04:	370c      	adds	r7, #12
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <_ZNSt5queueIP8IXFEventSt5dequeIS1_SaIS1_EEED1Ev>:
   *  Members not found in @a normal containers are @c container_type,
   *  which is a typedef for the second Sequence parameter, and @c push and
   *  @c pop, which are standard %queue/FIFO operations.
  */
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class queue
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b082      	sub	sp, #8
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f000 f980 	bl	8004e1e <_ZNSt5dequeIP8IXFEventSaIS1_EED1Ev>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4618      	mov	r0, r3
 8004b22:	3708      	adds	r7, #8
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <_ZN12XFEventQueueC1Ev>:
 * Queue for pending events.
 */
class XFEventQueue : public std::queue<IXFEvent *>
{
public:
	XFEventQueue() {}
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	3304      	adds	r3, #4
 8004b34:	4618      	mov	r0, r3
 8004b36:	f000 f95e 	bl	8004df6 <_ZNSt5queueIP8IXFEventSt5dequeIS1_SaIS1_EEEC1IS4_vEEv>
 8004b3a:	4a04      	ldr	r2, [pc, #16]	; (8004b4c <_ZN12XFEventQueueC1Ev+0x24>)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	601a      	str	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4618      	mov	r0, r3
 8004b44:	3708      	adds	r7, #8
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	08008730 	.word	0x08008730

08004b50 <_ZN12XFEventQueueD1Ev>:
	virtual ~XFEventQueue() {}
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	4a06      	ldr	r2, [pc, #24]	; (8004b74 <_ZN12XFEventQueueD1Ev+0x24>)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	601a      	str	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	3304      	adds	r3, #4
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7ff ffd3 	bl	8004b0e <_ZNSt5queueIP8IXFEventSt5dequeIS1_SaIS1_EEED1Ev>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3708      	adds	r7, #8
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	08008730 	.word	0x08008730

08004b78 <_ZN12XFEventQueueD0Ev>:
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f7ff ffe5 	bl	8004b50 <_ZN12XFEventQueueD1Ev>
 8004b86:	212c      	movs	r1, #44	; 0x2c
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f001 ff87 	bl	8006a9c <_ZdlPvj>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4618      	mov	r0, r3
 8004b92:	3708      	adds	r7, #8
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <_ZN12XFEventQueue5emptyEv>:

	typedef std::queue<IXFEvent *> BaseClass;

	bool empty() __attribute__ ((noinline)) { return BaseClass::empty(); }	// Prevent gcc from optimizing this operation
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	3304      	adds	r3, #4
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f000 f95f 	bl	8004e68 <_ZNKSt5queueIP8IXFEventSt5dequeIS1_SaIS1_EEE5emptyEv>
 8004baa:	4603      	mov	r3, r0
 8004bac:	4618      	mov	r0, r3
 8004bae:	3708      	adds	r7, #8
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <_ZNK11EventStatuseqERKNS_12eEventStatusE>:
    EventStatus(eEventStatus eventStatus = Unknown) : _status(eventStatus) {}

    /**
     * Check if both variables contain the same event status
     */
    bool operator == (const EventStatus::eEventStatus & eventStatus) const
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
    {
        return (this->_status == eventStatus);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	781a      	ldrb	r2, [r3, #0]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	bf0c      	ite	eq
 8004bca:	2301      	moveq	r3, #1
 8004bcc:	2300      	movne	r3, #0
 8004bce:	b2db      	uxtb	r3, r3
    }
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <_ZN8XFThreadC1Ev>:
#ifdef TC_STM32
  #include "mcu/mcu.h"
#endif


XFThread::XFThread()
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 : _bExecuting(true)
 8004be4:	4a07      	ldr	r2, [pc, #28]	; (8004c04 <_ZN8XFThreadC1Ev+0x28>)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	601a      	str	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2201      	movs	r2, #1
 8004bee:	711a      	strb	r2, [r3, #4]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	3308      	adds	r3, #8
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7ff ff97 	bl	8004b28 <_ZN12XFEventQueueC1Ev>

#endif /**************************************************************************************************************/


{
}
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3708      	adds	r7, #8
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	08008720 	.word	0x08008720

08004c08 <_ZN8XFThreadD1Ev>:

XFThread::~XFThread()
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	4a06      	ldr	r2, [pc, #24]	; (8004c2c <_ZN8XFThreadD1Ev+0x24>)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	601a      	str	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	3308      	adds	r3, #8
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7ff ff98 	bl	8004b50 <_ZN12XFEventQueueD1Ev>
{
}
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4618      	mov	r0, r3
 8004c24:	3708      	adds	r7, #8
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	08008720 	.word	0x08008720

08004c30 <_ZN8XFThreadD0Ev>:
XFThread::~XFThread()
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
}
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f7ff ffe5 	bl	8004c08 <_ZN8XFThreadD1Ev>
 8004c3e:	2134      	movs	r1, #52	; 0x34
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f001 ff2b 	bl	8006a9c <_ZdlPvj>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3708      	adds	r7, #8
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <_ZN8XFThread5startEv>:

void XFThread::start()
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
    execute();
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 f878 	bl	8004d4e <_ZN8XFThread7executeEv>
}
 8004c5e:	bf00      	nop
 8004c60:	3708      	adds	r7, #8
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}

08004c66 <_ZNK8XFThread17getTimeoutManagerEv>:

XFTimeoutManager * XFThread::getTimeoutManager() const
{
 8004c66:	b580      	push	{r7, lr}
 8004c68:	b082      	sub	sp, #8
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
    return XFTimeoutManager::getInstance();
 8004c6e:	f001 f8df 	bl	8005e30 <_ZN16XFTimeoutManager11getInstanceEv>
 8004c72:	4603      	mov	r3, r0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3708      	adds	r7, #8
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <_ZNK8XFThread13dispatchEventEP8IXFEvent>:
 * Dispatchs the event to the corresponding behavioral part. For example
 * the state machine which sould process the event.
 * \param pEvent The event to dispatch
 */
void XFThread::dispatchEvent(IXFEvent * pEvent) const
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
    EventStatus eventStatus;
 8004c86:	f107 030c 	add.w	r3, r7, #12
 8004c8a:	2100      	movs	r1, #0
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7fe fca7 	bl	80035e0 <_ZN11EventStatusC1ENS_12eEventStatusE>

    eventStatus = pEvent->getBehavior()->process(pEvent);
 8004c92:	6838      	ldr	r0, [r7, #0]
 8004c94:	f7ff fefa 	bl	8004a8c <_ZNK8IXFEvent11getBehaviorEv>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	3210      	adds	r2, #16
 8004c9e:	6812      	ldr	r2, [r2, #0]
 8004ca0:	6839      	ldr	r1, [r7, #0]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	4790      	blx	r2
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	733b      	strb	r3, [r7, #12]

    // Check if behavior should be deleted
    if (eventStatus == EventStatus::Terminate)
 8004caa:	2304      	movs	r3, #4
 8004cac:	73fb      	strb	r3, [r7, #15]
 8004cae:	f107 020f 	add.w	r2, r7, #15
 8004cb2:	f107 030c 	add.w	r3, r7, #12
 8004cb6:	4611      	mov	r1, r2
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7ff ff7b 	bl	8004bb4 <_ZNK11EventStatuseqERKNS_12eEventStatusE>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00a      	beq.n	8004cda <_ZNK8XFThread13dispatchEventEP8IXFEvent+0x5e>
    {
        delete pEvent->getBehavior();
 8004cc4:	6838      	ldr	r0, [r7, #0]
 8004cc6:	f7ff fee1 	bl	8004a8c <_ZNK8IXFEvent11getBehaviorEv>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d004      	beq.n	8004cda <_ZNK8XFThread13dispatchEventEP8IXFEvent+0x5e>
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	3204      	adds	r2, #4
 8004cd4:	6812      	ldr	r2, [r2, #0]
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	4790      	blx	r2
    }
}
 8004cda:	bf00      	nop
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <_ZN8XFThread9pushEventEP8IXFEvent>:

void XFThread::pushEvent(IXFEvent * pEvent)
{
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b082      	sub	sp, #8
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
 8004cea:	6039      	str	r1, [r7, #0]
    _events.push(pEvent);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	330c      	adds	r3, #12
 8004cf0:	463a      	mov	r2, r7
 8004cf2:	4611      	mov	r1, r2
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f000 f8c4 	bl	8004e82 <_ZNSt5queueIP8IXFEventSt5dequeIS1_SaIS1_EEE4pushERKS1_>
    }

#endif /**************************************************************************************************************/


}
 8004cfa:	bf00      	nop
 8004cfc:	3708      	adds	r7, #8
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <_ZN8XFThread15scheduleTimeoutEiiP11IXFReactive>:
/**
 * Adds a new timeout to be handled. The XFThread will forward the timeout
 * information to the timeout manager which is responsible to handle all timeouts.
 */
void XFThread::scheduleTimeout(int timeoutId, int interval, IXFReactive * pReactive)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b084      	sub	sp, #16
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	60f8      	str	r0, [r7, #12]
 8004d0a:	60b9      	str	r1, [r7, #8]
 8004d0c:	607a      	str	r2, [r7, #4]
 8004d0e:	603b      	str	r3, [r7, #0]
    // Forward timeout to the timeout manager
    getTimeoutManager()->scheduleTimeout(timeoutId, interval, pReactive);
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f7ff ffa8 	bl	8004c66 <_ZNK8XFThread17getTimeoutManagerEv>
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	68b9      	ldr	r1, [r7, #8]
 8004d1c:	f001 f8c1 	bl	8005ea2 <_ZN16XFTimeoutManager15scheduleTimeoutEiiP11IXFReactive>
}
 8004d20:	bf00      	nop
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <_ZN8XFThread17unscheduleTimeoutEiP11IXFReactive>:

/**
 * Removes all timeouts corresponding the given parameters.
 */
void XFThread::unscheduleTimeout(int timeoutId, IXFReactive * pReactive)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	607a      	str	r2, [r7, #4]
    // Forward timeout to the timeout manager
    getTimeoutManager()->unscheduleTimeout(timeoutId, pReactive);
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	f7ff ff96 	bl	8004c66 <_ZNK8XFThread17getTimeoutManagerEv>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	68b9      	ldr	r1, [r7, #8]
 8004d40:	4618      	mov	r0, r3
 8004d42:	f001 f8cc 	bl	8005ede <_ZN16XFTimeoutManager17unscheduleTimeoutEiP11IXFReactive>
}
 8004d46:	bf00      	nop
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <_ZN8XFThread7executeEv>:

/**
 * Main loop of the thread. Implements event loop processing.
 */
void XFThread::execute()
{
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	b084      	sub	sp, #16
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
    while(_bExecuting)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	791b      	ldrb	r3, [r3, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d03a      	beq.n	8004dd4 <_ZN8XFThread7executeEv+0x86>
    {
        IXFEvent * pEvent;

        while (_events.empty())
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	3308      	adds	r3, #8
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7ff ff18 	bl	8004b98 <_ZN12XFEventQueue5emptyEv>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d000      	beq.n	8004d70 <_ZN8XFThread7executeEv+0x22>
 8004d6e:	e7f6      	b.n	8004d5e <_ZN8XFThread7executeEv+0x10>

#endif /**************************************************************************************************************/
        }

        // Deque next event from queue
        pEvent = _events.front(); _events.pop();
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	330c      	adds	r3, #12
 8004d74:	4618      	mov	r0, r3
 8004d76:	f000 f892 	bl	8004e9e <_ZNSt5queueIP8IXFEventSt5dequeIS1_SaIS1_EEE5frontEv>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	60fb      	str	r3, [r7, #12]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	330c      	adds	r3, #12
 8004d84:	4618      	mov	r0, r3
 8004d86:	f000 f897 	bl	8004eb8 <_ZNSt5queueIP8IXFEventSt5dequeIS1_SaIS1_EEE3popEv>

        if (pEvent)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d003      	beq.n	8004d98 <_ZN8XFThread7executeEv+0x4a>
        {
            // Forward the event to the behavioral class
            dispatchEvent(pEvent);
 8004d90:	68f9      	ldr	r1, [r7, #12]
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f7ff ff72 	bl	8004c7c <_ZNK8XFThread13dispatchEventEP8IXFEvent>
        }

        if (pEvent->getEventType() == IXFEvent::Terminate)
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f7fe fc08 	bl	80035ae <_ZNK8IXFEvent12getEventTypeEv>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da4:	bf0c      	ite	eq
 8004da6:	2301      	moveq	r3, #1
 8004da8:	2300      	movne	r3, #0
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d002      	beq.n	8004db6 <_ZN8XFThread7executeEv+0x68>
        {
            // Exit the event loop
            _bExecuting = false;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	711a      	strb	r2, [r3, #4]
        }

        if (pEvent->shouldDelete())
 8004db6:	68f8      	ldr	r0, [r7, #12]
 8004db8:	f7ff fe74 	bl	8004aa4 <_ZNK8IXFEvent12shouldDeleteEv>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d0c9      	beq.n	8004d56 <_ZN8XFThread7executeEv+0x8>
        {
            // Delete consumed event
            delete pEvent;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d0c6      	beq.n	8004d56 <_ZN8XFThread7executeEv+0x8>
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	3204      	adds	r2, #4
 8004dcc:	6812      	ldr	r2, [r2, #0]
 8004dce:	4618      	mov	r0, r3
 8004dd0:	4790      	blx	r2
    while(_bExecuting)
 8004dd2:	e7c0      	b.n	8004d56 <_ZN8XFThread7executeEv+0x8>
        }
    }
}
 8004dd4:	bf00      	nop
 8004dd6:	3710      	adds	r7, #16
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <_ZNSt5dequeIP8IXFEventSaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4618      	mov	r0, r3
 8004de8:	f000 f87e 	bl	8004ee8 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EEC1Ev>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4618      	mov	r0, r3
 8004df0:	3708      	adds	r7, #8
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <_ZNSt5queueIP8IXFEventSt5dequeIS1_SaIS1_EEEC1IS4_vEEv>:
      queue(const _Sequence& __c = _Sequence())
      : c(__c) { }
#else
      template<typename _Seq = _Sequence, typename _Requires = typename
	       enable_if<is_default_constructible<_Seq>::value>::type>
	queue()
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b082      	sub	sp, #8
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
	: c() { }
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4618      	mov	r0, r3
 8004e02:	2328      	movs	r3, #40	; 0x28
 8004e04:	461a      	mov	r2, r3
 8004e06:	2100      	movs	r1, #0
 8004e08:	f001 ff3c 	bl	8006c84 <memset>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7ff ffe4 	bl	8004ddc <_ZNSt5dequeIP8IXFEventSaIS1_EEC1Ev>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4618      	mov	r0, r3
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <_ZNSt5dequeIP8IXFEventSaIS1_EED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b08a      	sub	sp, #40	; 0x28
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8004e26:	f107 0308 	add.w	r3, r7, #8
 8004e2a:	6879      	ldr	r1, [r7, #4]
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f000 f88e 	bl	8004f4e <_ZNSt5dequeIP8IXFEventSaIS1_EE5beginEv>
 8004e32:	f107 0318 	add.w	r3, r7, #24
 8004e36:	6879      	ldr	r1, [r7, #4]
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f000 f897 	bl	8004f6c <_ZNSt5dequeIP8IXFEventSaIS1_EE3endEv>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4618      	mov	r0, r3
 8004e42:	f000 f8a2 	bl	8004f8a <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE19_M_get_Tp_allocatorEv>
 8004e46:	4603      	mov	r3, r0
 8004e48:	f107 0218 	add.w	r2, r7, #24
 8004e4c:	f107 0108 	add.w	r1, r7, #8
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f000 f8c1 	bl	8004fd8 <_ZNSt5dequeIP8IXFEventSaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f000 f856 	bl	8004f0a <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EED1Ev>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4618      	mov	r0, r3
 8004e62:	3728      	adds	r7, #40	; 0x28
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <_ZNKSt5queueIP8IXFEventSt5dequeIS1_SaIS1_EEE5emptyEv>:

      /**
       *  Returns true if the %queue is empty.
       */
      _GLIBCXX_NODISCARD bool
      empty() const
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4618      	mov	r0, r3
 8004e74:	f000 f8bd 	bl	8004ff2 <_ZNKSt5dequeIP8IXFEventSaIS1_EE5emptyEv>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3708      	adds	r7, #8
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <_ZNSt5queueIP8IXFEventSt5dequeIS1_SaIS1_EEE4pushERKS1_>:
       *  element at the end of the %queue and assigns the given data
       *  to it.  The time complexity of the operation depends on the
       *  underlying sequence.
       */
      void
      push(const value_type& __x)
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b082      	sub	sp, #8
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
 8004e8a:	6039      	str	r1, [r7, #0]
      { c.push_back(__x); }
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6839      	ldr	r1, [r7, #0]
 8004e90:	4618      	mov	r0, r3
 8004e92:	f000 f8c0 	bl	8005016 <_ZNSt5dequeIP8IXFEventSaIS1_EE9push_backERKS1_>
 8004e96:	bf00      	nop
 8004e98:	3708      	adds	r7, #8
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}

08004e9e <_ZNSt5queueIP8IXFEventSt5dequeIS1_SaIS1_EEE5frontEv>:
      front()
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	b082      	sub	sp, #8
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
	return c.front();
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f000 f8d5 	bl	8005058 <_ZNSt5dequeIP8IXFEventSaIS1_EE5frontEv>
 8004eae:	4603      	mov	r3, r0
      }
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3708      	adds	r7, #8
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <_ZNSt5queueIP8IXFEventSt5dequeIS1_SaIS1_EEE3popEv>:
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */
      void
      pop()
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	c.pop_front();
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f000 f8dc 	bl	8005080 <_ZNSt5dequeIP8IXFEventSaIS1_EE9pop_frontEv>
      }
 8004ec8:	bf00      	nop
 8004eca:	3708      	adds	r7, #8
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 f904 	bl	80050e6 <_ZNSaIP8IXFEventED1Ev>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3708      	adds	r7, #8
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EEC1Ev>:
      _Deque_base()
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f000 f8e7 	bl	80050c6 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8004ef8:	2100      	movs	r1, #0
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 f8ff 	bl	80050fe <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE17_M_initialize_mapEj>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4618      	mov	r0, r3
 8004f04:	3708      	adds	r7, #8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8004f0a:	b580      	push	{r7, lr}
 8004f0c:	b082      	sub	sp, #8
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d010      	beq.n	8004f3c <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8004f22:	3304      	adds	r3, #4
 8004f24:	461a      	mov	r2, r3
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 f94c 	bl	80051c4 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE16_M_destroy_nodesEPPS1_S5_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6819      	ldr	r1, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	461a      	mov	r2, r3
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 f95e 	bl	80051f8 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE17_M_deallocate_mapEPPS1_j>
    }
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7ff ffc6 	bl	8004ed0 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE11_Deque_implD1Ev>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4618      	mov	r0, r3
 8004f48:	3708      	adds	r7, #8
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <_ZNSt5dequeIP8IXFEventSaIS1_EE5beginEv>:
      /**
       *  Returns a read/write iterator that points to the first element in the
       *  %deque.  Iteration is done in ordinary element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b082      	sub	sp, #8
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
 8004f56:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	3308      	adds	r3, #8
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 f81e 	bl	8004fa0 <_ZNSt15_Deque_iteratorIP8IXFEventRS1_PS1_EC1ERKS4_>
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	3708      	adds	r7, #8
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <_ZNSt5dequeIP8IXFEventSaIS1_EE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %deque.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	3318      	adds	r3, #24
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 f80f 	bl	8004fa0 <_ZNSt15_Deque_iteratorIP8IXFEventRS1_PS1_EC1ERKS4_>
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8004f8a:	b480      	push	{r7}
 8004f8c:	b083      	sub	sp, #12
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4618      	mov	r0, r3
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <_ZNSt15_Deque_iteratorIP8IXFEventRS1_PS1_EC1ERKS4_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	605a      	str	r2, [r3, #4]
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	689a      	ldr	r2, [r3, #8]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	609a      	str	r2, [r3, #8]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	68da      	ldr	r2, [r3, #12]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	60da      	str	r2, [r3, #12]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <_ZNSt5dequeIP8IXFEventSaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 8004fd8:	b480      	push	{r7}
 8004fda:	b08d      	sub	sp, #52	; 0x34
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
 8004fe4:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
      }
 8004fe6:	bf00      	nop
 8004fe8:	3734      	adds	r7, #52	; 0x34
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr

08004ff2 <_ZNKSt5dequeIP8IXFEventSaIS1_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b082      	sub	sp, #8
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f103 0218 	add.w	r2, r3, #24
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	3308      	adds	r3, #8
 8005004:	4619      	mov	r1, r3
 8005006:	4610      	mov	r0, r2
 8005008:	f000 f912 	bl	8005230 <_ZSteqRKSt15_Deque_iteratorIP8IXFEventRS1_PS1_ES6_>
 800500c:	4603      	mov	r3, r0
 800500e:	4618      	mov	r0, r3
 8005010:	3708      	adds	r7, #8
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <_ZNSt5dequeIP8IXFEventSaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 8005016:	b580      	push	{r7, lr}
 8005018:	b082      	sub	sp, #8
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
 800501e:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a1b      	ldr	r3, [r3, #32]
 8005028:	3b04      	subs	r3, #4
	if (this->_M_impl._M_finish._M_cur
 800502a:	429a      	cmp	r2, r3
 800502c:	d00c      	beq.n	8005048 <_ZNSt5dequeIP8IXFEventSaIS1_EE9push_backERKS1_+0x32>
	    _Alloc_traits::construct(this->_M_impl,
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	683a      	ldr	r2, [r7, #0]
 8005036:	4619      	mov	r1, r3
 8005038:	f000 f90e 	bl	8005258 <_ZNSt16allocator_traitsISaIP8IXFEventEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	1d1a      	adds	r2, r3, #4
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	619a      	str	r2, [r3, #24]
      }
 8005046:	e003      	b.n	8005050 <_ZNSt5dequeIP8IXFEventSaIS1_EE9push_backERKS1_+0x3a>
	  _M_push_back_aux(__x);
 8005048:	6839      	ldr	r1, [r7, #0]
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 f918 	bl	8005280 <_ZNSt5dequeIP8IXFEventSaIS1_EE16_M_push_back_auxIJRKS1_EEEvDpOT_>
      }
 8005050:	bf00      	nop
 8005052:	3708      	adds	r7, #8
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <_ZNSt5dequeIP8IXFEventSaIS1_EE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 8005058:	b580      	push	{r7, lr}
 800505a:	b086      	sub	sp, #24
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
	return *begin();
 8005060:	f107 0308 	add.w	r3, r7, #8
 8005064:	6879      	ldr	r1, [r7, #4]
 8005066:	4618      	mov	r0, r3
 8005068:	f7ff ff71 	bl	8004f4e <_ZNSt5dequeIP8IXFEventSaIS1_EE5beginEv>
 800506c:	f107 0308 	add.w	r3, r7, #8
 8005070:	4618      	mov	r0, r3
 8005072:	f000 f949 	bl	8005308 <_ZNKSt15_Deque_iteratorIP8IXFEventRS1_PS1_EdeEv>
 8005076:	4603      	mov	r3, r0
      }
 8005078:	4618      	mov	r0, r3
 800507a:	3718      	adds	r7, #24
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <_ZNSt5dequeIP8IXFEventSaIS1_EE9pop_frontEv>:
      pop_front() _GLIBCXX_NOEXCEPT
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_start._M_cur
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	3b04      	subs	r3, #4
	if (this->_M_impl._M_start._M_cur
 8005092:	429a      	cmp	r2, r3
 8005094:	d010      	beq.n	80050b8 <_ZNSt5dequeIP8IXFEventSaIS1_EE9pop_frontEv+0x38>
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4618      	mov	r0, r3
 800509a:	f7ff ff76 	bl	8004f8a <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE19_M_get_Tp_allocatorEv>
 800509e:	4602      	mov	r2, r0
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	4619      	mov	r1, r3
 80050a6:	4610      	mov	r0, r2
 80050a8:	f000 f93a 	bl	8005320 <_ZNSt16allocator_traitsISaIP8IXFEventEE7destroyIS1_EEvRS2_PT_>
	    ++this->_M_impl._M_start._M_cur;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	1d1a      	adds	r2, r3, #4
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	609a      	str	r2, [r3, #8]
      }
 80050b6:	e002      	b.n	80050be <_ZNSt5dequeIP8IXFEventSaIS1_EE9pop_frontEv+0x3e>
	  _M_pop_front_aux();
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 f93e 	bl	800533a <_ZNSt5dequeIP8IXFEventSaIS1_EE16_M_pop_front_auxEv>
      }
 80050be:	bf00      	nop
 80050c0:	3708      	adds	r7, #8
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}

080050c6 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b082      	sub	sp, #8
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 f95b 	bl	800538a <_ZNSaIP8IXFEventEC1Ev>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4618      	mov	r0, r3
 80050d8:	f000 f963 	bl	80053a2 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE16_Deque_impl_dataC1Ev>
	{ }
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4618      	mov	r0, r3
 80050e0:	3708      	adds	r7, #8
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <_ZNSaIP8IXFEventED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b082      	sub	sp, #8
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f970 	bl	80053d4 <_ZN9__gnu_cxx13new_allocatorIP8IXFEventED1Ev>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4618      	mov	r0, r3
 80050f8:	3708      	adds	r7, #8
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 80050fe:	b590      	push	{r4, r7, lr}
 8005100:	b089      	sub	sp, #36	; 0x24
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
 8005106:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8005108:	2004      	movs	r0, #4
 800510a:	f7ff fceb 	bl	8004ae4 <_ZSt16__deque_buf_sizej>
 800510e:	4602      	mov	r2, r0
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	fbb3 f3f2 	udiv	r3, r3, r2
 8005116:	3301      	adds	r3, #1
 8005118:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 800511a:	2308      	movs	r3, #8
 800511c:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	3302      	adds	r3, #2
 8005122:	613b      	str	r3, [r7, #16]
 8005124:	f107 0210 	add.w	r2, r7, #16
 8005128:	f107 030c 	add.w	r3, r7, #12
 800512c:	4611      	mov	r1, r2
 800512e:	4618      	mov	r0, r3
 8005130:	f000 f95b 	bl	80053ea <_ZSt3maxIjERKT_S2_S2_>
 8005134:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	4619      	mov	r1, r3
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f965 	bl	8005412 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE15_M_allocate_mapEj>
 8005148:	4602      	mov	r2, r0
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6859      	ldr	r1, [r3, #4]
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	1acb      	subs	r3, r1, r3
 800515a:	085b      	lsrs	r3, r3, #1
 800515c:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 800515e:	4413      	add	r3, r2
 8005160:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	69ba      	ldr	r2, [r7, #24]
 8005168:	4413      	add	r3, r2
 800516a:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 800516c:	697a      	ldr	r2, [r7, #20]
 800516e:	69b9      	ldr	r1, [r7, #24]
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 f96b 	bl	800544c <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE15_M_create_nodesEPPS1_S5_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	3308      	adds	r3, #8
 800517a:	69b9      	ldr	r1, [r7, #24]
 800517c:	4618      	mov	r0, r3
 800517e:	f000 f97f 	bl	8005480 <_ZNSt15_Deque_iteratorIP8IXFEventRS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f103 0218 	add.w	r2, r3, #24
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	3b04      	subs	r3, #4
 800518c:	4619      	mov	r1, r3
 800518e:	4610      	mov	r0, r2
 8005190:	f000 f976 	bl	8005480 <_ZNSt15_Deque_iteratorIP8IXFEventRS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	68da      	ldr	r2, [r3, #12]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 80051a0:	2004      	movs	r0, #4
 80051a2:	f7ff fc9f 	bl	8004ae4 <_ZSt16__deque_buf_sizej>
 80051a6:	4602      	mov	r2, r0
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80051ae:	fb01 f202 	mul.w	r2, r1, r2
 80051b2:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	619a      	str	r2, [r3, #24]
    }
 80051bc:	bf00      	nop
 80051be:	3724      	adds	r7, #36	; 0x24
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd90      	pop	{r4, r7, pc}

080051c4 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE16_M_destroy_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b086      	sub	sp, #24
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	617b      	str	r3, [r7, #20]
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d209      	bcs.n	80051f0 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x2c>
	_M_deallocate_node(*__n);
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4619      	mov	r1, r3
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f000 f965 	bl	80054b2 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE18_M_deallocate_nodeEPS1_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	3304      	adds	r3, #4
 80051ec:	617b      	str	r3, [r7, #20]
 80051ee:	e7f1      	b.n	80051d4 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x10>
    }
 80051f0:	bf00      	nop
 80051f2:	3718      	adds	r7, #24
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE17_M_deallocate_mapEPPS1_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b086      	sub	sp, #24
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8005204:	f107 0314 	add.w	r3, r7, #20
 8005208:	68f9      	ldr	r1, [r7, #12]
 800520a:	4618      	mov	r0, r3
 800520c:	f000 f964 	bl	80054d8 <_ZNKSt11_Deque_baseIP8IXFEventSaIS1_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8005210:	f107 0314 	add.w	r3, r7, #20
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	68b9      	ldr	r1, [r7, #8]
 8005218:	4618      	mov	r0, r3
 800521a:	f000 f97a 	bl	8005512 <_ZNSt16allocator_traitsISaIPP8IXFEventEE10deallocateERS3_PS2_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800521e:	f107 0314 	add.w	r3, r7, #20
 8005222:	4618      	mov	r0, r3
 8005224:	f000 f969 	bl	80054fa <_ZNSaIPP8IXFEventED1Ev>
      }
 8005228:	bf00      	nop
 800522a:	3718      	adds	r7, #24
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <_ZSteqRKSt15_Deque_iteratorIP8IXFEventRS1_PS1_ES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	429a      	cmp	r2, r3
 8005244:	bf0c      	ite	eq
 8005246:	2301      	moveq	r3, #1
 8005248:	2300      	movne	r3, #0
 800524a:	b2db      	uxtb	r3, r3
 800524c:	4618      	mov	r0, r3
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <_ZNSt16allocator_traitsISaIP8IXFEventEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
       *  in C++11, C++14 and C++17. Changed in C++20 to call
       *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
      */
      template<typename _Up, typename... _Args>
	static _GLIBCXX20_CONSTEXPR void
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
		  _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 f963 	bl	8005530 <_ZSt7forwardIRKP8IXFEventEOT_RNSt16remove_referenceIS4_E4typeE>
 800526a:	4603      	mov	r3, r0
 800526c:	461a      	mov	r2, r3
 800526e:	68b9      	ldr	r1, [r7, #8]
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f000 f968 	bl	8005546 <_ZN9__gnu_cxx13new_allocatorIP8IXFEventE9constructIS2_JRKS2_EEEvPT_DpOT0_>
#else
	  std::construct_at(__p, std::forward<_Args>(__args)...);
#endif
	}
 8005276:	bf00      	nop
 8005278:	3710      	adds	r7, #16
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
	...

08005280 <_ZNSt5dequeIP8IXFEventSaIS1_EE16_M_push_back_auxIJRKS1_EEEvDpOT_>:
  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 8005280:	b5b0      	push	{r4, r5, r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
      void
      deque<_Tp, _Alloc>::
      _M_push_back_aux(const value_type& __t)
#endif
      {
	if (size() == max_size())
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 f971 	bl	8005572 <_ZNKSt5dequeIP8IXFEventSaIS1_EE4sizeEv>
 8005290:	4604      	mov	r4, r0
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 f97f 	bl	8005596 <_ZNKSt5dequeIP8IXFEventSaIS1_EE8max_sizeEv>
 8005298:	4603      	mov	r3, r0
 800529a:	429c      	cmp	r4, r3
 800529c:	bf0c      	ite	eq
 800529e:	2301      	moveq	r3, #1
 80052a0:	2300      	movne	r3, #0
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d002      	beq.n	80052ae <_ZNSt5dequeIP8IXFEventSaIS1_EE16_M_push_back_auxIJRKS1_EEEvDpOT_+0x2e>
	  __throw_length_error(
 80052a8:	4816      	ldr	r0, [pc, #88]	; (8005304 <_ZNSt5dequeIP8IXFEventSaIS1_EE16_M_push_back_auxIJRKS1_EEEvDpOT_+0x84>)
 80052aa:	f001 fc2b 	bl	8006b04 <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::deque larger than max_size()"));

	_M_reserve_map_at_back();
 80052ae:	2101      	movs	r1, #1
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 f981 	bl	80055b8 <_ZNSt5dequeIP8IXFEventSaIS1_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052bc:	1d1c      	adds	r4, r3, #4
 80052be:	4610      	mov	r0, r2
 80052c0:	f000 f995 	bl	80055ee <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE16_M_allocate_nodeEv>
 80052c4:	4603      	mov	r3, r0
 80052c6:	6023      	str	r3, [r4, #0]
	__try
	  {
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 80052c8:	687c      	ldr	r4, [r7, #4]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	699d      	ldr	r5, [r3, #24]
 80052ce:	6838      	ldr	r0, [r7, #0]
 80052d0:	f000 f92e 	bl	8005530 <_ZSt7forwardIRKP8IXFEventEOT_RNSt16remove_referenceIS4_E4typeE>
 80052d4:	4603      	mov	r3, r0
 80052d6:	461a      	mov	r2, r3
 80052d8:	4629      	mov	r1, r5
 80052da:	4620      	mov	r0, r4
 80052dc:	f7ff ffbc 	bl	8005258 <_ZNSt16allocator_traitsISaIP8IXFEventEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f103 0218 	add.w	r2, r3, #24
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ea:	3304      	adds	r3, #4
 80052ec:	4619      	mov	r1, r3
 80052ee:	4610      	mov	r0, r2
 80052f0:	f000 f8c6 	bl	8005480 <_ZNSt15_Deque_iteratorIP8IXFEventRS1_PS1_E11_M_set_nodeEPS3_>
						+ 1);
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	69da      	ldr	r2, [r3, #28]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	619a      	str	r2, [r3, #24]
	__catch(...)
	  {
	    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
	    __throw_exception_again;
	  }
      }
 80052fc:	bf00      	nop
 80052fe:	3708      	adds	r7, #8
 8005300:	46bd      	mov	sp, r7
 8005302:	bdb0      	pop	{r4, r5, r7, pc}
 8005304:	080084f8 	.word	0x080084f8

08005308 <_ZNKSt15_Deque_iteratorIP8IXFEventRS1_PS1_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4618      	mov	r0, r3
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <_ZNSt16allocator_traitsISaIP8IXFEventEE7destroyIS1_EEvRS2_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
 800532a:	6839      	ldr	r1, [r7, #0]
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 f970 	bl	8005612 <_ZN9__gnu_cxx13new_allocatorIP8IXFEventE7destroyIS2_EEvPT_>
#else
	  std::destroy_at(__p);
#endif
	}
 8005332:	bf00      	nop
 8005334:	3708      	adds	r7, #8
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <_ZNSt5dequeIP8IXFEventSaIS1_EE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 800533a:	b580      	push	{r7, lr}
 800533c:	b082      	sub	sp, #8
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4618      	mov	r0, r3
 8005346:	f7ff fe20 	bl	8004f8a <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE19_M_get_Tp_allocatorEv>
 800534a:	4602      	mov	r2, r0
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	4619      	mov	r1, r3
 8005352:	4610      	mov	r0, r2
 8005354:	f7ff ffe4 	bl	8005320 <_ZNSt16allocator_traitsISaIP8IXFEventEE7destroyIS1_EEvRS2_PT_>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	4619      	mov	r1, r3
 8005360:	4610      	mov	r0, r2
 8005362:	f000 f8a6 	bl	80054b2 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE18_M_deallocate_nodeEPS1_>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f103 0208 	add.w	r2, r3, #8
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	695b      	ldr	r3, [r3, #20]
 8005370:	3304      	adds	r3, #4
 8005372:	4619      	mov	r1, r3
 8005374:	4610      	mov	r0, r2
 8005376:	f000 f883 	bl	8005480 <_ZNSt15_Deque_iteratorIP8IXFEventRS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	68da      	ldr	r2, [r3, #12]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	609a      	str	r2, [r3, #8]
    }
 8005382:	bf00      	nop
 8005384:	3708      	adds	r7, #8
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}

0800538a <_ZNSaIP8IXFEventEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800538a:	b580      	push	{r7, lr}
 800538c:	b082      	sub	sp, #8
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f948 	bl	8005628 <_ZN9__gnu_cxx13new_allocatorIP8IXFEventEC1Ev>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4618      	mov	r0, r3
 800539c:	3708      	adds	r7, #8
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b082      	sub	sp, #8
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	601a      	str	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	605a      	str	r2, [r3, #4]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	3308      	adds	r3, #8
 80053ba:	4618      	mov	r0, r3
 80053bc:	f000 f93f 	bl	800563e <_ZNSt15_Deque_iteratorIP8IXFEventRS1_PS1_EC1Ev>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	3318      	adds	r3, #24
 80053c4:	4618      	mov	r0, r3
 80053c6:	f000 f93a 	bl	800563e <_ZNSt15_Deque_iteratorIP8IXFEventRS1_PS1_EC1Ev>
	{ }
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4618      	mov	r0, r3
 80053ce:	3708      	adds	r7, #8
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <_ZN9__gnu_cxx13new_allocatorIP8IXFEventED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4618      	mov	r0, r3
 80053e0:	370c      	adds	r7, #12
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr

080053ea <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 80053ea:	b480      	push	{r7}
 80053ec:	b083      	sub	sp, #12
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
 80053f2:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d201      	bcs.n	8005404 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	e000      	b.n	8005406 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8005404:	687b      	ldr	r3, [r7, #4]
    }
 8005406:	4618      	mov	r0, r3
 8005408:	370c      	adds	r7, #12
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr

08005412 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8005412:	b590      	push	{r4, r7, lr}
 8005414:	b085      	sub	sp, #20
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
 800541a:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800541c:	f107 030c 	add.w	r3, r7, #12
 8005420:	6879      	ldr	r1, [r7, #4]
 8005422:	4618      	mov	r0, r3
 8005424:	f000 f858 	bl	80054d8 <_ZNKSt11_Deque_baseIP8IXFEventSaIS1_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8005428:	f107 030c 	add.w	r3, r7, #12
 800542c:	6839      	ldr	r1, [r7, #0]
 800542e:	4618      	mov	r0, r3
 8005430:	f000 f91c 	bl	800566c <_ZNSt16allocator_traitsISaIPP8IXFEventEE8allocateERS3_j>
 8005434:	4604      	mov	r4, r0
 8005436:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8005438:	f107 030c 	add.w	r3, r7, #12
 800543c:	4618      	mov	r0, r3
 800543e:	f000 f85c 	bl	80054fa <_ZNSaIPP8IXFEventED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8005442:	4623      	mov	r3, r4
      }
 8005444:	4618      	mov	r0, r3
 8005446:	3714      	adds	r7, #20
 8005448:	46bd      	mov	sp, r7
 800544a:	bd90      	pop	{r4, r7, pc}

0800544c <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE15_M_create_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 800544c:	b580      	push	{r7, lr}
 800544e:	b086      	sub	sp, #24
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	617b      	str	r3, [r7, #20]
 800545c:	697a      	ldr	r2, [r7, #20]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	429a      	cmp	r2, r3
 8005462:	d209      	bcs.n	8005478 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE15_M_create_nodesEPPS1_S5_+0x2c>
	    *__cur = this->_M_allocate_node();
 8005464:	68f8      	ldr	r0, [r7, #12]
 8005466:	f000 f8c2 	bl	80055ee <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE16_M_allocate_nodeEv>
 800546a:	4602      	mov	r2, r0
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	3304      	adds	r3, #4
 8005474:	617b      	str	r3, [r7, #20]
 8005476:	e7f1      	b.n	800545c <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE15_M_create_nodesEPPS1_S5_+0x10>
    }
 8005478:	bf00      	nop
 800547a:	3718      	adds	r7, #24
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <_ZNSt15_Deque_iteratorIP8IXFEventRS1_PS1_E11_M_set_nodeEPS3_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8005480:	b590      	push	{r4, r7, lr}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	683a      	ldr	r2, [r7, #0]
 800548e:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685c      	ldr	r4, [r3, #4]
 800549c:	f000 f8f5 	bl	800568a <_ZNSt15_Deque_iteratorIP8IXFEventRS1_PS1_E14_S_buffer_sizeEv>
 80054a0:	4603      	mov	r3, r0
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	18e2      	adds	r2, r4, r3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	609a      	str	r2, [r3, #8]
      }
 80054aa:	bf00      	nop
 80054ac:	370c      	adds	r7, #12
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd90      	pop	{r4, r7, pc}

080054b2 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE18_M_deallocate_nodeEPS1_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 80054b2:	b590      	push	{r4, r7, lr}
 80054b4:	b083      	sub	sp, #12
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
 80054ba:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 80054bc:	687c      	ldr	r4, [r7, #4]
 80054be:	2004      	movs	r0, #4
 80054c0:	f7ff fb10 	bl	8004ae4 <_ZSt16__deque_buf_sizej>
 80054c4:	4603      	mov	r3, r0
 80054c6:	461a      	mov	r2, r3
 80054c8:	6839      	ldr	r1, [r7, #0]
 80054ca:	4620      	mov	r0, r4
 80054cc:	f000 f8e5 	bl	800569a <_ZNSt16allocator_traitsISaIP8IXFEventEE10deallocateERS2_PS1_j>
      }
 80054d0:	bf00      	nop
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd90      	pop	{r4, r7, pc}

080054d8 <_ZNKSt11_Deque_baseIP8IXFEventSaIS1_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 80054e2:	6838      	ldr	r0, [r7, #0]
 80054e4:	f000 f8e8 	bl	80056b8 <_ZNKSt11_Deque_baseIP8IXFEventSaIS1_EE19_M_get_Tp_allocatorEv>
 80054e8:	4603      	mov	r3, r0
 80054ea:	4619      	mov	r1, r3
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 f8ee 	bl	80056ce <_ZNSaIPP8IXFEventEC1IS0_EERKSaIT_E>
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	3708      	adds	r7, #8
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}

080054fa <_ZNSaIPP8IXFEventED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b082      	sub	sp, #8
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 f8f0 	bl	80056e8 <_ZN9__gnu_cxx13new_allocatorIPP8IXFEventED1Ev>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4618      	mov	r0, r3
 800550c:	3708      	adds	r7, #8
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <_ZNSt16allocator_traitsISaIPP8IXFEventEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8005512:	b580      	push	{r7, lr}
 8005514:	b084      	sub	sp, #16
 8005516:	af00      	add	r7, sp, #0
 8005518:	60f8      	str	r0, [r7, #12]
 800551a:	60b9      	str	r1, [r7, #8]
 800551c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	68b9      	ldr	r1, [r7, #8]
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f000 f8eb 	bl	80056fe <_ZN9__gnu_cxx13new_allocatorIPP8IXFEventE10deallocateEPS3_j>
 8005528:	bf00      	nop
 800552a:	3710      	adds	r7, #16
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <_ZSt7forwardIRKP8IXFEventEOT_RNSt16remove_referenceIS4_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4618      	mov	r0, r3
 800553c:	370c      	adds	r7, #12
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr

08005546 <_ZN9__gnu_cxx13new_allocatorIP8IXFEventE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8005546:	b590      	push	{r4, r7, lr}
 8005548:	b085      	sub	sp, #20
 800554a:	af00      	add	r7, sp, #0
 800554c:	60f8      	str	r0, [r7, #12]
 800554e:	60b9      	str	r1, [r7, #8]
 8005550:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f7ff ffec 	bl	8005530 <_ZSt7forwardIRKP8IXFEventEOT_RNSt16remove_referenceIS4_E4typeE>
 8005558:	4603      	mov	r3, r0
 800555a:	681c      	ldr	r4, [r3, #0]
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	4619      	mov	r1, r3
 8005560:	2004      	movs	r0, #4
 8005562:	f7ff fab3 	bl	8004acc <_ZnwjPv>
 8005566:	4603      	mov	r3, r0
 8005568:	601c      	str	r4, [r3, #0]
 800556a:	bf00      	nop
 800556c:	3714      	adds	r7, #20
 800556e:	46bd      	mov	sp, r7
 8005570:	bd90      	pop	{r4, r7, pc}

08005572 <_ZNKSt5dequeIP8IXFEventSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8005572:	b580      	push	{r7, lr}
 8005574:	b082      	sub	sp, #8
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f103 0218 	add.w	r2, r3, #24
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	3308      	adds	r3, #8
 8005584:	4619      	mov	r1, r3
 8005586:	4610      	mov	r0, r2
 8005588:	f000 f8c9 	bl	800571e <_ZStmiRKSt15_Deque_iteratorIP8IXFEventRS1_PS1_ES6_>
 800558c:	4603      	mov	r3, r0
 800558e:	4618      	mov	r0, r3
 8005590:	3708      	adds	r7, #8
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <_ZNKSt5dequeIP8IXFEventSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8005596:	b580      	push	{r7, lr}
 8005598:	b082      	sub	sp, #8
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4618      	mov	r0, r3
 80055a2:	f000 f889 	bl	80056b8 <_ZNKSt11_Deque_baseIP8IXFEventSaIS1_EE19_M_get_Tp_allocatorEv>
 80055a6:	4603      	mov	r3, r0
 80055a8:	4618      	mov	r0, r3
 80055aa:	f000 f8dc 	bl	8005766 <_ZNSt5dequeIP8IXFEventSaIS1_EE11_S_max_sizeERKS2_>
 80055ae:	4603      	mov	r3, r0
 80055b0:	4618      	mov	r0, r3
 80055b2:	3708      	adds	r7, #8
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <_ZNSt5dequeIP8IXFEventSaIS1_EE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	1c5a      	adds	r2, r3, #1
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 80055ca:	6879      	ldr	r1, [r7, #4]
 80055cc:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80055ce:	6879      	ldr	r1, [r7, #4]
 80055d0:	6809      	ldr	r1, [r1, #0]
 80055d2:	1a41      	subs	r1, r0, r1
 80055d4:	1089      	asrs	r1, r1, #2
 80055d6:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80055d8:	429a      	cmp	r2, r3
 80055da:	d904      	bls.n	80055e6 <_ZNSt5dequeIP8IXFEventSaIS1_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 80055dc:	2200      	movs	r2, #0
 80055de:	6839      	ldr	r1, [r7, #0]
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 f8da 	bl	800579a <_ZNSt5dequeIP8IXFEventSaIS1_EE17_M_reallocate_mapEjb>
      }
 80055e6:	bf00      	nop
 80055e8:	3708      	adds	r7, #8
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 80055ee:	b590      	push	{r4, r7, lr}
 80055f0:	b083      	sub	sp, #12
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 80055f6:	687c      	ldr	r4, [r7, #4]
 80055f8:	2004      	movs	r0, #4
 80055fa:	f7ff fa73 	bl	8004ae4 <_ZSt16__deque_buf_sizej>
 80055fe:	4603      	mov	r3, r0
 8005600:	4619      	mov	r1, r3
 8005602:	4620      	mov	r0, r4
 8005604:	f000 f963 	bl	80058ce <_ZNSt16allocator_traitsISaIP8IXFEventEE8allocateERS2_j>
 8005608:	4603      	mov	r3, r0
      }
 800560a:	4618      	mov	r0, r3
 800560c:	370c      	adds	r7, #12
 800560e:	46bd      	mov	sp, r7
 8005610:	bd90      	pop	{r4, r7, pc}

08005612 <_ZN9__gnu_cxx13new_allocatorIP8IXFEventE7destroyIS2_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 8005612:	b480      	push	{r7}
 8005614:	b083      	sub	sp, #12
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
 800561a:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 800561c:	bf00      	nop
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <_ZN9__gnu_cxx13new_allocatorIP8IXFEventEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4618      	mov	r0, r3
 8005634:	370c      	adds	r7, #12
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr

0800563e <_ZNSt15_Deque_iteratorIP8IXFEventRS1_PS1_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 800563e:	b480      	push	{r7}
 8005640:	b083      	sub	sp, #12
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	601a      	str	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	605a      	str	r2, [r3, #4]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	609a      	str	r2, [r3, #8]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	60da      	str	r2, [r3, #12]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4618      	mov	r0, r3
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <_ZNSt16allocator_traitsISaIPP8IXFEventEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8005676:	2200      	movs	r2, #0
 8005678:	6839      	ldr	r1, [r7, #0]
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 f936 	bl	80058ec <_ZN9__gnu_cxx13new_allocatorIPP8IXFEventE8allocateEjPKv>
 8005680:	4603      	mov	r3, r0
 8005682:	4618      	mov	r0, r3
 8005684:	3708      	adds	r7, #8
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}

0800568a <_ZNSt15_Deque_iteratorIP8IXFEventRS1_PS1_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 800568a:	b580      	push	{r7, lr}
 800568c:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 800568e:	2004      	movs	r0, #4
 8005690:	f7ff fa28 	bl	8004ae4 <_ZSt16__deque_buf_sizej>
 8005694:	4603      	mov	r3, r0
 8005696:	4618      	mov	r0, r3
 8005698:	bd80      	pop	{r7, pc}

0800569a <_ZNSt16allocator_traitsISaIP8IXFEventEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800569a:	b580      	push	{r7, lr}
 800569c:	b084      	sub	sp, #16
 800569e:	af00      	add	r7, sp, #0
 80056a0:	60f8      	str	r0, [r7, #12]
 80056a2:	60b9      	str	r1, [r7, #8]
 80056a4:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	68b9      	ldr	r1, [r7, #8]
 80056aa:	68f8      	ldr	r0, [r7, #12]
 80056ac:	f000 f93c 	bl	8005928 <_ZN9__gnu_cxx13new_allocatorIP8IXFEventE10deallocateEPS2_j>
 80056b0:	bf00      	nop
 80056b2:	3710      	adds	r7, #16
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <_ZNKSt11_Deque_baseIP8IXFEventSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4618      	mov	r0, r3
 80056c4:	370c      	adds	r7, #12
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr

080056ce <_ZNSaIPP8IXFEventEC1IS0_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b082      	sub	sp, #8
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
 80056d6:	6039      	str	r1, [r7, #0]
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 f935 	bl	8005948 <_ZN9__gnu_cxx13new_allocatorIPP8IXFEventEC1Ev>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4618      	mov	r0, r3
 80056e2:	3708      	adds	r7, #8
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <_ZN9__gnu_cxx13new_allocatorIPP8IXFEventED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4618      	mov	r0, r3
 80056f4:	370c      	adds	r7, #12
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr

080056fe <_ZN9__gnu_cxx13new_allocatorIPP8IXFEventE10deallocateEPS3_j>:
      deallocate(_Tp* __p, size_type __t)
 80056fe:	b580      	push	{r7, lr}
 8005700:	b084      	sub	sp, #16
 8005702:	af00      	add	r7, sp, #0
 8005704:	60f8      	str	r0, [r7, #12]
 8005706:	60b9      	str	r1, [r7, #8]
 8005708:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	4619      	mov	r1, r3
 8005710:	68b8      	ldr	r0, [r7, #8]
 8005712:	f001 f9c3 	bl	8006a9c <_ZdlPvj>
      }
 8005716:	bf00      	nop
 8005718:	3710      	adds	r7, #16
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}

0800571e <_ZStmiRKSt15_Deque_iteratorIP8IXFEventRS1_PS1_ES6_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800571e:	b580      	push	{r7, lr}
 8005720:	b082      	sub	sp, #8
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
 8005726:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8005728:	f7ff ffaf 	bl	800568a <_ZNSt15_Deque_iteratorIP8IXFEventRS1_PS1_E14_S_buffer_sizeEv>
 800572c:	4603      	mov	r3, r0
 800572e:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	68da      	ldr	r2, [r3, #12]
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	109b      	asrs	r3, r3, #2
 800573c:	3b01      	subs	r3, #1
 800573e:	fb01 f303 	mul.w	r3, r1, r3
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	6811      	ldr	r1, [r2, #0]
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	6852      	ldr	r2, [r2, #4]
 800574a:	1a8a      	subs	r2, r1, r2
 800574c:	1092      	asrs	r2, r2, #2
 800574e:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8005750:	683a      	ldr	r2, [r7, #0]
 8005752:	6891      	ldr	r1, [r2, #8]
 8005754:	683a      	ldr	r2, [r7, #0]
 8005756:	6812      	ldr	r2, [r2, #0]
 8005758:	1a8a      	subs	r2, r1, r2
 800575a:	1092      	asrs	r2, r2, #2
 800575c:	4413      	add	r3, r2
      }
 800575e:	4618      	mov	r0, r3
 8005760:	3708      	adds	r7, #8
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}

08005766 <_ZNSt5dequeIP8IXFEventSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8005766:	b580      	push	{r7, lr}
 8005768:	b084      	sub	sp, #16
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 800576e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8005772:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 f8f2 	bl	800595e <_ZNSt16allocator_traitsISaIP8IXFEventEE8max_sizeERKS2_>
 800577a:	4603      	mov	r3, r0
 800577c:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800577e:	f107 0208 	add.w	r2, r7, #8
 8005782:	f107 030c 	add.w	r3, r7, #12
 8005786:	4611      	mov	r1, r2
 8005788:	4618      	mov	r0, r3
 800578a:	f000 f8f4 	bl	8005976 <_ZSt3minIjERKT_S2_S2_>
 800578e:	4603      	mov	r3, r0
 8005790:	681b      	ldr	r3, [r3, #0]
      }
 8005792:	4618      	mov	r0, r3
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}

0800579a <_ZNSt5dequeIP8IXFEventSaIS1_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 800579a:	b590      	push	{r4, r7, lr}
 800579c:	b08b      	sub	sp, #44	; 0x2c
 800579e:	af00      	add	r7, sp, #0
 80057a0:	60f8      	str	r0, [r7, #12]
 80057a2:	60b9      	str	r1, [r7, #8]
 80057a4:	4613      	mov	r3, r2
 80057a6:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	695b      	ldr	r3, [r3, #20]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	109b      	asrs	r3, r3, #2
 80057b4:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 80057b6:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	6a3a      	ldr	r2, [r7, #32]
 80057bc:	4413      	add	r3, r2
 80057be:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	685a      	ldr	r2, [r3, #4]
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	005b      	lsls	r3, r3, #1
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d92d      	bls.n	8005828 <_ZNSt5dequeIP8IXFEventSaIS1_EE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	1acb      	subs	r3, r1, r3
 80057d8:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80057da:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 80057dc:	79fb      	ldrb	r3, [r7, #7]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d002      	beq.n	80057e8 <_ZNSt5dequeIP8IXFEventSaIS1_EE17_M_reallocate_mapEjb+0x4e>
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	e000      	b.n	80057ea <_ZNSt5dequeIP8IXFEventSaIS1_EE17_M_reallocate_mapEjb+0x50>
 80057e8:	2300      	movs	r3, #0
 80057ea:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80057ec:	4413      	add	r3, r2
 80057ee:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	695b      	ldr	r3, [r3, #20]
 80057f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d209      	bcs.n	800580e <_ZNSt5dequeIP8IXFEventSaIS1_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8005802:	3304      	adds	r3, #4
 8005804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005806:	4619      	mov	r1, r3
 8005808:	f000 f8c9 	bl	800599e <_ZSt4copyIPPP8IXFEventS3_ET0_T_S5_S4_>
 800580c:	e048      	b.n	80058a0 <_ZNSt5dequeIP8IXFEventSaIS1_EE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8005816:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8005818:	6a3b      	ldr	r3, [r7, #32]
 800581a:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800581c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800581e:	4413      	add	r3, r2
 8005820:	461a      	mov	r2, r3
 8005822:	f000 f8d4 	bl	80059ce <_ZSt13copy_backwardIPPP8IXFEventS3_ET0_T_S5_S4_>
 8005826:	e03b      	b.n	80058a0 <_ZNSt5dequeIP8IXFEventSaIS1_EE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	3304      	adds	r3, #4
 8005830:	f107 0208 	add.w	r2, r7, #8
 8005834:	4611      	mov	r1, r2
 8005836:	4618      	mov	r0, r3
 8005838:	f7ff fdd7 	bl	80053ea <_ZSt3maxIjERKT_S2_S2_>
 800583c:	4603      	mov	r3, r0
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8005842:	3302      	adds	r3, #2
 8005844:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	69b9      	ldr	r1, [r7, #24]
 800584a:	4618      	mov	r0, r3
 800584c:	f7ff fde1 	bl	8005412 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE15_M_allocate_mapEj>
 8005850:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8005852:	69ba      	ldr	r2, [r7, #24]
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	085b      	lsrs	r3, r3, #1
 800585a:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 800585c:	79fb      	ldrb	r3, [r7, #7]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d002      	beq.n	8005868 <_ZNSt5dequeIP8IXFEventSaIS1_EE17_M_reallocate_mapEjb+0xce>
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	e000      	b.n	800586a <_ZNSt5dequeIP8IXFEventSaIS1_EE17_M_reallocate_mapEjb+0xd0>
 8005868:	2300      	movs	r3, #0
 800586a:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 800586c:	697a      	ldr	r2, [r7, #20]
 800586e:	4413      	add	r3, r2
 8005870:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 800587a:	3304      	adds	r3, #4
 800587c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800587e:	4619      	mov	r1, r3
 8005880:	f000 f88d 	bl	800599e <_ZSt4copyIPPP8IXFEventS3_ET0_T_S5_S4_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6819      	ldr	r1, [r3, #0]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	461a      	mov	r2, r3
 8005890:	f7ff fcb2 	bl	80051f8 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE17_M_deallocate_mapEPPS1_j>

	  this->_M_impl._M_map = __new_map;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	69ba      	ldr	r2, [r7, #24]
 800589e:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	3308      	adds	r3, #8
 80058a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7ff fdea 	bl	8005480 <_ZNSt15_Deque_iteratorIP8IXFEventRS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f103 0018 	add.w	r0, r3, #24
 80058b2:	6a3b      	ldr	r3, [r7, #32]
 80058b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80058b8:	3b01      	subs	r3, #1
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058be:	4413      	add	r3, r2
 80058c0:	4619      	mov	r1, r3
 80058c2:	f7ff fddd 	bl	8005480 <_ZNSt15_Deque_iteratorIP8IXFEventRS1_PS1_E11_M_set_nodeEPS3_>
    }
 80058c6:	bf00      	nop
 80058c8:	372c      	adds	r7, #44	; 0x2c
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd90      	pop	{r4, r7, pc}

080058ce <_ZNSt16allocator_traitsISaIP8IXFEventEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b082      	sub	sp, #8
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
 80058d6:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80058d8:	2200      	movs	r2, #0
 80058da:	6839      	ldr	r1, [r7, #0]
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 f88e 	bl	80059fe <_ZN9__gnu_cxx13new_allocatorIP8IXFEventE8allocateEjPKv>
 80058e2:	4603      	mov	r3, r0
 80058e4:	4618      	mov	r0, r3
 80058e6:	3708      	adds	r7, #8
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <_ZN9__gnu_cxx13new_allocatorIPP8IXFEventE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	f000 f89e 	bl	8005a3a <_ZNK9__gnu_cxx13new_allocatorIPP8IXFEventE11_M_max_sizeEv>
 80058fe:	4602      	mov	r2, r0
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	4293      	cmp	r3, r2
 8005904:	bf8c      	ite	hi
 8005906:	2301      	movhi	r3, #1
 8005908:	2300      	movls	r3, #0
 800590a:	b2db      	uxtb	r3, r3
 800590c:	2b00      	cmp	r3, #0
 800590e:	d001      	beq.n	8005914 <_ZN9__gnu_cxx13new_allocatorIPP8IXFEventE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8005910:	f001 f8f5 	bl	8006afe <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	4618      	mov	r0, r3
 800591a:	f001 f8d0 	bl	8006abe <_Znwj>
 800591e:	4603      	mov	r3, r0
      }
 8005920:	4618      	mov	r0, r3
 8005922:	3710      	adds	r7, #16
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <_ZN9__gnu_cxx13new_allocatorIP8IXFEventE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	4619      	mov	r1, r3
 800593a:	68b8      	ldr	r0, [r7, #8]
 800593c:	f001 f8ae 	bl	8006a9c <_ZdlPvj>
      }
 8005940:	bf00      	nop
 8005942:	3710      	adds	r7, #16
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <_ZN9__gnu_cxx13new_allocatorIPP8IXFEventEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4618      	mov	r0, r3
 8005954:	370c      	adds	r7, #12
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr

0800595e <_ZNSt16allocator_traitsISaIP8IXFEventEE8max_sizeERKS2_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static _GLIBCXX20_CONSTEXPR size_type
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800595e:	b580      	push	{r7, lr}
 8005960:	b082      	sub	sp, #8
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus <= 201703L
	return __a.max_size();
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 f873 	bl	8005a52 <_ZNK9__gnu_cxx13new_allocatorIP8IXFEventE8max_sizeEv>
 800596c:	4603      	mov	r3, r0
#else
	return size_t(-1) / sizeof(value_type);
#endif
      }
 800596e:	4618      	mov	r0, r3
 8005970:	3708      	adds	r7, #8
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8005976:	b480      	push	{r7}
 8005978:	b083      	sub	sp, #12
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
 800597e:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	429a      	cmp	r2, r3
 800598a:	d201      	bcs.n	8005990 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	e000      	b.n	8005992 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8005990:	687b      	ldr	r3, [r7, #4]
    }
 8005992:	4618      	mov	r0, r3
 8005994:	370c      	adds	r7, #12
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr

0800599e <_ZSt4copyIPPP8IXFEventS3_ET0_T_S5_S4_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 800599e:	b590      	push	{r4, r7, lr}
 80059a0:	b085      	sub	sp, #20
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	60f8      	str	r0, [r7, #12]
 80059a6:	60b9      	str	r1, [r7, #8]
 80059a8:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80059aa:	68f8      	ldr	r0, [r7, #12]
 80059ac:	f000 f85d 	bl	8005a6a <_ZSt12__miter_baseIPPP8IXFEventET_S4_>
 80059b0:	4604      	mov	r4, r0
 80059b2:	68b8      	ldr	r0, [r7, #8]
 80059b4:	f000 f859 	bl	8005a6a <_ZSt12__miter_baseIPPP8IXFEventET_S4_>
 80059b8:	4603      	mov	r3, r0
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	4619      	mov	r1, r3
 80059be:	4620      	mov	r0, r4
 80059c0:	f000 f85e 	bl	8005a80 <_ZSt13__copy_move_aILb0EPPP8IXFEventS3_ET1_T0_S5_S4_>
 80059c4:	4603      	mov	r3, r0
    }
 80059c6:	4618      	mov	r0, r3
 80059c8:	3714      	adds	r7, #20
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd90      	pop	{r4, r7, pc}

080059ce <_ZSt13copy_backwardIPPP8IXFEventS3_ET0_T_S5_S4_>:
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    _GLIBCXX20_CONSTEXPR
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 80059ce:	b590      	push	{r4, r7, lr}
 80059d0:	b085      	sub	sp, #20
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	60f8      	str	r0, [r7, #12]
 80059d6:	60b9      	str	r1, [r7, #8]
 80059d8:	607a      	str	r2, [r7, #4]
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a<__is_move_iterator<_BI1>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	f000 f845 	bl	8005a6a <_ZSt12__miter_baseIPPP8IXFEventET_S4_>
 80059e0:	4604      	mov	r4, r0
 80059e2:	68b8      	ldr	r0, [r7, #8]
 80059e4:	f000 f841 	bl	8005a6a <_ZSt12__miter_baseIPPP8IXFEventET_S4_>
 80059e8:	4603      	mov	r3, r0
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	4619      	mov	r1, r3
 80059ee:	4620      	mov	r0, r4
 80059f0:	f000 f869 	bl	8005ac6 <_ZSt22__copy_move_backward_aILb0EPPP8IXFEventS3_ET1_T0_S5_S4_>
 80059f4:	4603      	mov	r3, r0
    }
 80059f6:	4618      	mov	r0, r3
 80059f8:	3714      	adds	r7, #20
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd90      	pop	{r4, r7, pc}

080059fe <_ZN9__gnu_cxx13new_allocatorIP8IXFEventE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80059fe:	b580      	push	{r7, lr}
 8005a00:	b084      	sub	sp, #16
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	60f8      	str	r0, [r7, #12]
 8005a06:	60b9      	str	r1, [r7, #8]
 8005a08:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	f000 f87e 	bl	8005b0c <_ZNK9__gnu_cxx13new_allocatorIP8IXFEventE11_M_max_sizeEv>
 8005a10:	4602      	mov	r2, r0
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	4293      	cmp	r3, r2
 8005a16:	bf8c      	ite	hi
 8005a18:	2301      	movhi	r3, #1
 8005a1a:	2300      	movls	r3, #0
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d001      	beq.n	8005a26 <_ZN9__gnu_cxx13new_allocatorIP8IXFEventE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8005a22:	f001 f86c 	bl	8006afe <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f001 f847 	bl	8006abe <_Znwj>
 8005a30:	4603      	mov	r3, r0
      }
 8005a32:	4618      	mov	r0, r3
 8005a34:	3710      	adds	r7, #16
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}

08005a3a <_ZNK9__gnu_cxx13new_allocatorIPP8IXFEventE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8005a3a:	b480      	push	{r7}
 8005a3c:	b083      	sub	sp, #12
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8005a42:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8005a46:	4618      	mov	r0, r3
 8005a48:	370c      	adds	r7, #12
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr

08005a52 <_ZNK9__gnu_cxx13new_allocatorIP8IXFEventE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b082      	sub	sp, #8
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 f856 	bl	8005b0c <_ZNK9__gnu_cxx13new_allocatorIP8IXFEventE11_M_max_sizeEv>
 8005a60:	4603      	mov	r3, r0
 8005a62:	4618      	mov	r0, r3
 8005a64:	3708      	adds	r7, #8
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <_ZSt12__miter_baseIPPP8IXFEventET_S4_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8005a6a:	b480      	push	{r7}
 8005a6c:	b083      	sub	sp, #12
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
    { return __it; }
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4618      	mov	r0, r3
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <_ZSt13__copy_move_aILb0EPPP8IXFEventS3_ET1_T0_S5_S4_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8005a80:	b5b0      	push	{r4, r5, r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8005a8c:	68f8      	ldr	r0, [r7, #12]
 8005a8e:	f000 f849 	bl	8005b24 <_ZSt12__niter_baseIPPP8IXFEventET_S4_>
 8005a92:	4604      	mov	r4, r0
 8005a94:	68b8      	ldr	r0, [r7, #8]
 8005a96:	f000 f845 	bl	8005b24 <_ZSt12__niter_baseIPPP8IXFEventET_S4_>
 8005a9a:	4605      	mov	r5, r0
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f000 f840 	bl	8005b24 <_ZSt12__niter_baseIPPP8IXFEventET_S4_>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	4629      	mov	r1, r5
 8005aaa:	4620      	mov	r0, r4
 8005aac:	f000 f845 	bl	8005b3a <_ZSt14__copy_move_a1ILb0EPPP8IXFEventS3_ET1_T0_S5_S4_>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	1d3b      	adds	r3, r7, #4
 8005ab4:	4611      	mov	r1, r2
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f000 f84f 	bl	8005b5a <_ZSt12__niter_wrapIPPP8IXFEventET_RKS4_S4_>
 8005abc:	4603      	mov	r3, r0
    }
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3710      	adds	r7, #16
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bdb0      	pop	{r4, r5, r7, pc}

08005ac6 <_ZSt22__copy_move_backward_aILb0EPPP8IXFEventS3_ET1_T0_S5_S4_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8005ac6:	b5b0      	push	{r4, r5, r7, lr}
 8005ac8:	b084      	sub	sp, #16
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	60f8      	str	r0, [r7, #12]
 8005ace:	60b9      	str	r1, [r7, #8]
 8005ad0:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8005ad2:	68f8      	ldr	r0, [r7, #12]
 8005ad4:	f000 f826 	bl	8005b24 <_ZSt12__niter_baseIPPP8IXFEventET_S4_>
 8005ad8:	4604      	mov	r4, r0
 8005ada:	68b8      	ldr	r0, [r7, #8]
 8005adc:	f000 f822 	bl	8005b24 <_ZSt12__niter_baseIPPP8IXFEventET_S4_>
 8005ae0:	4605      	mov	r5, r0
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f000 f81d 	bl	8005b24 <_ZSt12__niter_baseIPPP8IXFEventET_S4_>
 8005aea:	4603      	mov	r3, r0
 8005aec:	461a      	mov	r2, r3
 8005aee:	4629      	mov	r1, r5
 8005af0:	4620      	mov	r0, r4
 8005af2:	f000 f83e 	bl	8005b72 <_ZSt23__copy_move_backward_a1ILb0EPPP8IXFEventS3_ET1_T0_S5_S4_>
 8005af6:	4602      	mov	r2, r0
 8005af8:	1d3b      	adds	r3, r7, #4
 8005afa:	4611      	mov	r1, r2
 8005afc:	4618      	mov	r0, r3
 8005afe:	f000 f82c 	bl	8005b5a <_ZSt12__niter_wrapIPPP8IXFEventET_RKS4_S4_>
 8005b02:	4603      	mov	r3, r0
    }
 8005b04:	4618      	mov	r0, r3
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bdb0      	pop	{r4, r5, r7, pc}

08005b0c <_ZNK9__gnu_cxx13new_allocatorIP8IXFEventE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8005b14:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8005b18:	4618      	mov	r0, r3
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <_ZSt12__niter_baseIPPP8IXFEventET_S4_>:
    __niter_base(_Iterator __it)
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
    { return __it; }
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4618      	mov	r0, r3
 8005b30:	370c      	adds	r7, #12
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr

08005b3a <_ZSt14__copy_move_a1ILb0EPPP8IXFEventS3_ET1_T0_S5_S4_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b084      	sub	sp, #16
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	60f8      	str	r0, [r7, #12]
 8005b42:	60b9      	str	r1, [r7, #8]
 8005b44:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	68b9      	ldr	r1, [r7, #8]
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f000 f821 	bl	8005b92 <_ZSt14__copy_move_a2ILb0EPPP8IXFEventS3_ET1_T0_S5_S4_>
 8005b50:	4603      	mov	r3, r0
 8005b52:	4618      	mov	r0, r3
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <_ZSt12__niter_wrapIPPP8IXFEventET_RKS4_S4_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8005b5a:	b480      	push	{r7}
 8005b5c:	b083      	sub	sp, #12
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
 8005b62:	6039      	str	r1, [r7, #0]
    { return __res; }
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	4618      	mov	r0, r3
 8005b68:	370c      	adds	r7, #12
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr

08005b72 <_ZSt23__copy_move_backward_a1ILb0EPPP8IXFEventS3_ET1_T0_S5_S4_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8005b72:	b580      	push	{r7, lr}
 8005b74:	b084      	sub	sp, #16
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	60f8      	str	r0, [r7, #12]
 8005b7a:	60b9      	str	r1, [r7, #8]
 8005b7c:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	68b9      	ldr	r1, [r7, #8]
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	f000 f815 	bl	8005bb2 <_ZSt23__copy_move_backward_a2ILb0EPPP8IXFEventS3_ET1_T0_S5_S4_>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3710      	adds	r7, #16
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <_ZSt14__copy_move_a2ILb0EPPP8IXFEventS3_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b084      	sub	sp, #16
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	60f8      	str	r0, [r7, #12]
 8005b9a:	60b9      	str	r1, [r7, #8]
 8005b9c:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	68b9      	ldr	r1, [r7, #8]
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	f000 f815 	bl	8005bd2 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPP8IXFEventEEPT_PKS6_S9_S7_>
 8005ba8:	4603      	mov	r3, r0
    }
 8005baa:	4618      	mov	r0, r3
 8005bac:	3710      	adds	r7, #16
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}

08005bb2 <_ZSt23__copy_move_backward_a2ILb0EPPP8IXFEventS3_ET1_T0_S5_S4_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8005bb2:	b580      	push	{r7, lr}
 8005bb4:	b084      	sub	sp, #16
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	60f8      	str	r0, [r7, #12]
 8005bba:	60b9      	str	r1, [r7, #8]
 8005bbc:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	68b9      	ldr	r1, [r7, #8]
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f000 f822 	bl	8005c0c <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPP8IXFEventEEPT_PKS6_S9_S7_>
 8005bc8:	4603      	mov	r3, r0
    }
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3710      	adds	r7, #16
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPP8IXFEventEEPT_PKS6_S9_S7_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b086      	sub	sp, #24
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	60f8      	str	r0, [r7, #12]
 8005bda:	60b9      	str	r1, [r7, #8]
 8005bdc:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8005bde:	68ba      	ldr	r2, [r7, #8]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	1ad3      	subs	r3, r2, r3
 8005be4:	109b      	asrs	r3, r3, #2
 8005be6:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d006      	beq.n	8005bfc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPP8IXFEventEEPT_PKS6_S9_S7_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	68f9      	ldr	r1, [r7, #12]
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f001 f82a 	bl	8006c50 <memmove>
	  return __result + _Num;
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	4413      	add	r3, r2
	}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3718      	adds	r7, #24
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPP8IXFEventEEPT_PKS6_S9_S7_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8005c18:	68ba      	ldr	r2, [r7, #8]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	109b      	asrs	r3, r3, #2
 8005c20:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d00a      	beq.n	8005c3e <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPP8IXFEventEEPT_PKS6_S9_S7_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	425b      	negs	r3, r3
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	18d0      	adds	r0, r2, r3
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	461a      	mov	r2, r3
 8005c38:	68f9      	ldr	r1, [r7, #12]
 8005c3a:	f001 f809 	bl	8006c50 <memmove>
	  return __result - _Num;
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	425b      	negs	r3, r3
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	4413      	add	r3, r2
	}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3718      	adds	r7, #24
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <_ZN9XFTimeoutC1EiiP11IXFReactive>:
 * Constructor of the class.
 * \param id The id given by the behavioral class to uniquely identifing the timeout
 * \param interval The interval in milliseconds the timeout expires
 * \param pBehavior Pointer to behavioral class to which the timeout belongs.
 */
XFTimeout::XFTimeout(int id, int interval, IXFReactive * pBehavior)
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]
 8005c5c:	603b      	str	r3, [r7, #0]
 : IXFEvent(IXFEvent::Timeout, id, pBehavior),
   _interval(interval),
   _relTicks(interval)
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	68ba      	ldr	r2, [r7, #8]
 8005c64:	2104      	movs	r1, #4
 8005c66:	f7fe fc07 	bl	8004478 <_ZN8IXFEventC1ENS_10eEventTypeEiP11IXFReactive>
 8005c6a:	4a07      	ldr	r2, [pc, #28]	; (8005c88 <_ZN9XFTimeoutC1EiiP11IXFReactive+0x38>)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	601a      	str	r2, [r3, #0]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	615a      	str	r2, [r3, #20]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	619a      	str	r2, [r3, #24]
{
}
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3710      	adds	r7, #16
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	08008740 	.word	0x08008740

08005c8c <_ZN9XFTimeoutD1Ev>:

XFTimeout::~XFTimeout()
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	4a05      	ldr	r2, [pc, #20]	; (8005cac <_ZN9XFTimeoutD1Ev+0x20>)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	601a      	str	r2, [r3, #0]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f7fe fc11 	bl	80044c4 <_ZN8IXFEventD1Ev>
{

}
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3708      	adds	r7, #8
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	08008740 	.word	0x08008740

08005cb0 <_ZN9XFTimeoutD0Ev>:
XFTimeout::~XFTimeout()
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
}
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f7ff ffe7 	bl	8005c8c <_ZN9XFTimeoutD1Ev>
 8005cbe:	211c      	movs	r1, #28
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 feeb 	bl	8006a9c <_ZdlPvj>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3708      	adds	r7, #8
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <_ZNK9XFTimeouteqERKS_>:
/**
 * Operator checks if _pBehavior and _id are equal and returns
 * true if so. All other attributes get no attention.
 */
bool XFTimeout::operator ==(const XFTimeout & timeout) const
{
 8005cd0:	b590      	push	{r4, r7, lr}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
    // Check behavior and timeout id attributes, if there are equal
    return (_pBehavior == timeout._pBehavior && getId() == timeout.getId()) ? true : false;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	691a      	ldr	r2, [r3, #16]
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d10d      	bne.n	8005d02 <_ZNK9XFTimeouteqERKS_+0x32>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f7fd fc6d 	bl	80035c8 <_ZNK8IXFEvent5getIdEv>
 8005cee:	4604      	mov	r4, r0
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7fd fc68 	bl	80035c8 <_ZNK8IXFEvent5getIdEv>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	429c      	cmp	r4, r3
 8005cfc:	d101      	bne.n	8005d02 <_ZNK9XFTimeouteqERKS_+0x32>
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e000      	b.n	8005d04 <_ZNK9XFTimeouteqERKS_+0x34>
 8005d02:	2300      	movs	r3, #0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd90      	pop	{r4, r7, pc}

08005d0c <_ZNSt8__detail17_List_node_headerC1Ev>:
    {
#if _GLIBCXX_USE_CXX11_ABI
      std::size_t _M_size;
#endif

      _List_node_header() _GLIBCXX_NOEXCEPT
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
      { _M_init(); }
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 f805 	bl	8005d24 <_ZNSt8__detail17_List_node_header7_M_initEv>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3708      	adds	r7, #8
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <_ZNSt8__detail17_List_node_header7_M_initEv>:
	  }
      }
#endif

      void
      _M_init() _GLIBCXX_NOEXCEPT
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
      {
	this->_M_next = this->_M_prev = this;
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	605a      	str	r2, [r3, #4]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	685a      	ldr	r2, [r3, #4]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	601a      	str	r2, [r3, #0]
#if _GLIBCXX_USE_CXX11_ABI
	this->_M_size = 0;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	609a      	str	r2, [r3, #8]
#endif
      }
 8005d40:	bf00      	nop
 8005d42:	370c      	adds	r7, #12
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE10_List_implD1Ev>:
	  }
	return __n;
      }
#endif

      struct _List_impl
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 fb23 	bl	80063a0 <_ZNSaISt10_List_nodeIP9XFTimeoutEED1Ev>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3708      	adds	r7, #8
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EEC1Ev>:
      const _Node_alloc_type&
      _M_get_Node_allocator() const _GLIBCXX_NOEXCEPT
      { return _M_impl; }

#if __cplusplus >= 201103L
      _List_base() = default;
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f000 fb06 	bl	8006380 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE10_List_implC1Ev>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4618      	mov	r0, r3
 8005d78:	3708      	adds	r7, #8
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EEC1Ev>:

      /**
       *  @brief  Creates a %list with no elements.
       */
#if __cplusplus >= 201103L
      list() = default;
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b082      	sub	sp, #8
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f7ff ffeb 	bl	8005d64 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EEC1Ev>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4618      	mov	r0, r3
 8005d92:	3708      	adds	r7, #8
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EED1Ev>:
       *  things.  The _Base dtor only erases the elements, and note
       *  that if the elements themselves are pointers, the pointed-to
       *  memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      ~list() = default;
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4618      	mov	r0, r3
 8005da4:	f000 fb08 	bl	80063b8 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EED1Ev>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4618      	mov	r0, r3
 8005dac:	3708      	adds	r7, #8
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
	...

08005db4 <_ZN16XFTimeoutManagerC1Ev>:

// Initialization of static class attributes
XFTimeoutManager * XFTimeoutManager::_pInstance = NULL;


XFTimeoutManager::XFTimeoutManager()
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b082      	sub	sp, #8
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 : _tickInterval(0),
   _sysTicksInMs(0)
 8005dbc:	4a09      	ldr	r2, [pc, #36]	; (8005de4 <_ZN16XFTimeoutManagerC1Ev+0x30>)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	601a      	str	r2, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	605a      	str	r2, [r3, #4]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	3308      	adds	r3, #8
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f7ff ffd6 	bl	8005d7e <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EEC1Ev>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	615a      	str	r2, [r3, #20]
{
}
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3708      	adds	r7, #8
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	08008750 	.word	0x08008750

08005de8 <_ZN16XFTimeoutManagerD1Ev>:

XFTimeoutManager::~XFTimeoutManager()
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	4a06      	ldr	r2, [pc, #24]	; (8005e0c <_ZN16XFTimeoutManagerD1Ev+0x24>)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	601a      	str	r2, [r3, #0]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	3308      	adds	r3, #8
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f7ff ffcc 	bl	8005d98 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EED1Ev>
{
}
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4618      	mov	r0, r3
 8005e04:	3708      	adds	r7, #8
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	08008750 	.word	0x08008750

08005e10 <_ZN16XFTimeoutManagerD0Ev>:
XFTimeoutManager::~XFTimeoutManager()
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
}
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f7ff ffe5 	bl	8005de8 <_ZN16XFTimeoutManagerD1Ev>
 8005e1e:	2118      	movs	r1, #24
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 fe3b 	bl	8006a9c <_ZdlPvj>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3708      	adds	r7, #8
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <_ZN16XFTimeoutManager11getInstanceEv>:

XFTimeoutManager * XFTimeoutManager::getInstance()
{
 8005e30:	b598      	push	{r3, r4, r7, lr}
 8005e32:	af00      	add	r7, sp, #0
    if (!_pInstance)
 8005e34:	4b08      	ldr	r3, [pc, #32]	; (8005e58 <_ZN16XFTimeoutManager11getInstanceEv+0x28>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d109      	bne.n	8005e50 <_ZN16XFTimeoutManager11getInstanceEv+0x20>
    {
        _pInstance = new XFTimeoutManager;
 8005e3c:	2018      	movs	r0, #24
 8005e3e:	f000 fe3e 	bl	8006abe <_Znwj>
 8005e42:	4603      	mov	r3, r0
 8005e44:	461c      	mov	r4, r3
 8005e46:	4620      	mov	r0, r4
 8005e48:	f7ff ffb4 	bl	8005db4 <_ZN16XFTimeoutManagerC1Ev>
 8005e4c:	4b02      	ldr	r3, [pc, #8]	; (8005e58 <_ZN16XFTimeoutManager11getInstanceEv+0x28>)
 8005e4e:	601c      	str	r4, [r3, #0]
    }

    return _pInstance;
 8005e50:	4b01      	ldr	r3, [pc, #4]	; (8005e58 <_ZN16XFTimeoutManager11getInstanceEv+0x28>)
 8005e52:	681b      	ldr	r3, [r3, #0]
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	bd98      	pop	{r3, r4, r7, pc}
 8005e58:	20000354 	.word	0x20000354

08005e5c <_ZN16XFTimeoutManager15setTickIntervalEi>:
/**
 * Sets the time interval in milliseconds in which the timeout manager
 * should handle the timeouts.
 */
void XFTimeoutManager::setTickInterval(int tickInterval)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
    _tickInterval = tickInterval;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	683a      	ldr	r2, [r7, #0]
 8005e6a:	605a      	str	r2, [r3, #4]
}
 8005e6c:	bf00      	nop
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <_ZN16XFTimeoutManager5startEv>:

/**
 * Starts the timeout manager.
 */
void XFTimeoutManager::start()
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
    // Check tickInterval. Set default value if not set
    if (_tickInterval == 0)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d102      	bne.n	8005e8e <_ZN16XFTimeoutManager5startEv+0x16>
    {
        _tickInterval = 10;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	220a      	movs	r2, #10
 8005e8c:	605a      	str	r2, [r3, #4]
    }

    startHardwareTimer(_tickInterval);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	4619      	mov	r1, r3
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 fa68 	bl	800636a <_ZN16XFTimeoutManager18startHardwareTimerEi>
}
 8005e9a:	bf00      	nop
 8005e9c:	3708      	adds	r7, #8
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}

08005ea2 <_ZN16XFTimeoutManager15scheduleTimeoutEiiP11IXFReactive>:
 * \param timeoutId The timeout id known by the reactive parameter. Is needed by the reactive part to uniquely identify the timeout.
 * \param interval The time in milliseconds to wait until the timeout expires.
 * \param pReactive The reactive instance where to inject the timeout when it timeouts.
 */
void XFTimeoutManager::scheduleTimeout(int timeoutId, int interval, IXFReactive * pReactive)
{
 8005ea2:	b590      	push	{r4, r7, lr}
 8005ea4:	b087      	sub	sp, #28
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	60f8      	str	r0, [r7, #12]
 8005eaa:	60b9      	str	r1, [r7, #8]
 8005eac:	607a      	str	r2, [r7, #4]
 8005eae:	603b      	str	r3, [r7, #0]
    XFTimeout * pTimeout = new XFTimeout(timeoutId, interval, pReactive);
 8005eb0:	201c      	movs	r0, #28
 8005eb2:	f000 fe04 	bl	8006abe <_Znwj>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	461c      	mov	r4, r3
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	68b9      	ldr	r1, [r7, #8]
 8005ec0:	4620      	mov	r0, r4
 8005ec2:	f7ff fec5 	bl	8005c50 <_ZN9XFTimeoutC1EiiP11IXFReactive>
 8005ec6:	617c      	str	r4, [r7, #20]

    if (pTimeout)
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d003      	beq.n	8005ed6 <_ZN16XFTimeoutManager15scheduleTimeoutEiiP11IXFReactive+0x34>
    {
        addTimeout(pTimeout);
 8005ece:	6979      	ldr	r1, [r7, #20]
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f000 f8bb 	bl	800604c <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout>
    }
}
 8005ed6:	bf00      	nop
 8005ed8:	371c      	adds	r7, #28
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd90      	pop	{r4, r7, pc}

08005ede <_ZN16XFTimeoutManager17unscheduleTimeoutEiP11IXFReactive>:

/**
 * Removes all timeouts corresponding the given parameters.
 */
void XFTimeoutManager::unscheduleTimeout(int timeoutId, IXFReactive * pReactive)
{
 8005ede:	b580      	push	{r7, lr}
 8005ee0:	b084      	sub	sp, #16
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	60f8      	str	r0, [r7, #12]
 8005ee6:	60b9      	str	r1, [r7, #8]
 8005ee8:	607a      	str	r2, [r7, #4]
    removeTimeouts(timeoutId, pReactive);
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	68b9      	ldr	r1, [r7, #8]
 8005eee:	68f8      	ldr	r0, [r7, #12]
 8005ef0:	f000 f99e 	bl	8006230 <_ZN16XFTimeoutManager14removeTimeoutsEiP11IXFReactive>
}
 8005ef4:	bf00      	nop
 8005ef6:	3710      	adds	r7, #16
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <_ZN16XFTimeoutManager4tickEv>:
/**
 * On each call to this method, XFTimeoutManager::_tickInterval will be removed from the
 * timeouts. When a timeout expires it is injected back to its reactive instance.
 */
void XFTimeoutManager::tick()
{
 8005efc:	b590      	push	{r4, r7, lr}
 8005efe:	b089      	sub	sp, #36	; 0x24
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
    _sysTicksInMs += tickInterval();
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f7fe fb43 	bl	8004590 <_ZNK16XFTimeoutManager12tickIntervalEv>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	695b      	ldr	r3, [r3, #20]
 8005f10:	441a      	add	r2, r3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	615a      	str	r2, [r3, #20]

    if (!_timeouts.empty())
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	3308      	adds	r3, #8
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f000 fa5c 	bl	80063d8 <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE5emptyEv>
 8005f20:	4603      	mov	r3, r0
 8005f22:	f083 0301 	eor.w	r3, r3, #1
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	f000 808a 	beq.w	8006042 <_ZN16XFTimeoutManager4tickEv+0x146>
    {
        XFTimeout * pFirstTimeout = _timeouts.front();
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	3308      	adds	r3, #8
 8005f32:	4618      	mov	r0, r3
 8005f34:	f000 fa62 	bl	80063fc <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5frontEv>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	61fb      	str	r3, [r7, #28]

        // Subtract time elapsed
        pFirstTimeout->_relTicks -= tickInterval();
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f7fe fb26 	bl	8004590 <_ZNK16XFTimeoutManager12tickIntervalEv>
 8005f44:	4602      	mov	r2, r0
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	1a9a      	subs	r2, r3, r2
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	619a      	str	r2, [r3, #24]

        // Check timeout timed out
        if (pFirstTimeout->_relTicks <= 0)
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	699b      	ldr	r3, [r3, #24]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	dc74      	bgt.n	8006042 <_ZN16XFTimeoutManager4tickEv+0x146>
        {
            // Check remaining ticks can be given further
            if (_timeouts.size() > 1)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	3308      	adds	r3, #8
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f000 fa60 	bl	8006422 <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE4sizeEv>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	bf8c      	ite	hi
 8005f68:	2301      	movhi	r3, #1
 8005f6a:	2300      	movls	r3, #0
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d018      	beq.n	8005fa4 <_ZN16XFTimeoutManager4tickEv+0xa8>
            {
                TimeoutList::iterator i = _timeouts.begin();
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	3308      	adds	r3, #8
 8005f76:	4618      	mov	r0, r3
 8005f78:	f000 fa5f 	bl	800643a <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	613b      	str	r3, [r7, #16]

                // Add ticks overrun to next timeout
                i++;
 8005f80:	f107 0310 	add.w	r3, r7, #16
 8005f84:	2100      	movs	r1, #0
 8005f86:	4618      	mov	r0, r3
 8005f88:	f000 fa68 	bl	800645c <_ZNSt14_List_iteratorIP9XFTimeoutEppEi>
                (*i)->_relTicks -= pFirstTimeout->_relTicks;
 8005f8c:	f107 0310 	add.w	r3, r7, #16
 8005f90:	4618      	mov	r0, r3
 8005f92:	f000 fa77 	bl	8006484 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8005f96:	4603      	mov	r3, r0
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	6999      	ldr	r1, [r3, #24]
 8005f9c:	69fa      	ldr	r2, [r7, #28]
 8005f9e:	6992      	ldr	r2, [r2, #24]
 8005fa0:	1a8a      	subs	r2, r1, r2
 8005fa2:	619a      	str	r2, [r3, #24]
            }

            // Inject the timeout back to the behavioral class
            returnTimeout(pFirstTimeout);
 8005fa4:	69f9      	ldr	r1, [r7, #28]
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 f9cb 	bl	8006342 <_ZN16XFTimeoutManager13returnTimeoutEP9XFTimeout>

            // Remove timeout
            _timeouts.pop_front();
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	3308      	adds	r3, #8
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f000 fa75 	bl	80064a0 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE9pop_frontEv>

            // Check if timeouts with same timeout value are present
            for (TimeoutList::iterator it = _timeouts.begin(); it != _timeouts.end(); /*Do not increment here!*/)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	3308      	adds	r3, #8
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f000 fa3d 	bl	800643a <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	60fb      	str	r3, [r7, #12]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	3308      	adds	r3, #8
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f000 fa79 	bl	80064c0 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	617b      	str	r3, [r7, #20]
 8005fd2:	f107 0214 	add.w	r2, r7, #20
 8005fd6:	f107 030c 	add.w	r3, r7, #12
 8005fda:	4611      	mov	r1, r2
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f000 fa7f 	bl	80064e0 <_ZStneRKSt14_List_iteratorIP9XFTimeoutES4_>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d02c      	beq.n	8006042 <_ZN16XFTimeoutManager4tickEv+0x146>
            {
                if ((*it)->_relTicks == 0)
 8005fe8:	f107 030c 	add.w	r3, r7, #12
 8005fec:	4618      	mov	r0, r3
 8005fee:	f000 fa49 	bl	8006484 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	699b      	ldr	r3, [r3, #24]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	bf0c      	ite	eq
 8005ffc:	2301      	moveq	r3, #1
 8005ffe:	2300      	movne	r3, #0
 8006000:	b2db      	uxtb	r3, r3
 8006002:	2b00      	cmp	r3, #0
 8006004:	d01c      	beq.n	8006040 <_ZN16XFTimeoutManager4tickEv+0x144>
                {
                    returnTimeout(*it);
 8006006:	f107 030c 	add.w	r3, r7, #12
 800600a:	4618      	mov	r0, r3
 800600c:	f000 fa3a 	bl	8006484 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8006010:	4603      	mov	r3, r0
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4619      	mov	r1, r3
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 f993 	bl	8006342 <_ZN16XFTimeoutManager13returnTimeoutEP9XFTimeout>
                    it = _timeouts.erase(it);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f103 0408 	add.w	r4, r3, #8
 8006022:	f107 020c 	add.w	r2, r7, #12
 8006026:	f107 0318 	add.w	r3, r7, #24
 800602a:	4611      	mov	r1, r2
 800602c:	4618      	mov	r0, r3
 800602e:	f000 fa6b 	bl	8006508 <_ZNSt20_List_const_iteratorIP9XFTimeoutEC1ERKSt14_List_iteratorIS1_E>
 8006032:	69b9      	ldr	r1, [r7, #24]
 8006034:	4620      	mov	r0, r4
 8006036:	f000 fa77 	bl	8006528 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5eraseESt20_List_const_iteratorIS2_E>
 800603a:	4603      	mov	r3, r0
 800603c:	60fb      	str	r3, [r7, #12]
            for (TimeoutList::iterator it = _timeouts.begin(); it != _timeouts.end(); /*Do not increment here!*/)
 800603e:	e7c1      	b.n	8005fc4 <_ZN16XFTimeoutManager4tickEv+0xc8>
                }
                else
                {
                    break;
 8006040:	bf00      	nop
                }
            }
        }
    }
}
 8006042:	bf00      	nop
 8006044:	3724      	adds	r7, #36	; 0x24
 8006046:	46bd      	mov	sp, r7
 8006048:	bd90      	pop	{r4, r7, pc}
	...

0800604c <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout>:

void XFTimeoutManager::addTimeout(XFTimeout * pNewTimeout)
{
 800604c:	b590      	push	{r4, r7, lr}
 800604e:	b089      	sub	sp, #36	; 0x24
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
    enterCritical();
 8006056:	f7fe f8ff 	bl	8004258 <enterCritical>

    if (!_timeouts.empty())
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	3308      	adds	r3, #8
 800605e:	4618      	mov	r0, r3
 8006060:	f000 f9ba 	bl	80063d8 <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE5emptyEv>
 8006064:	4603      	mov	r3, r0
 8006066:	f083 0301 	eor.w	r3, r3, #1
 800606a:	b2db      	uxtb	r3, r3
 800606c:	2b00      	cmp	r3, #0
 800606e:	f000 80cb 	beq.w	8006208 <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x1bc>
    {
        // Insert timeout before timeout(s) triggering later
        TimeoutList::iterator i = _timeouts.begin();
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	3308      	adds	r3, #8
 8006076:	4618      	mov	r0, r3
 8006078:	f000 f9df 	bl	800643a <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 800607c:	4603      	mov	r3, r0
 800607e:	60fb      	str	r3, [r7, #12]

        if ((*i)->_relTicks >= pNewTimeout->_relTicks)
 8006080:	f107 030c 	add.w	r3, r7, #12
 8006084:	4618      	mov	r0, r3
 8006086:	f000 f9fd 	bl	8006484 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 800608a:	4603      	mov	r3, r0
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	699a      	ldr	r2, [r3, #24]
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	699b      	ldr	r3, [r3, #24]
 8006094:	429a      	cmp	r2, r3
 8006096:	bfac      	ite	ge
 8006098:	2301      	movge	r3, #1
 800609a:	2300      	movlt	r3, #0
 800609c:	b2db      	uxtb	r3, r3
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d013      	beq.n	80060ca <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x7e>
        {
            // A new timeout at the beginning
            _timeouts.push_front(pNewTimeout);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	3308      	adds	r3, #8
 80060a6:	463a      	mov	r2, r7
 80060a8:	4611      	mov	r1, r2
 80060aa:	4618      	mov	r0, r3
 80060ac:	f000 fa57 	bl	800655e <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE10push_frontERKS2_>

            // Remove time from following timeout
            (*i)->_relTicks -= pNewTimeout->_relTicks;
 80060b0:	f107 030c 	add.w	r3, r7, #12
 80060b4:	4618      	mov	r0, r3
 80060b6:	f000 f9e5 	bl	8006484 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 80060ba:	4603      	mov	r3, r0
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	6999      	ldr	r1, [r3, #24]
 80060c0:	683a      	ldr	r2, [r7, #0]
 80060c2:	6992      	ldr	r2, [r2, #24]
 80060c4:	1a8a      	subs	r2, r1, r2
 80060c6:	619a      	str	r2, [r3, #24]
 80060c8:	e0a5      	b.n	8006216 <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x1ca>
        }
        else
        {
            unsigned int index = 0;
 80060ca:	2300      	movs	r3, #0
 80060cc:	61fb      	str	r3, [r7, #28]

            // Remove time from new timeout
            pNewTimeout->_relTicks -= (*i)->_relTicks;
 80060ce:	f107 030c 	add.w	r3, r7, #12
 80060d2:	4618      	mov	r0, r3
 80060d4:	f000 f9d6 	bl	8006484 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 80060d8:	4603      	mov	r3, r0
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	699a      	ldr	r2, [r3, #24]
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	6999      	ldr	r1, [r3, #24]
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	1a8a      	subs	r2, r1, r2
 80060e6:	619a      	str	r2, [r3, #24]
            i++; index++;
 80060e8:	f107 030c 	add.w	r3, r7, #12
 80060ec:	2100      	movs	r1, #0
 80060ee:	4618      	mov	r0, r3
 80060f0:	f000 f9b4 	bl	800645c <_ZNSt14_List_iteratorIP9XFTimeoutEppEi>
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	3301      	adds	r3, #1
 80060f8:	61fb      	str	r3, [r7, #28]

            while (i != _timeouts.end() &&
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	3308      	adds	r3, #8
 80060fe:	4618      	mov	r0, r3
 8006100:	f000 f9de 	bl	80064c0 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 8006104:	4603      	mov	r3, r0
 8006106:	613b      	str	r3, [r7, #16]
 8006108:	f107 0210 	add.w	r2, r7, #16
 800610c:	f107 030c 	add.w	r3, r7, #12
 8006110:	4611      	mov	r1, r2
 8006112:	4618      	mov	r0, r3
 8006114:	f000 f9e4 	bl	80064e0 <_ZStneRKSt14_List_iteratorIP9XFTimeoutES4_>
 8006118:	4603      	mov	r3, r0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00d      	beq.n	800613a <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0xee>
                   (*i)->_relTicks < pNewTimeout->_relTicks)
 800611e:	f107 030c 	add.w	r3, r7, #12
 8006122:	4618      	mov	r0, r3
 8006124:	f000 f9ae 	bl	8006484 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8006128:	4603      	mov	r3, r0
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	699a      	ldr	r2, [r3, #24]
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	699b      	ldr	r3, [r3, #24]
            while (i != _timeouts.end() &&
 8006132:	429a      	cmp	r2, r3
 8006134:	da01      	bge.n	800613a <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0xee>
 8006136:	2301      	movs	r3, #1
 8006138:	e000      	b.n	800613c <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0xf0>
 800613a:	2300      	movs	r3, #0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d016      	beq.n	800616e <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x122>
            {
                pNewTimeout->_relTicks -= (*i)->_relTicks;
 8006140:	f107 030c 	add.w	r3, r7, #12
 8006144:	4618      	mov	r0, r3
 8006146:	f000 f99d 	bl	8006484 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 800614a:	4603      	mov	r3, r0
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	699a      	ldr	r2, [r3, #24]
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	6999      	ldr	r1, [r3, #24]
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	1a8a      	subs	r2, r1, r2
 8006158:	619a      	str	r2, [r3, #24]
                i++; index++;
 800615a:	f107 030c 	add.w	r3, r7, #12
 800615e:	2100      	movs	r1, #0
 8006160:	4618      	mov	r0, r3
 8006162:	f000 f97b 	bl	800645c <_ZNSt14_List_iteratorIP9XFTimeoutEppEi>
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	3301      	adds	r3, #1
 800616a:	61fb      	str	r3, [r7, #28]
            while (i != _timeouts.end() &&
 800616c:	e7c5      	b.n	80060fa <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0xae>
            }
            // Insert new timeout before
            i = _timeouts.insert(i, pNewTimeout);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f103 0408 	add.w	r4, r3, #8
 8006174:	f107 020c 	add.w	r2, r7, #12
 8006178:	f107 0314 	add.w	r3, r7, #20
 800617c:	4611      	mov	r1, r2
 800617e:	4618      	mov	r0, r3
 8006180:	f000 f9c2 	bl	8006508 <_ZNSt20_List_const_iteratorIP9XFTimeoutEC1ERKSt14_List_iteratorIS1_E>
 8006184:	463b      	mov	r3, r7
 8006186:	461a      	mov	r2, r3
 8006188:	6979      	ldr	r1, [r7, #20]
 800618a:	4620      	mov	r0, r4
 800618c:	f000 f9f9 	bl	8006582 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE6insertESt20_List_const_iteratorIS2_ERKS2_>
 8006190:	4603      	mov	r3, r0
 8006192:	60fb      	str	r3, [r7, #12]

            if (_timeouts.size() > index + 1)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	3308      	adds	r3, #8
 8006198:	4618      	mov	r0, r3
 800619a:	f000 f942 	bl	8006422 <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE4sizeEv>
 800619e:	4602      	mov	r2, r0
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	3301      	adds	r3, #1
 80061a4:	429a      	cmp	r2, r3
 80061a6:	bf8c      	ite	hi
 80061a8:	2301      	movhi	r3, #1
 80061aa:	2300      	movls	r3, #0
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d031      	beq.n	8006216 <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x1ca>
            {
                // Remove time from following timeout
                i++;
 80061b2:	f107 030c 	add.w	r3, r7, #12
 80061b6:	2100      	movs	r1, #0
 80061b8:	4618      	mov	r0, r3
 80061ba:	f000 f94f 	bl	800645c <_ZNSt14_List_iteratorIP9XFTimeoutEppEi>
                assert(i != _timeouts.end());
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	3308      	adds	r3, #8
 80061c2:	4618      	mov	r0, r3
 80061c4:	f000 f97c 	bl	80064c0 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 80061c8:	4603      	mov	r3, r0
 80061ca:	61bb      	str	r3, [r7, #24]
 80061cc:	f107 0218 	add.w	r2, r7, #24
 80061d0:	f107 030c 	add.w	r3, r7, #12
 80061d4:	4611      	mov	r1, r2
 80061d6:	4618      	mov	r0, r3
 80061d8:	f000 f982 	bl	80064e0 <_ZStneRKSt14_List_iteratorIP9XFTimeoutES4_>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d105      	bne.n	80061ee <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x1a2>
 80061e2:	4b10      	ldr	r3, [pc, #64]	; (8006224 <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x1d8>)
 80061e4:	4a10      	ldr	r2, [pc, #64]	; (8006228 <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x1dc>)
 80061e6:	21be      	movs	r1, #190	; 0xbe
 80061e8:	4810      	ldr	r0, [pc, #64]	; (800622c <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x1e0>)
 80061ea:	f000 fcb3 	bl	8006b54 <__assert_func>
                (*i)->_relTicks -= pNewTimeout->_relTicks;
 80061ee:	f107 030c 	add.w	r3, r7, #12
 80061f2:	4618      	mov	r0, r3
 80061f4:	f000 f946 	bl	8006484 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 80061f8:	4603      	mov	r3, r0
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6999      	ldr	r1, [r3, #24]
 80061fe:	683a      	ldr	r2, [r7, #0]
 8006200:	6992      	ldr	r2, [r2, #24]
 8006202:	1a8a      	subs	r2, r1, r2
 8006204:	619a      	str	r2, [r3, #24]
 8006206:	e006      	b.n	8006216 <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x1ca>
            }
        }
    }
    else
    {
        _timeouts.push_front(pNewTimeout);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	3308      	adds	r3, #8
 800620c:	463a      	mov	r2, r7
 800620e:	4611      	mov	r1, r2
 8006210:	4618      	mov	r0, r3
 8006212:	f000 f9a4 	bl	800655e <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE10push_frontERKS2_>
    }

    exitCritical();
 8006216:	f7fe f83d 	bl	8004294 <exitCritical>
}
 800621a:	bf00      	nop
 800621c:	3724      	adds	r7, #36	; 0x24
 800621e:	46bd      	mov	sp, r7
 8006220:	bd90      	pop	{r4, r7, pc}
 8006222:	bf00      	nop
 8006224:	08008528 	.word	0x08008528
 8006228:	08008540 	.word	0x08008540
 800622c:	08008570 	.word	0x08008570

08006230 <_ZN16XFTimeoutManager14removeTimeoutsEiP11IXFReactive>:

/**
 * Removes all timeouts corresponding the given parameters.
 */
void XFTimeoutManager::removeTimeouts(int timeoutId, IXFReactive * pReactive)
{
 8006230:	b590      	push	{r4, r7, lr}
 8006232:	b093      	sub	sp, #76	; 0x4c
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	607a      	str	r2, [r7, #4]
    const XFTimeout timeout(timeoutId, 0, pReactive);
 800623c:	f107 001c 	add.w	r0, r7, #28
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	68b9      	ldr	r1, [r7, #8]
 8006246:	f7ff fd03 	bl	8005c50 <_ZN9XFTimeoutC1EiiP11IXFReactive>
    XFTimeout * pTimeout;

    enterCritical();
 800624a:	f7fe f805 	bl	8004258 <enterCritical>

    for (TimeoutList::iterator i = _timeouts.begin();
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	3308      	adds	r3, #8
 8006252:	4618      	mov	r0, r3
 8006254:	f000 f8f1 	bl	800643a <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 8006258:	4603      	mov	r3, r0
 800625a:	61bb      	str	r3, [r7, #24]
         i != _timeouts.end();)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	3308      	adds	r3, #8
 8006260:	4618      	mov	r0, r3
 8006262:	f000 f92d 	bl	80064c0 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 8006266:	4603      	mov	r3, r0
 8006268:	63bb      	str	r3, [r7, #56]	; 0x38
 800626a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800626e:	f107 0318 	add.w	r3, r7, #24
 8006272:	4611      	mov	r1, r2
 8006274:	4618      	mov	r0, r3
 8006276:	f000 f933 	bl	80064e0 <_ZStneRKSt14_List_iteratorIP9XFTimeoutES4_>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d055      	beq.n	800632c <_ZN16XFTimeoutManager14removeTimeoutsEiP11IXFReactive+0xfc>
    {
        pTimeout = *i;
 8006280:	f107 0318 	add.w	r3, r7, #24
 8006284:	4618      	mov	r0, r3
 8006286:	f000 f8fd 	bl	8006484 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 800628a:	4603      	mov	r3, r0
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	647b      	str	r3, [r7, #68]	; 0x44

        // Check if behavior and timeout id are equal
        if (*pTimeout == timeout)
 8006290:	f107 031c 	add.w	r3, r7, #28
 8006294:	4619      	mov	r1, r3
 8006296:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8006298:	f7ff fd1a 	bl	8005cd0 <_ZNK9XFTimeouteqERKS_>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d03d      	beq.n	800631e <_ZN16XFTimeoutManager14removeTimeoutsEiP11IXFReactive+0xee>
        {
            TimeoutList::iterator next = i;
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	617b      	str	r3, [r7, #20]

            // Check if remaining ticks can be given further
            if (++next != _timeouts.end())
 80062a6:	f107 0314 	add.w	r3, r7, #20
 80062aa:	4618      	mov	r0, r3
 80062ac:	f000 f98f 	bl	80065ce <_ZNSt14_List_iteratorIP9XFTimeoutEppEv>
 80062b0:	4604      	mov	r4, r0
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	3308      	adds	r3, #8
 80062b6:	4618      	mov	r0, r3
 80062b8:	f000 f902 	bl	80064c0 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 80062bc:	4603      	mov	r3, r0
 80062be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062c0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80062c4:	4619      	mov	r1, r3
 80062c6:	4620      	mov	r0, r4
 80062c8:	f000 f90a 	bl	80064e0 <_ZStneRKSt14_List_iteratorIP9XFTimeoutES4_>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00b      	beq.n	80062ea <_ZN16XFTimeoutManager14removeTimeoutsEiP11IXFReactive+0xba>
            {
                // Add (remaining) ticks to next timeout in list
                (*next)->_relTicks += pTimeout->_relTicks;
 80062d2:	f107 0314 	add.w	r3, r7, #20
 80062d6:	4618      	mov	r0, r3
 80062d8:	f000 f8d4 	bl	8006484 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 80062dc:	4603      	mov	r3, r0
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	6999      	ldr	r1, [r3, #24]
 80062e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062e4:	6992      	ldr	r2, [r2, #24]
 80062e6:	440a      	add	r2, r1
 80062e8:	619a      	str	r2, [r3, #24]
            }

            i = _timeouts.erase(i);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f103 0408 	add.w	r4, r3, #8
 80062f0:	f107 0218 	add.w	r2, r7, #24
 80062f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80062f8:	4611      	mov	r1, r2
 80062fa:	4618      	mov	r0, r3
 80062fc:	f000 f904 	bl	8006508 <_ZNSt20_List_const_iteratorIP9XFTimeoutEC1ERKSt14_List_iteratorIS1_E>
 8006300:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006302:	4620      	mov	r0, r4
 8006304:	f000 f910 	bl	8006528 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5eraseESt20_List_const_iteratorIS2_E>
 8006308:	4603      	mov	r3, r0
 800630a:	61bb      	str	r3, [r7, #24]

            delete pTimeout;
 800630c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800630e:	2b00      	cmp	r3, #0
 8006310:	d0a4      	beq.n	800625c <_ZN16XFTimeoutManager14removeTimeoutsEiP11IXFReactive+0x2c>
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	3204      	adds	r2, #4
 8006316:	6812      	ldr	r2, [r2, #0]
 8006318:	4618      	mov	r0, r3
 800631a:	4790      	blx	r2
 800631c:	e79e      	b.n	800625c <_ZN16XFTimeoutManager14removeTimeoutsEiP11IXFReactive+0x2c>
        }
        else
        {
            i++;
 800631e:	f107 0318 	add.w	r3, r7, #24
 8006322:	2100      	movs	r1, #0
 8006324:	4618      	mov	r0, r3
 8006326:	f000 f899 	bl	800645c <_ZNSt14_List_iteratorIP9XFTimeoutEppEi>
    for (TimeoutList::iterator i = _timeouts.begin();
 800632a:	e797      	b.n	800625c <_ZN16XFTimeoutManager14removeTimeoutsEiP11IXFReactive+0x2c>
        }
    }

    exitCritical();
 800632c:	f7fd ffb2 	bl	8004294 <exitCritical>
    const XFTimeout timeout(timeoutId, 0, pReactive);
 8006330:	f107 031c 	add.w	r3, r7, #28
 8006334:	4618      	mov	r0, r3
 8006336:	f7ff fca9 	bl	8005c8c <_ZN9XFTimeoutD1Ev>
}
 800633a:	bf00      	nop
 800633c:	374c      	adds	r7, #76	; 0x4c
 800633e:	46bd      	mov	sp, r7
 8006340:	bd90      	pop	{r4, r7, pc}

08006342 <_ZN16XFTimeoutManager13returnTimeoutEP9XFTimeout>:
/**
 * Returns the timeout back to the queue of the thread executing
 * the behavioral instance.
 */
void XFTimeoutManager::returnTimeout(XFTimeout * pTimeout)
{
 8006342:	b580      	push	{r7, lr}
 8006344:	b082      	sub	sp, #8
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
 800634a:	6039      	str	r1, [r7, #0]
    pTimeout->getBehavior()->pushEvent(pTimeout);
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	4618      	mov	r0, r3
 8006350:	f7fe fb9c 	bl	8004a8c <_ZNK8IXFEvent11getBehaviorEv>
 8006354:	4603      	mov	r3, r0
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	320c      	adds	r2, #12
 800635a:	6812      	ldr	r2, [r2, #0]
 800635c:	6839      	ldr	r1, [r7, #0]
 800635e:	4618      	mov	r0, r3
 8006360:	4790      	blx	r2
}
 8006362:	bf00      	nop
 8006364:	3708      	adds	r7, #8
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}

0800636a <_ZN16XFTimeoutManager18startHardwareTimerEi>:
 * in a regular interval given by parameter tickTime
 *
 * \param tickTime Time in milliseconds the hardware timer should call XFTimeoutManager::tick()
 */
void XFTimeoutManager::startHardwareTimer(int tickTime)
{
 800636a:	b480      	push	{r7}
 800636c:	b083      	sub	sp, #12
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
 8006372:	6039      	str	r1, [r7, #0]
    startTimer( tickTime );

#endif /**************************************************************************************************************/


}
 8006374:	bf00      	nop
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE10_List_implC1Ev>:
	_List_impl() _GLIBCXX_NOEXCEPT_IF(
 8006380:	b580      	push	{r7, lr}
 8006382:	b082      	sub	sp, #8
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
	: _Node_alloc_type()
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 f930 	bl	80065ee <_ZNSaISt10_List_nodeIP9XFTimeoutEEC1Ev>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4618      	mov	r0, r3
 8006392:	f7ff fcbb 	bl	8005d0c <_ZNSt8__detail17_List_node_headerC1Ev>
	{ }
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4618      	mov	r0, r3
 800639a:	3708      	adds	r7, #8
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <_ZNSaISt10_List_nodeIP9XFTimeoutEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 f92c 	bl	8006606 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEED1Ev>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4618      	mov	r0, r3
 80063b2:	3708      	adds	r7, #8
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EED1Ev>:
      ~_List_base() _GLIBCXX_NOEXCEPT
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
      { _M_clear(); }
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 f92b 	bl	800661c <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4618      	mov	r0, r3
 80063ca:	f7ff fcbf 	bl	8005d4c <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE10_List_implD1Ev>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4618      	mov	r0, r3
 80063d2:	3708      	adds	r7, #8
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE5emptyEv>:
      /**
       *  Returns true if the %list is empty.  (Thus begin() would equal
       *  end().)
       */
      _GLIBCXX_NODISCARD bool
      empty() const _GLIBCXX_NOEXCEPT
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	bf0c      	ite	eq
 80063ea:	2301      	moveq	r3, #1
 80063ec:	2300      	movne	r3, #0
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	4618      	mov	r0, r3
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5frontEv>:
      /**
       *  Returns a read/write reference to the data at the first
       *  element of the %list.
       */
      reference
      front() _GLIBCXX_NOEXCEPT
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
      { return *begin(); }
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 f818 	bl	800643a <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 800640a:	4603      	mov	r3, r0
 800640c:	60fb      	str	r3, [r7, #12]
 800640e:	f107 030c 	add.w	r3, r7, #12
 8006412:	4618      	mov	r0, r3
 8006414:	f000 f836 	bl	8006484 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8006418:	4603      	mov	r3, r0
 800641a:	4618      	mov	r0, r3
 800641c:	3710      	adds	r7, #16
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}

08006422 <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8006422:	b580      	push	{r7, lr}
 8006424:	b082      	sub	sp, #8
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
      { return _M_node_count(); }
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 f91b 	bl	8006666 <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE13_M_node_countEv>
 8006430:	4603      	mov	r3, r0
 8006432:	4618      	mov	r0, r3
 8006434:	3708      	adds	r7, #8
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}

0800643a <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800643a:	b580      	push	{r7, lr}
 800643c:	b084      	sub	sp, #16
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_node._M_next); }
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	f107 030c 	add.w	r3, r7, #12
 800644a:	4611      	mov	r1, r2
 800644c:	4618      	mov	r0, r3
 800644e:	f000 f917 	bl	8006680 <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	4618      	mov	r0, r3
 8006456:	3710      	adds	r7, #16
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <_ZNSt14_List_iteratorIP9XFTimeoutEppEi>:
      operator++(int) _GLIBCXX_NOEXCEPT
 800645c:	b480      	push	{r7}
 800645e:	b085      	sub	sp, #20
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
	_Self __tmp = *this;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	60fb      	str	r3, [r7, #12]
	_M_node = _M_node->_M_next;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	601a      	str	r2, [r3, #0]
	return __tmp;
 8006476:	68fb      	ldr	r3, [r7, #12]
      }
 8006478:	4618      	mov	r0, r3
 800647a:	3714      	adds	r7, #20
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Node*>(_M_node)->_M_valptr(); }
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4618      	mov	r0, r3
 8006492:	f000 f904 	bl	800669e <_ZNSt10_List_nodeIP9XFTimeoutE9_M_valptrEv>
 8006496:	4603      	mov	r3, r0
 8006498:	4618      	mov	r0, r3
 800649a:	3708      	adds	r7, #8
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE9pop_frontEv>:
       *  Note that no data is returned, and if the first element's data
       *  is needed, it should be retrieved before pop_front() is
       *  called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
      { this->_M_erase(begin()); }
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f7ff ffc6 	bl	800643a <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 80064ae:	4603      	mov	r3, r0
 80064b0:	4619      	mov	r1, r3
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 f901 	bl	80066ba <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE8_M_eraseESt14_List_iteratorIS2_E>
 80064b8:	bf00      	nop
 80064ba:	3708      	adds	r7, #8
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_node); }
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	f107 030c 	add.w	r3, r7, #12
 80064ce:	4611      	mov	r1, r2
 80064d0:	4618      	mov	r0, r3
 80064d2:	f000 f8d5 	bl	8006680 <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	4618      	mov	r0, r3
 80064da:	3710      	adds	r7, #16
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <_ZStneRKSt14_List_iteratorIP9XFTimeoutES4_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	bf14      	ite	ne
 80064f6:	2301      	movne	r3, #1
 80064f8:	2300      	moveq	r3, #0
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	4618      	mov	r0, r3
 80064fe:	370c      	adds	r7, #12
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <_ZNSt20_List_const_iteratorIP9XFTimeoutEC1ERKSt14_List_iteratorIS1_E>:
      _List_const_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
      : _M_node(__x._M_node) { }
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	601a      	str	r2, [r3, #0]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4618      	mov	r0, r3
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5eraseESt20_List_const_iteratorIS2_E>:
      }
#endif

  template<typename _Tp, typename _Alloc>
    typename list<_Tp, _Alloc>::iterator
    list<_Tp, _Alloc>::
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
    erase(const_iterator __position) noexcept
#else
    erase(iterator __position)
#endif
    {
      iterator __ret = iterator(__position._M_node->_M_next);
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	f107 030c 	add.w	r3, r7, #12
 800653a:	4611      	mov	r1, r2
 800653c:	4618      	mov	r0, r3
 800653e:	f000 f89f 	bl	8006680 <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>
      _M_erase(__position._M_const_cast());
 8006542:	463b      	mov	r3, r7
 8006544:	4618      	mov	r0, r3
 8006546:	f000 f8de 	bl	8006706 <_ZNKSt20_List_const_iteratorIP9XFTimeoutE13_M_const_castEv>
 800654a:	4603      	mov	r3, r0
 800654c:	4619      	mov	r1, r3
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 f8b3 	bl	80066ba <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE8_M_eraseESt14_List_iteratorIS2_E>
      return __ret;
 8006554:	68fb      	ldr	r3, [r7, #12]
    }
 8006556:	4618      	mov	r0, r3
 8006558:	3710      	adds	r7, #16
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE10push_frontERKS2_>:
      push_front(const value_type& __x)
 800655e:	b580      	push	{r7, lr}
 8006560:	b082      	sub	sp, #8
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
 8006566:	6039      	str	r1, [r7, #0]
      { this->_M_insert(begin(), __x); }
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f7ff ff66 	bl	800643a <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 800656e:	4603      	mov	r3, r0
 8006570:	683a      	ldr	r2, [r7, #0]
 8006572:	4619      	mov	r1, r3
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 f8d7 	bl	8006728 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE9_M_insertIJRKS2_EEEvSt14_List_iteratorIS2_EDpOT_>
 800657a:	bf00      	nop
 800657c:	3708      	adds	r7, #8
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE6insertESt20_List_const_iteratorIS2_ERKS2_>:
    list<_Tp, _Alloc>::
 8006582:	b590      	push	{r4, r7, lr}
 8006584:	b087      	sub	sp, #28
 8006586:	af00      	add	r7, sp, #0
 8006588:	60f8      	str	r0, [r7, #12]
 800658a:	60b9      	str	r1, [r7, #8]
 800658c:	607a      	str	r2, [r7, #4]
      _Node* __tmp = _M_create_node(__x);
 800658e:	6879      	ldr	r1, [r7, #4]
 8006590:	68f8      	ldr	r0, [r7, #12]
 8006592:	f000 f8e7 	bl	8006764 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE14_M_create_nodeIJRKS2_EEEPSt10_List_nodeIS2_EDpOT_>
 8006596:	6178      	str	r0, [r7, #20]
      __tmp->_M_hook(__position._M_const_cast()._M_node);
 8006598:	697c      	ldr	r4, [r7, #20]
 800659a:	f107 0308 	add.w	r3, r7, #8
 800659e:	4618      	mov	r0, r3
 80065a0:	f000 f8b1 	bl	8006706 <_ZNKSt20_List_const_iteratorIP9XFTimeoutE13_M_const_castEv>
 80065a4:	4603      	mov	r3, r0
 80065a6:	4619      	mov	r1, r3
 80065a8:	4620      	mov	r0, r4
 80065aa:	f000 fa9c 	bl	8006ae6 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      this->_M_inc_size(1);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2101      	movs	r1, #1
 80065b2:	4618      	mov	r0, r3
 80065b4:	f000 f90a 	bl	80067cc <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_inc_sizeEj>
      return iterator(__tmp);
 80065b8:	f107 0310 	add.w	r3, r7, #16
 80065bc:	6979      	ldr	r1, [r7, #20]
 80065be:	4618      	mov	r0, r3
 80065c0:	f000 f85e 	bl	8006680 <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>
 80065c4:	693b      	ldr	r3, [r7, #16]
    }
 80065c6:	4618      	mov	r0, r3
 80065c8:	371c      	adds	r7, #28
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd90      	pop	{r4, r7, pc}

080065ce <_ZNSt14_List_iteratorIP9XFTimeoutEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80065ce:	b480      	push	{r7}
 80065d0:	b083      	sub	sp, #12
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
	_M_node = _M_node->_M_next;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	601a      	str	r2, [r3, #0]
	return *this;
 80065e0:	687b      	ldr	r3, [r7, #4]
      }
 80065e2:	4618      	mov	r0, r3
 80065e4:	370c      	adds	r7, #12
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr

080065ee <_ZNSaISt10_List_nodeIP9XFTimeoutEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80065ee:	b580      	push	{r7, lr}
 80065f0:	b082      	sub	sp, #8
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 f8f9 	bl	80067ee <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEEC1Ev>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4618      	mov	r0, r3
 8006600:	3708      	adds	r7, #8
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}

08006606 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006606:	b480      	push	{r7}
 8006608:	b083      	sub	sp, #12
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4618      	mov	r0, r3
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv>:
    _List_base<_Tp, _Alloc>::
 800661c:	b580      	push	{r7, lr}
 800661e:	b086      	sub	sp, #24
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	617b      	str	r3, [r7, #20]
      while (__cur != &_M_impl._M_node)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	697a      	ldr	r2, [r7, #20]
 800662e:	429a      	cmp	r2, r3
 8006630:	d015      	beq.n	800665e <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv+0x42>
	  _Node* __tmp = static_cast<_Node*>(__cur);
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	613b      	str	r3, [r7, #16]
	  __cur = __tmp->_M_next;
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	617b      	str	r3, [r7, #20]
	  _Tp* __val = __tmp->_M_valptr();
 800663c:	6938      	ldr	r0, [r7, #16]
 800663e:	f000 f82e 	bl	800669e <_ZNSt10_List_nodeIP9XFTimeoutE9_M_valptrEv>
 8006642:	60f8      	str	r0, [r7, #12]
	  _Node_alloc_traits::destroy(_M_get_Node_allocator(), __val);
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 f8dd 	bl	8006804 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE21_M_get_Node_allocatorEv>
 800664a:	4603      	mov	r3, r0
 800664c:	68f9      	ldr	r1, [r7, #12]
 800664e:	4618      	mov	r0, r3
 8006650:	f000 f8e3 	bl	800681a <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE7destroyIS2_EEvRS4_PT_>
	  _M_put_node(__tmp);
 8006654:	6939      	ldr	r1, [r7, #16]
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 f8ec 	bl	8006834 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_put_nodeEPSt10_List_nodeIS2_E>
      while (__cur != &_M_impl._M_node)
 800665c:	e7e5      	b.n	800662a <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv+0xe>
    }
 800665e:	bf00      	nop
 8006660:	3718      	adds	r7, #24
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}

08006666 <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE13_M_node_countEv>:
      _M_node_count() const
 8006666:	b580      	push	{r7, lr}
 8006668:	b082      	sub	sp, #8
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
      { return this->_M_get_size(); }
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4618      	mov	r0, r3
 8006672:	f000 f8ee 	bl	8006852 <_ZNKSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_get_sizeEv>
 8006676:	4603      	mov	r3, r0
 8006678:	4618      	mov	r0, r3
 800667a:	3708      	adds	r7, #8
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>:
      _List_iterator(__detail::_List_node_base* __x) _GLIBCXX_NOEXCEPT
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	683a      	ldr	r2, [r7, #0]
 800668e:	601a      	str	r2, [r3, #0]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4618      	mov	r0, r3
 8006694:	370c      	adds	r7, #12
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr

0800669e <_ZNSt10_List_nodeIP9XFTimeoutE9_M_valptrEv>:
      _Tp*       _M_valptr()       { return _M_storage._M_ptr(); }
 800669e:	b580      	push	{r7, lr}
 80066a0:	b082      	sub	sp, #8
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	3308      	adds	r3, #8
 80066aa:	4618      	mov	r0, r3
 80066ac:	f000 f8dd 	bl	800686a <_ZN9__gnu_cxx16__aligned_membufIP9XFTimeoutE6_M_ptrEv>
 80066b0:	4603      	mov	r3, r0
 80066b2:	4618      	mov	r0, r3
 80066b4:	3708      	adds	r7, #8
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}

080066ba <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE8_M_eraseESt14_List_iteratorIS2_E>:
       }
#endif

      // Erases element at position given.
      void
      _M_erase(iterator __position) _GLIBCXX_NOEXCEPT
 80066ba:	b590      	push	{r4, r7, lr}
 80066bc:	b085      	sub	sp, #20
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
 80066c2:	6039      	str	r1, [r7, #0]
      {
	this->_M_dec_size(1);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2101      	movs	r1, #1
 80066c8:	4618      	mov	r0, r3
 80066ca:	f000 f8da 	bl	8006882 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_dec_sizeEj>
	__position._M_node->_M_unhook();
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	4618      	mov	r0, r3
 80066d2:	f000 fa0f 	bl	8006af4 <_ZNSt8__detail15_List_node_base9_M_unhookEv>
	_Node* __n = static_cast<_Node*>(__position._M_node);
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	60fb      	str	r3, [r7, #12]
#if __cplusplus >= 201103L
	_Node_alloc_traits::destroy(_M_get_Node_allocator(), __n->_M_valptr());
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4618      	mov	r0, r3
 80066de:	f000 f891 	bl	8006804 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE21_M_get_Node_allocatorEv>
 80066e2:	4604      	mov	r4, r0
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f7ff ffda 	bl	800669e <_ZNSt10_List_nodeIP9XFTimeoutE9_M_valptrEv>
 80066ea:	4603      	mov	r3, r0
 80066ec:	4619      	mov	r1, r3
 80066ee:	4620      	mov	r0, r4
 80066f0:	f000 f893 	bl	800681a <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE7destroyIS2_EEvRS4_PT_>
#else
	_Tp_alloc_type(_M_get_Node_allocator()).destroy(__n->_M_valptr());
#endif

	_M_put_node(__n);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	68f9      	ldr	r1, [r7, #12]
 80066f8:	4618      	mov	r0, r3
 80066fa:	f000 f89b 	bl	8006834 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_put_nodeEPSt10_List_nodeIS2_E>
      }
 80066fe:	bf00      	nop
 8006700:	3714      	adds	r7, #20
 8006702:	46bd      	mov	sp, r7
 8006704:	bd90      	pop	{r4, r7, pc}

08006706 <_ZNKSt20_List_const_iteratorIP9XFTimeoutE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8006706:	b580      	push	{r7, lr}
 8006708:	b084      	sub	sp, #16
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<__detail::_List_node_base*>(_M_node)); }
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	f107 030c 	add.w	r3, r7, #12
 8006716:	4611      	mov	r1, r2
 8006718:	4618      	mov	r0, r3
 800671a:	f7ff ffb1 	bl	8006680 <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	4618      	mov	r0, r3
 8006722:	3710      	adds	r7, #16
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE9_M_insertIJRKS2_EEEvSt14_List_iteratorIS2_EDpOT_>:
       _M_insert(iterator __position, _Args&&... __args)
 8006728:	b580      	push	{r7, lr}
 800672a:	b086      	sub	sp, #24
 800672c:	af00      	add	r7, sp, #0
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	607a      	str	r2, [r7, #4]
	 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 f8b5 	bl	80068a4 <_ZSt7forwardIRKP9XFTimeoutEOT_RNSt16remove_referenceIS4_E4typeE>
 800673a:	4603      	mov	r3, r0
 800673c:	4619      	mov	r1, r3
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f000 f810 	bl	8006764 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE14_M_create_nodeIJRKS2_EEEPSt10_List_nodeIS2_EDpOT_>
 8006744:	6178      	str	r0, [r7, #20]
	 __tmp->_M_hook(__position._M_node);
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	68ba      	ldr	r2, [r7, #8]
 800674a:	4611      	mov	r1, r2
 800674c:	4618      	mov	r0, r3
 800674e:	f000 f9ca 	bl	8006ae6 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
	 this->_M_inc_size(1);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2101      	movs	r1, #1
 8006756:	4618      	mov	r0, r3
 8006758:	f000 f838 	bl	80067cc <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_inc_sizeEj>
       }
 800675c:	bf00      	nop
 800675e:	3718      	adds	r7, #24
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE14_M_create_nodeIJRKS2_EEEPSt10_List_nodeIS2_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8006764:	b590      	push	{r4, r7, lr}
 8006766:	b087      	sub	sp, #28
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
	  auto __p = this->_M_get_node();
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4618      	mov	r0, r3
 8006772:	f000 f8a2 	bl	80068ba <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_get_nodeEv>
 8006776:	6178      	str	r0, [r7, #20]
	  auto& __alloc = _M_get_Node_allocator();
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4618      	mov	r0, r3
 800677c:	f000 f842 	bl	8006804 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE21_M_get_Node_allocatorEv>
 8006780:	6138      	str	r0, [r7, #16]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 8006782:	f107 0308 	add.w	r3, r7, #8
 8006786:	697a      	ldr	r2, [r7, #20]
 8006788:	6939      	ldr	r1, [r7, #16]
 800678a:	4618      	mov	r0, r3
 800678c:	f000 f8a3 	bl	80068d6 <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEEC1ERS4_PS3_>
	  _Node_alloc_traits::construct(__alloc, __p->_M_valptr(),
 8006790:	6978      	ldr	r0, [r7, #20]
 8006792:	f7ff ff84 	bl	800669e <_ZNSt10_List_nodeIP9XFTimeoutE9_M_valptrEv>
 8006796:	4604      	mov	r4, r0
 8006798:	6838      	ldr	r0, [r7, #0]
 800679a:	f000 f883 	bl	80068a4 <_ZSt7forwardIRKP9XFTimeoutEOT_RNSt16remove_referenceIS4_E4typeE>
 800679e:	4603      	mov	r3, r0
 80067a0:	461a      	mov	r2, r3
 80067a2:	4621      	mov	r1, r4
 80067a4:	6938      	ldr	r0, [r7, #16]
 80067a6:	f000 f8bf 	bl	8006928 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE9constructIS2_JRKS2_EEEvRS4_PT_DpOT0_>
	  __guard = nullptr;
 80067aa:	f107 0308 	add.w	r3, r7, #8
 80067ae:	2100      	movs	r1, #0
 80067b0:	4618      	mov	r0, r3
 80067b2:	f000 f8cc 	bl	800694e <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEEaSEDn>
	  return __p;
 80067b6:	697c      	ldr	r4, [r7, #20]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 80067b8:	f107 0308 	add.w	r3, r7, #8
 80067bc:	4618      	mov	r0, r3
 80067be:	f000 f89e 	bl	80068fe <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEED1Ev>
	  return __p;
 80067c2:	4623      	mov	r3, r4
	}
 80067c4:	4618      	mov	r0, r3
 80067c6:	371c      	adds	r7, #28
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd90      	pop	{r4, r7, pc}

080067cc <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_inc_sizeEj>:
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	689a      	ldr	r2, [r3, #8]
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	441a      	add	r2, r3
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	609a      	str	r2, [r3, #8]
 80067e2:	bf00      	nop
 80067e4:	370c      	adds	r7, #12
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr

080067ee <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80067ee:	b480      	push	{r7}
 80067f0:	b083      	sub	sp, #12
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4618      	mov	r0, r3
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
      { return _M_impl; }
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4618      	mov	r0, r3
 8006810:	370c      	adds	r7, #12
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr

0800681a <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE7destroyIS2_EEvRS4_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800681a:	b580      	push	{r7, lr}
 800681c:	b082      	sub	sp, #8
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
 8006822:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8006824:	6839      	ldr	r1, [r7, #0]
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f8a0 	bl	800696c <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE7destroyIS3_EEvPT_>
	}
 800682c:	bf00      	nop
 800682e:	3708      	adds	r7, #8
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_put_nodeEPSt10_List_nodeIS2_E>:
      _M_put_node(typename _Node_alloc_traits::pointer __p) _GLIBCXX_NOEXCEPT
 8006834:	b580      	push	{r7, lr}
 8006836:	b082      	sub	sp, #8
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
      { _Node_alloc_traits::deallocate(_M_impl, __p, 1); }
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2201      	movs	r2, #1
 8006842:	6839      	ldr	r1, [r7, #0]
 8006844:	4618      	mov	r0, r3
 8006846:	f000 f89c 	bl	8006982 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE10deallocateERS4_PS3_j>
 800684a:	bf00      	nop
 800684c:	3708      	adds	r7, #8
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}

08006852 <_ZNKSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_get_sizeEv>:
      size_t _M_get_size() const { return _M_impl._M_node._M_size; }
 8006852:	b480      	push	{r7}
 8006854:	b083      	sub	sp, #12
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	4618      	mov	r0, r3
 8006860:	370c      	adds	r7, #12
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr

0800686a <_ZN9__gnu_cxx16__aligned_membufIP9XFTimeoutE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 800686a:	b580      	push	{r7, lr}
 800686c:	b082      	sub	sp, #8
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 f894 	bl	80069a0 <_ZN9__gnu_cxx16__aligned_membufIP9XFTimeoutE7_M_addrEv>
 8006878:	4603      	mov	r3, r0
 800687a:	4618      	mov	r0, r3
 800687c:	3708      	adds	r7, #8
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_dec_sizeEj>:
      void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
 8006882:	b480      	push	{r7}
 8006884:	b083      	sub	sp, #12
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
 800688a:	6039      	str	r1, [r7, #0]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	689a      	ldr	r2, [r3, #8]
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	1ad2      	subs	r2, r2, r3
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	609a      	str	r2, [r3, #8]
 8006898:	bf00      	nop
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <_ZSt7forwardIRKP9XFTimeoutEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4618      	mov	r0, r3
 80068b0:	370c      	adds	r7, #12
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr

080068ba <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_get_nodeEv>:
      _M_get_node()
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b082      	sub	sp, #8
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
      { return _Node_alloc_traits::allocate(_M_impl, 1); }
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2101      	movs	r1, #1
 80068c6:	4618      	mov	r0, r3
 80068c8:	f000 f875 	bl	80069b6 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE8allocateERS4_j>
 80068cc:	4603      	mov	r3, r0
 80068ce:	4618      	mov	r0, r3
 80068d0:	3708      	adds	r7, #8
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEEC1ERS4_PS3_>:
    {
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 80068d6:	b580      	push	{r7, lr}
 80068d8:	b084      	sub	sp, #16
 80068da:	af00      	add	r7, sp, #0
 80068dc:	60f8      	str	r0, [r7, #12]
 80068de:	60b9      	str	r1, [r7, #8]
 80068e0:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 80068e2:	68b8      	ldr	r0, [r7, #8]
 80068e4:	f000 f876 	bl	80069d4 <_ZSt11__addressofISaISt10_List_nodeIP9XFTimeoutEEEPT_RS5_>
 80068e8:	4602      	mov	r2, r0
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	601a      	str	r2, [r3, #0]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	605a      	str	r2, [r3, #4]
      { }
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	4618      	mov	r0, r3
 80068f8:	3710      	adds	r7, #16
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}

080068fe <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
 80068fe:	b580      	push	{r7, lr}
 8006900:	b082      	sub	sp, #8
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
      {
	if (_M_ptr != nullptr)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d007      	beq.n	800691e <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6818      	ldr	r0, [r3, #0]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	4619      	mov	r1, r3
 800691a:	f000 f832 	bl	8006982 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE10deallocateERS4_PS3_j>
      }
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4618      	mov	r0, r3
 8006922:	3708      	adds	r7, #8
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE9constructIS2_JRKS2_EEEvRS4_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f7ff ffb5 	bl	80068a4 <_ZSt7forwardIRKP9XFTimeoutEOT_RNSt16remove_referenceIS4_E4typeE>
 800693a:	4603      	mov	r3, r0
 800693c:	461a      	mov	r2, r3
 800693e:	68b9      	ldr	r1, [r7, #8]
 8006940:	68f8      	ldr	r0, [r7, #12]
 8006942:	f000 f852 	bl	80069ea <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE9constructIS3_JRKS3_EEEvPT_DpOT0_>
	}
 8006946:	bf00      	nop
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEEaSEDn>:

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
 800694e:	b480      	push	{r7}
 8006950:	b083      	sub	sp, #12
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
 8006956:	6039      	str	r1, [r7, #0]
      {
	_M_ptr = nullptr;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	605a      	str	r2, [r3, #4]
	return *this;
 800695e:	687b      	ldr	r3, [r7, #4]
      }
 8006960:	4618      	mov	r0, r3
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE7destroyIS3_EEvPT_>:
	destroy(_Up* __p)
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8006976:	bf00      	nop
 8006978:	370c      	adds	r7, #12
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr

08006982 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE10deallocateERS4_PS3_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8006982:	b580      	push	{r7, lr}
 8006984:	b084      	sub	sp, #16
 8006986:	af00      	add	r7, sp, #0
 8006988:	60f8      	str	r0, [r7, #12]
 800698a:	60b9      	str	r1, [r7, #8]
 800698c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	68b9      	ldr	r1, [r7, #8]
 8006992:	68f8      	ldr	r0, [r7, #12]
 8006994:	f000 f83f 	bl	8006a16 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE10deallocateEPS4_j>
 8006998:	bf00      	nop
 800699a:	3710      	adds	r7, #16
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <_ZN9__gnu_cxx16__aligned_membufIP9XFTimeoutE7_M_addrEv>:
      _M_addr() noexcept
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4618      	mov	r0, r3
 80069ac:	370c      	adds	r7, #12
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr

080069b6 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE8allocateERS4_j>:
      allocate(allocator_type& __a, size_type __n)
 80069b6:	b580      	push	{r7, lr}
 80069b8:	b082      	sub	sp, #8
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
 80069be:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80069c0:	2200      	movs	r2, #0
 80069c2:	6839      	ldr	r1, [r7, #0]
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 f839 	bl	8006a3c <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8allocateEjPKv>
 80069ca:	4603      	mov	r3, r0
 80069cc:	4618      	mov	r0, r3
 80069ce:	3708      	adds	r7, #8
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <_ZSt11__addressofISaISt10_List_nodeIP9XFTimeoutEEEPT_RS5_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4618      	mov	r0, r3
 80069e0:	370c      	adds	r7, #12
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr

080069ea <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE9constructIS3_JRKS3_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80069ea:	b590      	push	{r4, r7, lr}
 80069ec:	b085      	sub	sp, #20
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	60f8      	str	r0, [r7, #12]
 80069f2:	60b9      	str	r1, [r7, #8]
 80069f4:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f7ff ff54 	bl	80068a4 <_ZSt7forwardIRKP9XFTimeoutEOT_RNSt16remove_referenceIS4_E4typeE>
 80069fc:	4603      	mov	r3, r0
 80069fe:	681c      	ldr	r4, [r3, #0]
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	4619      	mov	r1, r3
 8006a04:	2004      	movs	r0, #4
 8006a06:	f7fe f861 	bl	8004acc <_ZnwjPv>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	601c      	str	r4, [r3, #0]
 8006a0e:	bf00      	nop
 8006a10:	3714      	adds	r7, #20
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd90      	pop	{r4, r7, pc}

08006a16 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE10deallocateEPS4_j>:
      deallocate(_Tp* __p, size_type __t)
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b084      	sub	sp, #16
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	60f8      	str	r0, [r7, #12]
 8006a1e:	60b9      	str	r1, [r7, #8]
 8006a20:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	4613      	mov	r3, r2
 8006a26:	005b      	lsls	r3, r3, #1
 8006a28:	4413      	add	r3, r2
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	68b8      	ldr	r0, [r7, #8]
 8006a30:	f000 f834 	bl	8006a9c <_ZdlPvj>
      }
 8006a34:	bf00      	nop
 8006a36:	3710      	adds	r7, #16
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8006a48:	68f8      	ldr	r0, [r7, #12]
 8006a4a:	f000 f819 	bl	8006a80 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE11_M_max_sizeEv>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	4293      	cmp	r3, r2
 8006a54:	bf8c      	ite	hi
 8006a56:	2301      	movhi	r3, #1
 8006a58:	2300      	movls	r3, #0
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d001      	beq.n	8006a64 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8006a60:	f000 f84d 	bl	8006afe <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006a64:	68ba      	ldr	r2, [r7, #8]
 8006a66:	4613      	mov	r3, r2
 8006a68:	005b      	lsls	r3, r3, #1
 8006a6a:	4413      	add	r3, r2
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f000 f825 	bl	8006abe <_Znwj>
 8006a74:	4603      	mov	r3, r0
      }
 8006a76:	4618      	mov	r0, r3
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
	...

08006a80 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8006a88:	4b03      	ldr	r3, [pc, #12]	; (8006a98 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE11_M_max_sizeEv+0x18>)
      }
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	370c      	adds	r7, #12
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr
 8006a96:	bf00      	nop
 8006a98:	0aaaaaaa 	.word	0x0aaaaaaa

08006a9c <_ZdlPvj>:
 8006a9c:	f000 b835 	b.w	8006b0a <_ZdlPv>

08006aa0 <__cxa_guard_acquire>:
 8006aa0:	6803      	ldr	r3, [r0, #0]
 8006aa2:	07db      	lsls	r3, r3, #31
 8006aa4:	d406      	bmi.n	8006ab4 <__cxa_guard_acquire+0x14>
 8006aa6:	7843      	ldrb	r3, [r0, #1]
 8006aa8:	b103      	cbz	r3, 8006aac <__cxa_guard_acquire+0xc>
 8006aaa:	deff      	udf	#255	; 0xff
 8006aac:	2301      	movs	r3, #1
 8006aae:	7043      	strb	r3, [r0, #1]
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	4770      	bx	lr
 8006ab4:	2000      	movs	r0, #0
 8006ab6:	4770      	bx	lr

08006ab8 <__cxa_guard_release>:
 8006ab8:	2301      	movs	r3, #1
 8006aba:	6003      	str	r3, [r0, #0]
 8006abc:	4770      	bx	lr

08006abe <_Znwj>:
 8006abe:	2801      	cmp	r0, #1
 8006ac0:	bf38      	it	cc
 8006ac2:	2001      	movcc	r0, #1
 8006ac4:	b510      	push	{r4, lr}
 8006ac6:	4604      	mov	r4, r0
 8006ac8:	4620      	mov	r0, r4
 8006aca:	f000 f8a3 	bl	8006c14 <malloc>
 8006ace:	b930      	cbnz	r0, 8006ade <_Znwj+0x20>
 8006ad0:	f000 f830 	bl	8006b34 <_ZSt15get_new_handlerv>
 8006ad4:	b908      	cbnz	r0, 8006ada <_Znwj+0x1c>
 8006ad6:	f000 f835 	bl	8006b44 <abort>
 8006ada:	4780      	blx	r0
 8006adc:	e7f4      	b.n	8006ac8 <_Znwj+0xa>
 8006ade:	bd10      	pop	{r4, pc}

08006ae0 <__cxa_pure_virtual>:
 8006ae0:	b508      	push	{r3, lr}
 8006ae2:	f000 f821 	bl	8006b28 <_ZSt9terminatev>

08006ae6 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>:
 8006ae6:	684b      	ldr	r3, [r1, #4]
 8006ae8:	6043      	str	r3, [r0, #4]
 8006aea:	684b      	ldr	r3, [r1, #4]
 8006aec:	6001      	str	r1, [r0, #0]
 8006aee:	6018      	str	r0, [r3, #0]
 8006af0:	6048      	str	r0, [r1, #4]
 8006af2:	4770      	bx	lr

08006af4 <_ZNSt8__detail15_List_node_base9_M_unhookEv>:
 8006af4:	e9d0 3200 	ldrd	r3, r2, [r0]
 8006af8:	6013      	str	r3, [r2, #0]
 8006afa:	605a      	str	r2, [r3, #4]
 8006afc:	4770      	bx	lr

08006afe <_ZSt17__throw_bad_allocv>:
 8006afe:	b508      	push	{r3, lr}
 8006b00:	f000 f820 	bl	8006b44 <abort>

08006b04 <_ZSt20__throw_length_errorPKc>:
 8006b04:	b508      	push	{r3, lr}
 8006b06:	f000 f81d 	bl	8006b44 <abort>

08006b0a <_ZdlPv>:
 8006b0a:	f000 b88b 	b.w	8006c24 <free>

08006b0e <_ZN10__cxxabiv111__terminateEPFvvE>:
 8006b0e:	b508      	push	{r3, lr}
 8006b10:	4780      	blx	r0
 8006b12:	f000 f817 	bl	8006b44 <abort>
	...

08006b18 <_ZSt13get_terminatev>:
 8006b18:	4b02      	ldr	r3, [pc, #8]	; (8006b24 <_ZSt13get_terminatev+0xc>)
 8006b1a:	6818      	ldr	r0, [r3, #0]
 8006b1c:	f3bf 8f5b 	dmb	ish
 8006b20:	4770      	bx	lr
 8006b22:	bf00      	nop
 8006b24:	2000001c 	.word	0x2000001c

08006b28 <_ZSt9terminatev>:
 8006b28:	b508      	push	{r3, lr}
 8006b2a:	f7ff fff5 	bl	8006b18 <_ZSt13get_terminatev>
 8006b2e:	f7ff ffee 	bl	8006b0e <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08006b34 <_ZSt15get_new_handlerv>:
 8006b34:	4b02      	ldr	r3, [pc, #8]	; (8006b40 <_ZSt15get_new_handlerv+0xc>)
 8006b36:	6818      	ldr	r0, [r3, #0]
 8006b38:	f3bf 8f5b 	dmb	ish
 8006b3c:	4770      	bx	lr
 8006b3e:	bf00      	nop
 8006b40:	20000358 	.word	0x20000358

08006b44 <abort>:
 8006b44:	b508      	push	{r3, lr}
 8006b46:	2006      	movs	r0, #6
 8006b48:	f000 fcaa 	bl	80074a0 <raise>
 8006b4c:	2001      	movs	r0, #1
 8006b4e:	f7f9 fef1 	bl	8000934 <_exit>
	...

08006b54 <__assert_func>:
 8006b54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b56:	4614      	mov	r4, r2
 8006b58:	461a      	mov	r2, r3
 8006b5a:	4b09      	ldr	r3, [pc, #36]	; (8006b80 <__assert_func+0x2c>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4605      	mov	r5, r0
 8006b60:	68d8      	ldr	r0, [r3, #12]
 8006b62:	b14c      	cbz	r4, 8006b78 <__assert_func+0x24>
 8006b64:	4b07      	ldr	r3, [pc, #28]	; (8006b84 <__assert_func+0x30>)
 8006b66:	9100      	str	r1, [sp, #0]
 8006b68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006b6c:	4906      	ldr	r1, [pc, #24]	; (8006b88 <__assert_func+0x34>)
 8006b6e:	462b      	mov	r3, r5
 8006b70:	f000 f81a 	bl	8006ba8 <fiprintf>
 8006b74:	f7ff ffe6 	bl	8006b44 <abort>
 8006b78:	4b04      	ldr	r3, [pc, #16]	; (8006b8c <__assert_func+0x38>)
 8006b7a:	461c      	mov	r4, r3
 8006b7c:	e7f3      	b.n	8006b66 <__assert_func+0x12>
 8006b7e:	bf00      	nop
 8006b80:	20000020 	.word	0x20000020
 8006b84:	08008758 	.word	0x08008758
 8006b88:	08008765 	.word	0x08008765
 8006b8c:	08008793 	.word	0x08008793

08006b90 <atexit>:
 8006b90:	2300      	movs	r3, #0
 8006b92:	4601      	mov	r1, r0
 8006b94:	461a      	mov	r2, r3
 8006b96:	4618      	mov	r0, r3
 8006b98:	f000 bd7e 	b.w	8007698 <__register_exitproc>

08006b9c <__errno>:
 8006b9c:	4b01      	ldr	r3, [pc, #4]	; (8006ba4 <__errno+0x8>)
 8006b9e:	6818      	ldr	r0, [r3, #0]
 8006ba0:	4770      	bx	lr
 8006ba2:	bf00      	nop
 8006ba4:	20000020 	.word	0x20000020

08006ba8 <fiprintf>:
 8006ba8:	b40e      	push	{r1, r2, r3}
 8006baa:	b503      	push	{r0, r1, lr}
 8006bac:	4601      	mov	r1, r0
 8006bae:	ab03      	add	r3, sp, #12
 8006bb0:	4805      	ldr	r0, [pc, #20]	; (8006bc8 <fiprintf+0x20>)
 8006bb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bb6:	6800      	ldr	r0, [r0, #0]
 8006bb8:	9301      	str	r3, [sp, #4]
 8006bba:	f000 f975 	bl	8006ea8 <_vfiprintf_r>
 8006bbe:	b002      	add	sp, #8
 8006bc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bc4:	b003      	add	sp, #12
 8006bc6:	4770      	bx	lr
 8006bc8:	20000020 	.word	0x20000020

08006bcc <__libc_init_array>:
 8006bcc:	b570      	push	{r4, r5, r6, lr}
 8006bce:	4d0d      	ldr	r5, [pc, #52]	; (8006c04 <__libc_init_array+0x38>)
 8006bd0:	4c0d      	ldr	r4, [pc, #52]	; (8006c08 <__libc_init_array+0x3c>)
 8006bd2:	1b64      	subs	r4, r4, r5
 8006bd4:	10a4      	asrs	r4, r4, #2
 8006bd6:	2600      	movs	r6, #0
 8006bd8:	42a6      	cmp	r6, r4
 8006bda:	d109      	bne.n	8006bf0 <__libc_init_array+0x24>
 8006bdc:	4d0b      	ldr	r5, [pc, #44]	; (8006c0c <__libc_init_array+0x40>)
 8006bde:	4c0c      	ldr	r4, [pc, #48]	; (8006c10 <__libc_init_array+0x44>)
 8006be0:	f001 fa26 	bl	8008030 <_init>
 8006be4:	1b64      	subs	r4, r4, r5
 8006be6:	10a4      	asrs	r4, r4, #2
 8006be8:	2600      	movs	r6, #0
 8006bea:	42a6      	cmp	r6, r4
 8006bec:	d105      	bne.n	8006bfa <__libc_init_array+0x2e>
 8006bee:	bd70      	pop	{r4, r5, r6, pc}
 8006bf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bf4:	4798      	blx	r3
 8006bf6:	3601      	adds	r6, #1
 8006bf8:	e7ee      	b.n	8006bd8 <__libc_init_array+0xc>
 8006bfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bfe:	4798      	blx	r3
 8006c00:	3601      	adds	r6, #1
 8006c02:	e7f2      	b.n	8006bea <__libc_init_array+0x1e>
 8006c04:	08008834 	.word	0x08008834
 8006c08:	08008834 	.word	0x08008834
 8006c0c:	08008834 	.word	0x08008834
 8006c10:	0800883c 	.word	0x0800883c

08006c14 <malloc>:
 8006c14:	4b02      	ldr	r3, [pc, #8]	; (8006c20 <malloc+0xc>)
 8006c16:	4601      	mov	r1, r0
 8006c18:	6818      	ldr	r0, [r3, #0]
 8006c1a:	f000 b8a7 	b.w	8006d6c <_malloc_r>
 8006c1e:	bf00      	nop
 8006c20:	20000020 	.word	0x20000020

08006c24 <free>:
 8006c24:	4b02      	ldr	r3, [pc, #8]	; (8006c30 <free+0xc>)
 8006c26:	4601      	mov	r1, r0
 8006c28:	6818      	ldr	r0, [r3, #0]
 8006c2a:	f000 b833 	b.w	8006c94 <_free_r>
 8006c2e:	bf00      	nop
 8006c30:	20000020 	.word	0x20000020

08006c34 <memcpy>:
 8006c34:	440a      	add	r2, r1
 8006c36:	4291      	cmp	r1, r2
 8006c38:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c3c:	d100      	bne.n	8006c40 <memcpy+0xc>
 8006c3e:	4770      	bx	lr
 8006c40:	b510      	push	{r4, lr}
 8006c42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c4a:	4291      	cmp	r1, r2
 8006c4c:	d1f9      	bne.n	8006c42 <memcpy+0xe>
 8006c4e:	bd10      	pop	{r4, pc}

08006c50 <memmove>:
 8006c50:	4288      	cmp	r0, r1
 8006c52:	b510      	push	{r4, lr}
 8006c54:	eb01 0402 	add.w	r4, r1, r2
 8006c58:	d902      	bls.n	8006c60 <memmove+0x10>
 8006c5a:	4284      	cmp	r4, r0
 8006c5c:	4623      	mov	r3, r4
 8006c5e:	d807      	bhi.n	8006c70 <memmove+0x20>
 8006c60:	1e43      	subs	r3, r0, #1
 8006c62:	42a1      	cmp	r1, r4
 8006c64:	d008      	beq.n	8006c78 <memmove+0x28>
 8006c66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c6e:	e7f8      	b.n	8006c62 <memmove+0x12>
 8006c70:	4402      	add	r2, r0
 8006c72:	4601      	mov	r1, r0
 8006c74:	428a      	cmp	r2, r1
 8006c76:	d100      	bne.n	8006c7a <memmove+0x2a>
 8006c78:	bd10      	pop	{r4, pc}
 8006c7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006c82:	e7f7      	b.n	8006c74 <memmove+0x24>

08006c84 <memset>:
 8006c84:	4402      	add	r2, r0
 8006c86:	4603      	mov	r3, r0
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d100      	bne.n	8006c8e <memset+0xa>
 8006c8c:	4770      	bx	lr
 8006c8e:	f803 1b01 	strb.w	r1, [r3], #1
 8006c92:	e7f9      	b.n	8006c88 <memset+0x4>

08006c94 <_free_r>:
 8006c94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c96:	2900      	cmp	r1, #0
 8006c98:	d044      	beq.n	8006d24 <_free_r+0x90>
 8006c9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c9e:	9001      	str	r0, [sp, #4]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f1a1 0404 	sub.w	r4, r1, #4
 8006ca6:	bfb8      	it	lt
 8006ca8:	18e4      	addlt	r4, r4, r3
 8006caa:	f000 ff77 	bl	8007b9c <__malloc_lock>
 8006cae:	4a1e      	ldr	r2, [pc, #120]	; (8006d28 <_free_r+0x94>)
 8006cb0:	9801      	ldr	r0, [sp, #4]
 8006cb2:	6813      	ldr	r3, [r2, #0]
 8006cb4:	b933      	cbnz	r3, 8006cc4 <_free_r+0x30>
 8006cb6:	6063      	str	r3, [r4, #4]
 8006cb8:	6014      	str	r4, [r2, #0]
 8006cba:	b003      	add	sp, #12
 8006cbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006cc0:	f000 bf72 	b.w	8007ba8 <__malloc_unlock>
 8006cc4:	42a3      	cmp	r3, r4
 8006cc6:	d908      	bls.n	8006cda <_free_r+0x46>
 8006cc8:	6825      	ldr	r5, [r4, #0]
 8006cca:	1961      	adds	r1, r4, r5
 8006ccc:	428b      	cmp	r3, r1
 8006cce:	bf01      	itttt	eq
 8006cd0:	6819      	ldreq	r1, [r3, #0]
 8006cd2:	685b      	ldreq	r3, [r3, #4]
 8006cd4:	1949      	addeq	r1, r1, r5
 8006cd6:	6021      	streq	r1, [r4, #0]
 8006cd8:	e7ed      	b.n	8006cb6 <_free_r+0x22>
 8006cda:	461a      	mov	r2, r3
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	b10b      	cbz	r3, 8006ce4 <_free_r+0x50>
 8006ce0:	42a3      	cmp	r3, r4
 8006ce2:	d9fa      	bls.n	8006cda <_free_r+0x46>
 8006ce4:	6811      	ldr	r1, [r2, #0]
 8006ce6:	1855      	adds	r5, r2, r1
 8006ce8:	42a5      	cmp	r5, r4
 8006cea:	d10b      	bne.n	8006d04 <_free_r+0x70>
 8006cec:	6824      	ldr	r4, [r4, #0]
 8006cee:	4421      	add	r1, r4
 8006cf0:	1854      	adds	r4, r2, r1
 8006cf2:	42a3      	cmp	r3, r4
 8006cf4:	6011      	str	r1, [r2, #0]
 8006cf6:	d1e0      	bne.n	8006cba <_free_r+0x26>
 8006cf8:	681c      	ldr	r4, [r3, #0]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	6053      	str	r3, [r2, #4]
 8006cfe:	4421      	add	r1, r4
 8006d00:	6011      	str	r1, [r2, #0]
 8006d02:	e7da      	b.n	8006cba <_free_r+0x26>
 8006d04:	d902      	bls.n	8006d0c <_free_r+0x78>
 8006d06:	230c      	movs	r3, #12
 8006d08:	6003      	str	r3, [r0, #0]
 8006d0a:	e7d6      	b.n	8006cba <_free_r+0x26>
 8006d0c:	6825      	ldr	r5, [r4, #0]
 8006d0e:	1961      	adds	r1, r4, r5
 8006d10:	428b      	cmp	r3, r1
 8006d12:	bf04      	itt	eq
 8006d14:	6819      	ldreq	r1, [r3, #0]
 8006d16:	685b      	ldreq	r3, [r3, #4]
 8006d18:	6063      	str	r3, [r4, #4]
 8006d1a:	bf04      	itt	eq
 8006d1c:	1949      	addeq	r1, r1, r5
 8006d1e:	6021      	streq	r1, [r4, #0]
 8006d20:	6054      	str	r4, [r2, #4]
 8006d22:	e7ca      	b.n	8006cba <_free_r+0x26>
 8006d24:	b003      	add	sp, #12
 8006d26:	bd30      	pop	{r4, r5, pc}
 8006d28:	2000035c 	.word	0x2000035c

08006d2c <sbrk_aligned>:
 8006d2c:	b570      	push	{r4, r5, r6, lr}
 8006d2e:	4e0e      	ldr	r6, [pc, #56]	; (8006d68 <sbrk_aligned+0x3c>)
 8006d30:	460c      	mov	r4, r1
 8006d32:	6831      	ldr	r1, [r6, #0]
 8006d34:	4605      	mov	r5, r0
 8006d36:	b911      	cbnz	r1, 8006d3e <sbrk_aligned+0x12>
 8006d38:	f000 fb7a 	bl	8007430 <_sbrk_r>
 8006d3c:	6030      	str	r0, [r6, #0]
 8006d3e:	4621      	mov	r1, r4
 8006d40:	4628      	mov	r0, r5
 8006d42:	f000 fb75 	bl	8007430 <_sbrk_r>
 8006d46:	1c43      	adds	r3, r0, #1
 8006d48:	d00a      	beq.n	8006d60 <sbrk_aligned+0x34>
 8006d4a:	1cc4      	adds	r4, r0, #3
 8006d4c:	f024 0403 	bic.w	r4, r4, #3
 8006d50:	42a0      	cmp	r0, r4
 8006d52:	d007      	beq.n	8006d64 <sbrk_aligned+0x38>
 8006d54:	1a21      	subs	r1, r4, r0
 8006d56:	4628      	mov	r0, r5
 8006d58:	f000 fb6a 	bl	8007430 <_sbrk_r>
 8006d5c:	3001      	adds	r0, #1
 8006d5e:	d101      	bne.n	8006d64 <sbrk_aligned+0x38>
 8006d60:	f04f 34ff 	mov.w	r4, #4294967295
 8006d64:	4620      	mov	r0, r4
 8006d66:	bd70      	pop	{r4, r5, r6, pc}
 8006d68:	20000360 	.word	0x20000360

08006d6c <_malloc_r>:
 8006d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d70:	1ccd      	adds	r5, r1, #3
 8006d72:	f025 0503 	bic.w	r5, r5, #3
 8006d76:	3508      	adds	r5, #8
 8006d78:	2d0c      	cmp	r5, #12
 8006d7a:	bf38      	it	cc
 8006d7c:	250c      	movcc	r5, #12
 8006d7e:	2d00      	cmp	r5, #0
 8006d80:	4607      	mov	r7, r0
 8006d82:	db01      	blt.n	8006d88 <_malloc_r+0x1c>
 8006d84:	42a9      	cmp	r1, r5
 8006d86:	d905      	bls.n	8006d94 <_malloc_r+0x28>
 8006d88:	230c      	movs	r3, #12
 8006d8a:	603b      	str	r3, [r7, #0]
 8006d8c:	2600      	movs	r6, #0
 8006d8e:	4630      	mov	r0, r6
 8006d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d94:	4e2e      	ldr	r6, [pc, #184]	; (8006e50 <_malloc_r+0xe4>)
 8006d96:	f000 ff01 	bl	8007b9c <__malloc_lock>
 8006d9a:	6833      	ldr	r3, [r6, #0]
 8006d9c:	461c      	mov	r4, r3
 8006d9e:	bb34      	cbnz	r4, 8006dee <_malloc_r+0x82>
 8006da0:	4629      	mov	r1, r5
 8006da2:	4638      	mov	r0, r7
 8006da4:	f7ff ffc2 	bl	8006d2c <sbrk_aligned>
 8006da8:	1c43      	adds	r3, r0, #1
 8006daa:	4604      	mov	r4, r0
 8006dac:	d14d      	bne.n	8006e4a <_malloc_r+0xde>
 8006dae:	6834      	ldr	r4, [r6, #0]
 8006db0:	4626      	mov	r6, r4
 8006db2:	2e00      	cmp	r6, #0
 8006db4:	d140      	bne.n	8006e38 <_malloc_r+0xcc>
 8006db6:	6823      	ldr	r3, [r4, #0]
 8006db8:	4631      	mov	r1, r6
 8006dba:	4638      	mov	r0, r7
 8006dbc:	eb04 0803 	add.w	r8, r4, r3
 8006dc0:	f000 fb36 	bl	8007430 <_sbrk_r>
 8006dc4:	4580      	cmp	r8, r0
 8006dc6:	d13a      	bne.n	8006e3e <_malloc_r+0xd2>
 8006dc8:	6821      	ldr	r1, [r4, #0]
 8006dca:	3503      	adds	r5, #3
 8006dcc:	1a6d      	subs	r5, r5, r1
 8006dce:	f025 0503 	bic.w	r5, r5, #3
 8006dd2:	3508      	adds	r5, #8
 8006dd4:	2d0c      	cmp	r5, #12
 8006dd6:	bf38      	it	cc
 8006dd8:	250c      	movcc	r5, #12
 8006dda:	4629      	mov	r1, r5
 8006ddc:	4638      	mov	r0, r7
 8006dde:	f7ff ffa5 	bl	8006d2c <sbrk_aligned>
 8006de2:	3001      	adds	r0, #1
 8006de4:	d02b      	beq.n	8006e3e <_malloc_r+0xd2>
 8006de6:	6823      	ldr	r3, [r4, #0]
 8006de8:	442b      	add	r3, r5
 8006dea:	6023      	str	r3, [r4, #0]
 8006dec:	e00e      	b.n	8006e0c <_malloc_r+0xa0>
 8006dee:	6822      	ldr	r2, [r4, #0]
 8006df0:	1b52      	subs	r2, r2, r5
 8006df2:	d41e      	bmi.n	8006e32 <_malloc_r+0xc6>
 8006df4:	2a0b      	cmp	r2, #11
 8006df6:	d916      	bls.n	8006e26 <_malloc_r+0xba>
 8006df8:	1961      	adds	r1, r4, r5
 8006dfa:	42a3      	cmp	r3, r4
 8006dfc:	6025      	str	r5, [r4, #0]
 8006dfe:	bf18      	it	ne
 8006e00:	6059      	strne	r1, [r3, #4]
 8006e02:	6863      	ldr	r3, [r4, #4]
 8006e04:	bf08      	it	eq
 8006e06:	6031      	streq	r1, [r6, #0]
 8006e08:	5162      	str	r2, [r4, r5]
 8006e0a:	604b      	str	r3, [r1, #4]
 8006e0c:	4638      	mov	r0, r7
 8006e0e:	f104 060b 	add.w	r6, r4, #11
 8006e12:	f000 fec9 	bl	8007ba8 <__malloc_unlock>
 8006e16:	f026 0607 	bic.w	r6, r6, #7
 8006e1a:	1d23      	adds	r3, r4, #4
 8006e1c:	1af2      	subs	r2, r6, r3
 8006e1e:	d0b6      	beq.n	8006d8e <_malloc_r+0x22>
 8006e20:	1b9b      	subs	r3, r3, r6
 8006e22:	50a3      	str	r3, [r4, r2]
 8006e24:	e7b3      	b.n	8006d8e <_malloc_r+0x22>
 8006e26:	6862      	ldr	r2, [r4, #4]
 8006e28:	42a3      	cmp	r3, r4
 8006e2a:	bf0c      	ite	eq
 8006e2c:	6032      	streq	r2, [r6, #0]
 8006e2e:	605a      	strne	r2, [r3, #4]
 8006e30:	e7ec      	b.n	8006e0c <_malloc_r+0xa0>
 8006e32:	4623      	mov	r3, r4
 8006e34:	6864      	ldr	r4, [r4, #4]
 8006e36:	e7b2      	b.n	8006d9e <_malloc_r+0x32>
 8006e38:	4634      	mov	r4, r6
 8006e3a:	6876      	ldr	r6, [r6, #4]
 8006e3c:	e7b9      	b.n	8006db2 <_malloc_r+0x46>
 8006e3e:	230c      	movs	r3, #12
 8006e40:	603b      	str	r3, [r7, #0]
 8006e42:	4638      	mov	r0, r7
 8006e44:	f000 feb0 	bl	8007ba8 <__malloc_unlock>
 8006e48:	e7a1      	b.n	8006d8e <_malloc_r+0x22>
 8006e4a:	6025      	str	r5, [r4, #0]
 8006e4c:	e7de      	b.n	8006e0c <_malloc_r+0xa0>
 8006e4e:	bf00      	nop
 8006e50:	2000035c 	.word	0x2000035c

08006e54 <__sfputc_r>:
 8006e54:	6893      	ldr	r3, [r2, #8]
 8006e56:	3b01      	subs	r3, #1
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	b410      	push	{r4}
 8006e5c:	6093      	str	r3, [r2, #8]
 8006e5e:	da08      	bge.n	8006e72 <__sfputc_r+0x1e>
 8006e60:	6994      	ldr	r4, [r2, #24]
 8006e62:	42a3      	cmp	r3, r4
 8006e64:	db01      	blt.n	8006e6a <__sfputc_r+0x16>
 8006e66:	290a      	cmp	r1, #10
 8006e68:	d103      	bne.n	8006e72 <__sfputc_r+0x1e>
 8006e6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e6e:	f000 bb53 	b.w	8007518 <__swbuf_r>
 8006e72:	6813      	ldr	r3, [r2, #0]
 8006e74:	1c58      	adds	r0, r3, #1
 8006e76:	6010      	str	r0, [r2, #0]
 8006e78:	7019      	strb	r1, [r3, #0]
 8006e7a:	4608      	mov	r0, r1
 8006e7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e80:	4770      	bx	lr

08006e82 <__sfputs_r>:
 8006e82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e84:	4606      	mov	r6, r0
 8006e86:	460f      	mov	r7, r1
 8006e88:	4614      	mov	r4, r2
 8006e8a:	18d5      	adds	r5, r2, r3
 8006e8c:	42ac      	cmp	r4, r5
 8006e8e:	d101      	bne.n	8006e94 <__sfputs_r+0x12>
 8006e90:	2000      	movs	r0, #0
 8006e92:	e007      	b.n	8006ea4 <__sfputs_r+0x22>
 8006e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e98:	463a      	mov	r2, r7
 8006e9a:	4630      	mov	r0, r6
 8006e9c:	f7ff ffda 	bl	8006e54 <__sfputc_r>
 8006ea0:	1c43      	adds	r3, r0, #1
 8006ea2:	d1f3      	bne.n	8006e8c <__sfputs_r+0xa>
 8006ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ea8 <_vfiprintf_r>:
 8006ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eac:	460d      	mov	r5, r1
 8006eae:	b09d      	sub	sp, #116	; 0x74
 8006eb0:	4614      	mov	r4, r2
 8006eb2:	4698      	mov	r8, r3
 8006eb4:	4606      	mov	r6, r0
 8006eb6:	b118      	cbz	r0, 8006ec0 <_vfiprintf_r+0x18>
 8006eb8:	6983      	ldr	r3, [r0, #24]
 8006eba:	b90b      	cbnz	r3, 8006ec0 <_vfiprintf_r+0x18>
 8006ebc:	f000 fd68 	bl	8007990 <__sinit>
 8006ec0:	4b89      	ldr	r3, [pc, #548]	; (80070e8 <_vfiprintf_r+0x240>)
 8006ec2:	429d      	cmp	r5, r3
 8006ec4:	d11b      	bne.n	8006efe <_vfiprintf_r+0x56>
 8006ec6:	6875      	ldr	r5, [r6, #4]
 8006ec8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006eca:	07d9      	lsls	r1, r3, #31
 8006ecc:	d405      	bmi.n	8006eda <_vfiprintf_r+0x32>
 8006ece:	89ab      	ldrh	r3, [r5, #12]
 8006ed0:	059a      	lsls	r2, r3, #22
 8006ed2:	d402      	bmi.n	8006eda <_vfiprintf_r+0x32>
 8006ed4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ed6:	f000 fdf9 	bl	8007acc <__retarget_lock_acquire_recursive>
 8006eda:	89ab      	ldrh	r3, [r5, #12]
 8006edc:	071b      	lsls	r3, r3, #28
 8006ede:	d501      	bpl.n	8006ee4 <_vfiprintf_r+0x3c>
 8006ee0:	692b      	ldr	r3, [r5, #16]
 8006ee2:	b9eb      	cbnz	r3, 8006f20 <_vfiprintf_r+0x78>
 8006ee4:	4629      	mov	r1, r5
 8006ee6:	4630      	mov	r0, r6
 8006ee8:	f000 fb68 	bl	80075bc <__swsetup_r>
 8006eec:	b1c0      	cbz	r0, 8006f20 <_vfiprintf_r+0x78>
 8006eee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ef0:	07dc      	lsls	r4, r3, #31
 8006ef2:	d50e      	bpl.n	8006f12 <_vfiprintf_r+0x6a>
 8006ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ef8:	b01d      	add	sp, #116	; 0x74
 8006efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006efe:	4b7b      	ldr	r3, [pc, #492]	; (80070ec <_vfiprintf_r+0x244>)
 8006f00:	429d      	cmp	r5, r3
 8006f02:	d101      	bne.n	8006f08 <_vfiprintf_r+0x60>
 8006f04:	68b5      	ldr	r5, [r6, #8]
 8006f06:	e7df      	b.n	8006ec8 <_vfiprintf_r+0x20>
 8006f08:	4b79      	ldr	r3, [pc, #484]	; (80070f0 <_vfiprintf_r+0x248>)
 8006f0a:	429d      	cmp	r5, r3
 8006f0c:	bf08      	it	eq
 8006f0e:	68f5      	ldreq	r5, [r6, #12]
 8006f10:	e7da      	b.n	8006ec8 <_vfiprintf_r+0x20>
 8006f12:	89ab      	ldrh	r3, [r5, #12]
 8006f14:	0598      	lsls	r0, r3, #22
 8006f16:	d4ed      	bmi.n	8006ef4 <_vfiprintf_r+0x4c>
 8006f18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f1a:	f000 fdd9 	bl	8007ad0 <__retarget_lock_release_recursive>
 8006f1e:	e7e9      	b.n	8006ef4 <_vfiprintf_r+0x4c>
 8006f20:	2300      	movs	r3, #0
 8006f22:	9309      	str	r3, [sp, #36]	; 0x24
 8006f24:	2320      	movs	r3, #32
 8006f26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f2e:	2330      	movs	r3, #48	; 0x30
 8006f30:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80070f4 <_vfiprintf_r+0x24c>
 8006f34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f38:	f04f 0901 	mov.w	r9, #1
 8006f3c:	4623      	mov	r3, r4
 8006f3e:	469a      	mov	sl, r3
 8006f40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f44:	b10a      	cbz	r2, 8006f4a <_vfiprintf_r+0xa2>
 8006f46:	2a25      	cmp	r2, #37	; 0x25
 8006f48:	d1f9      	bne.n	8006f3e <_vfiprintf_r+0x96>
 8006f4a:	ebba 0b04 	subs.w	fp, sl, r4
 8006f4e:	d00b      	beq.n	8006f68 <_vfiprintf_r+0xc0>
 8006f50:	465b      	mov	r3, fp
 8006f52:	4622      	mov	r2, r4
 8006f54:	4629      	mov	r1, r5
 8006f56:	4630      	mov	r0, r6
 8006f58:	f7ff ff93 	bl	8006e82 <__sfputs_r>
 8006f5c:	3001      	adds	r0, #1
 8006f5e:	f000 80aa 	beq.w	80070b6 <_vfiprintf_r+0x20e>
 8006f62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f64:	445a      	add	r2, fp
 8006f66:	9209      	str	r2, [sp, #36]	; 0x24
 8006f68:	f89a 3000 	ldrb.w	r3, [sl]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f000 80a2 	beq.w	80070b6 <_vfiprintf_r+0x20e>
 8006f72:	2300      	movs	r3, #0
 8006f74:	f04f 32ff 	mov.w	r2, #4294967295
 8006f78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f7c:	f10a 0a01 	add.w	sl, sl, #1
 8006f80:	9304      	str	r3, [sp, #16]
 8006f82:	9307      	str	r3, [sp, #28]
 8006f84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f88:	931a      	str	r3, [sp, #104]	; 0x68
 8006f8a:	4654      	mov	r4, sl
 8006f8c:	2205      	movs	r2, #5
 8006f8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f92:	4858      	ldr	r0, [pc, #352]	; (80070f4 <_vfiprintf_r+0x24c>)
 8006f94:	f7f9 f924 	bl	80001e0 <memchr>
 8006f98:	9a04      	ldr	r2, [sp, #16]
 8006f9a:	b9d8      	cbnz	r0, 8006fd4 <_vfiprintf_r+0x12c>
 8006f9c:	06d1      	lsls	r1, r2, #27
 8006f9e:	bf44      	itt	mi
 8006fa0:	2320      	movmi	r3, #32
 8006fa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fa6:	0713      	lsls	r3, r2, #28
 8006fa8:	bf44      	itt	mi
 8006faa:	232b      	movmi	r3, #43	; 0x2b
 8006fac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fb0:	f89a 3000 	ldrb.w	r3, [sl]
 8006fb4:	2b2a      	cmp	r3, #42	; 0x2a
 8006fb6:	d015      	beq.n	8006fe4 <_vfiprintf_r+0x13c>
 8006fb8:	9a07      	ldr	r2, [sp, #28]
 8006fba:	4654      	mov	r4, sl
 8006fbc:	2000      	movs	r0, #0
 8006fbe:	f04f 0c0a 	mov.w	ip, #10
 8006fc2:	4621      	mov	r1, r4
 8006fc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fc8:	3b30      	subs	r3, #48	; 0x30
 8006fca:	2b09      	cmp	r3, #9
 8006fcc:	d94e      	bls.n	800706c <_vfiprintf_r+0x1c4>
 8006fce:	b1b0      	cbz	r0, 8006ffe <_vfiprintf_r+0x156>
 8006fd0:	9207      	str	r2, [sp, #28]
 8006fd2:	e014      	b.n	8006ffe <_vfiprintf_r+0x156>
 8006fd4:	eba0 0308 	sub.w	r3, r0, r8
 8006fd8:	fa09 f303 	lsl.w	r3, r9, r3
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	9304      	str	r3, [sp, #16]
 8006fe0:	46a2      	mov	sl, r4
 8006fe2:	e7d2      	b.n	8006f8a <_vfiprintf_r+0xe2>
 8006fe4:	9b03      	ldr	r3, [sp, #12]
 8006fe6:	1d19      	adds	r1, r3, #4
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	9103      	str	r1, [sp, #12]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	bfbb      	ittet	lt
 8006ff0:	425b      	neglt	r3, r3
 8006ff2:	f042 0202 	orrlt.w	r2, r2, #2
 8006ff6:	9307      	strge	r3, [sp, #28]
 8006ff8:	9307      	strlt	r3, [sp, #28]
 8006ffa:	bfb8      	it	lt
 8006ffc:	9204      	strlt	r2, [sp, #16]
 8006ffe:	7823      	ldrb	r3, [r4, #0]
 8007000:	2b2e      	cmp	r3, #46	; 0x2e
 8007002:	d10c      	bne.n	800701e <_vfiprintf_r+0x176>
 8007004:	7863      	ldrb	r3, [r4, #1]
 8007006:	2b2a      	cmp	r3, #42	; 0x2a
 8007008:	d135      	bne.n	8007076 <_vfiprintf_r+0x1ce>
 800700a:	9b03      	ldr	r3, [sp, #12]
 800700c:	1d1a      	adds	r2, r3, #4
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	9203      	str	r2, [sp, #12]
 8007012:	2b00      	cmp	r3, #0
 8007014:	bfb8      	it	lt
 8007016:	f04f 33ff 	movlt.w	r3, #4294967295
 800701a:	3402      	adds	r4, #2
 800701c:	9305      	str	r3, [sp, #20]
 800701e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007104 <_vfiprintf_r+0x25c>
 8007022:	7821      	ldrb	r1, [r4, #0]
 8007024:	2203      	movs	r2, #3
 8007026:	4650      	mov	r0, sl
 8007028:	f7f9 f8da 	bl	80001e0 <memchr>
 800702c:	b140      	cbz	r0, 8007040 <_vfiprintf_r+0x198>
 800702e:	2340      	movs	r3, #64	; 0x40
 8007030:	eba0 000a 	sub.w	r0, r0, sl
 8007034:	fa03 f000 	lsl.w	r0, r3, r0
 8007038:	9b04      	ldr	r3, [sp, #16]
 800703a:	4303      	orrs	r3, r0
 800703c:	3401      	adds	r4, #1
 800703e:	9304      	str	r3, [sp, #16]
 8007040:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007044:	482c      	ldr	r0, [pc, #176]	; (80070f8 <_vfiprintf_r+0x250>)
 8007046:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800704a:	2206      	movs	r2, #6
 800704c:	f7f9 f8c8 	bl	80001e0 <memchr>
 8007050:	2800      	cmp	r0, #0
 8007052:	d03f      	beq.n	80070d4 <_vfiprintf_r+0x22c>
 8007054:	4b29      	ldr	r3, [pc, #164]	; (80070fc <_vfiprintf_r+0x254>)
 8007056:	bb1b      	cbnz	r3, 80070a0 <_vfiprintf_r+0x1f8>
 8007058:	9b03      	ldr	r3, [sp, #12]
 800705a:	3307      	adds	r3, #7
 800705c:	f023 0307 	bic.w	r3, r3, #7
 8007060:	3308      	adds	r3, #8
 8007062:	9303      	str	r3, [sp, #12]
 8007064:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007066:	443b      	add	r3, r7
 8007068:	9309      	str	r3, [sp, #36]	; 0x24
 800706a:	e767      	b.n	8006f3c <_vfiprintf_r+0x94>
 800706c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007070:	460c      	mov	r4, r1
 8007072:	2001      	movs	r0, #1
 8007074:	e7a5      	b.n	8006fc2 <_vfiprintf_r+0x11a>
 8007076:	2300      	movs	r3, #0
 8007078:	3401      	adds	r4, #1
 800707a:	9305      	str	r3, [sp, #20]
 800707c:	4619      	mov	r1, r3
 800707e:	f04f 0c0a 	mov.w	ip, #10
 8007082:	4620      	mov	r0, r4
 8007084:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007088:	3a30      	subs	r2, #48	; 0x30
 800708a:	2a09      	cmp	r2, #9
 800708c:	d903      	bls.n	8007096 <_vfiprintf_r+0x1ee>
 800708e:	2b00      	cmp	r3, #0
 8007090:	d0c5      	beq.n	800701e <_vfiprintf_r+0x176>
 8007092:	9105      	str	r1, [sp, #20]
 8007094:	e7c3      	b.n	800701e <_vfiprintf_r+0x176>
 8007096:	fb0c 2101 	mla	r1, ip, r1, r2
 800709a:	4604      	mov	r4, r0
 800709c:	2301      	movs	r3, #1
 800709e:	e7f0      	b.n	8007082 <_vfiprintf_r+0x1da>
 80070a0:	ab03      	add	r3, sp, #12
 80070a2:	9300      	str	r3, [sp, #0]
 80070a4:	462a      	mov	r2, r5
 80070a6:	4b16      	ldr	r3, [pc, #88]	; (8007100 <_vfiprintf_r+0x258>)
 80070a8:	a904      	add	r1, sp, #16
 80070aa:	4630      	mov	r0, r6
 80070ac:	f3af 8000 	nop.w
 80070b0:	4607      	mov	r7, r0
 80070b2:	1c78      	adds	r0, r7, #1
 80070b4:	d1d6      	bne.n	8007064 <_vfiprintf_r+0x1bc>
 80070b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070b8:	07d9      	lsls	r1, r3, #31
 80070ba:	d405      	bmi.n	80070c8 <_vfiprintf_r+0x220>
 80070bc:	89ab      	ldrh	r3, [r5, #12]
 80070be:	059a      	lsls	r2, r3, #22
 80070c0:	d402      	bmi.n	80070c8 <_vfiprintf_r+0x220>
 80070c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070c4:	f000 fd04 	bl	8007ad0 <__retarget_lock_release_recursive>
 80070c8:	89ab      	ldrh	r3, [r5, #12]
 80070ca:	065b      	lsls	r3, r3, #25
 80070cc:	f53f af12 	bmi.w	8006ef4 <_vfiprintf_r+0x4c>
 80070d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070d2:	e711      	b.n	8006ef8 <_vfiprintf_r+0x50>
 80070d4:	ab03      	add	r3, sp, #12
 80070d6:	9300      	str	r3, [sp, #0]
 80070d8:	462a      	mov	r2, r5
 80070da:	4b09      	ldr	r3, [pc, #36]	; (8007100 <_vfiprintf_r+0x258>)
 80070dc:	a904      	add	r1, sp, #16
 80070de:	4630      	mov	r0, r6
 80070e0:	f000 f880 	bl	80071e4 <_printf_i>
 80070e4:	e7e4      	b.n	80070b0 <_vfiprintf_r+0x208>
 80070e6:	bf00      	nop
 80070e8:	080087ec 	.word	0x080087ec
 80070ec:	0800880c 	.word	0x0800880c
 80070f0:	080087cc 	.word	0x080087cc
 80070f4:	08008798 	.word	0x08008798
 80070f8:	080087a2 	.word	0x080087a2
 80070fc:	00000000 	.word	0x00000000
 8007100:	08006e83 	.word	0x08006e83
 8007104:	0800879e 	.word	0x0800879e

08007108 <_printf_common>:
 8007108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800710c:	4616      	mov	r6, r2
 800710e:	4699      	mov	r9, r3
 8007110:	688a      	ldr	r2, [r1, #8]
 8007112:	690b      	ldr	r3, [r1, #16]
 8007114:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007118:	4293      	cmp	r3, r2
 800711a:	bfb8      	it	lt
 800711c:	4613      	movlt	r3, r2
 800711e:	6033      	str	r3, [r6, #0]
 8007120:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007124:	4607      	mov	r7, r0
 8007126:	460c      	mov	r4, r1
 8007128:	b10a      	cbz	r2, 800712e <_printf_common+0x26>
 800712a:	3301      	adds	r3, #1
 800712c:	6033      	str	r3, [r6, #0]
 800712e:	6823      	ldr	r3, [r4, #0]
 8007130:	0699      	lsls	r1, r3, #26
 8007132:	bf42      	ittt	mi
 8007134:	6833      	ldrmi	r3, [r6, #0]
 8007136:	3302      	addmi	r3, #2
 8007138:	6033      	strmi	r3, [r6, #0]
 800713a:	6825      	ldr	r5, [r4, #0]
 800713c:	f015 0506 	ands.w	r5, r5, #6
 8007140:	d106      	bne.n	8007150 <_printf_common+0x48>
 8007142:	f104 0a19 	add.w	sl, r4, #25
 8007146:	68e3      	ldr	r3, [r4, #12]
 8007148:	6832      	ldr	r2, [r6, #0]
 800714a:	1a9b      	subs	r3, r3, r2
 800714c:	42ab      	cmp	r3, r5
 800714e:	dc26      	bgt.n	800719e <_printf_common+0x96>
 8007150:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007154:	1e13      	subs	r3, r2, #0
 8007156:	6822      	ldr	r2, [r4, #0]
 8007158:	bf18      	it	ne
 800715a:	2301      	movne	r3, #1
 800715c:	0692      	lsls	r2, r2, #26
 800715e:	d42b      	bmi.n	80071b8 <_printf_common+0xb0>
 8007160:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007164:	4649      	mov	r1, r9
 8007166:	4638      	mov	r0, r7
 8007168:	47c0      	blx	r8
 800716a:	3001      	adds	r0, #1
 800716c:	d01e      	beq.n	80071ac <_printf_common+0xa4>
 800716e:	6823      	ldr	r3, [r4, #0]
 8007170:	68e5      	ldr	r5, [r4, #12]
 8007172:	6832      	ldr	r2, [r6, #0]
 8007174:	f003 0306 	and.w	r3, r3, #6
 8007178:	2b04      	cmp	r3, #4
 800717a:	bf08      	it	eq
 800717c:	1aad      	subeq	r5, r5, r2
 800717e:	68a3      	ldr	r3, [r4, #8]
 8007180:	6922      	ldr	r2, [r4, #16]
 8007182:	bf0c      	ite	eq
 8007184:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007188:	2500      	movne	r5, #0
 800718a:	4293      	cmp	r3, r2
 800718c:	bfc4      	itt	gt
 800718e:	1a9b      	subgt	r3, r3, r2
 8007190:	18ed      	addgt	r5, r5, r3
 8007192:	2600      	movs	r6, #0
 8007194:	341a      	adds	r4, #26
 8007196:	42b5      	cmp	r5, r6
 8007198:	d11a      	bne.n	80071d0 <_printf_common+0xc8>
 800719a:	2000      	movs	r0, #0
 800719c:	e008      	b.n	80071b0 <_printf_common+0xa8>
 800719e:	2301      	movs	r3, #1
 80071a0:	4652      	mov	r2, sl
 80071a2:	4649      	mov	r1, r9
 80071a4:	4638      	mov	r0, r7
 80071a6:	47c0      	blx	r8
 80071a8:	3001      	adds	r0, #1
 80071aa:	d103      	bne.n	80071b4 <_printf_common+0xac>
 80071ac:	f04f 30ff 	mov.w	r0, #4294967295
 80071b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071b4:	3501      	adds	r5, #1
 80071b6:	e7c6      	b.n	8007146 <_printf_common+0x3e>
 80071b8:	18e1      	adds	r1, r4, r3
 80071ba:	1c5a      	adds	r2, r3, #1
 80071bc:	2030      	movs	r0, #48	; 0x30
 80071be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80071c2:	4422      	add	r2, r4
 80071c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80071c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80071cc:	3302      	adds	r3, #2
 80071ce:	e7c7      	b.n	8007160 <_printf_common+0x58>
 80071d0:	2301      	movs	r3, #1
 80071d2:	4622      	mov	r2, r4
 80071d4:	4649      	mov	r1, r9
 80071d6:	4638      	mov	r0, r7
 80071d8:	47c0      	blx	r8
 80071da:	3001      	adds	r0, #1
 80071dc:	d0e6      	beq.n	80071ac <_printf_common+0xa4>
 80071de:	3601      	adds	r6, #1
 80071e0:	e7d9      	b.n	8007196 <_printf_common+0x8e>
	...

080071e4 <_printf_i>:
 80071e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071e8:	7e0f      	ldrb	r7, [r1, #24]
 80071ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80071ec:	2f78      	cmp	r7, #120	; 0x78
 80071ee:	4691      	mov	r9, r2
 80071f0:	4680      	mov	r8, r0
 80071f2:	460c      	mov	r4, r1
 80071f4:	469a      	mov	sl, r3
 80071f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80071fa:	d807      	bhi.n	800720c <_printf_i+0x28>
 80071fc:	2f62      	cmp	r7, #98	; 0x62
 80071fe:	d80a      	bhi.n	8007216 <_printf_i+0x32>
 8007200:	2f00      	cmp	r7, #0
 8007202:	f000 80d8 	beq.w	80073b6 <_printf_i+0x1d2>
 8007206:	2f58      	cmp	r7, #88	; 0x58
 8007208:	f000 80a3 	beq.w	8007352 <_printf_i+0x16e>
 800720c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007210:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007214:	e03a      	b.n	800728c <_printf_i+0xa8>
 8007216:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800721a:	2b15      	cmp	r3, #21
 800721c:	d8f6      	bhi.n	800720c <_printf_i+0x28>
 800721e:	a101      	add	r1, pc, #4	; (adr r1, 8007224 <_printf_i+0x40>)
 8007220:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007224:	0800727d 	.word	0x0800727d
 8007228:	08007291 	.word	0x08007291
 800722c:	0800720d 	.word	0x0800720d
 8007230:	0800720d 	.word	0x0800720d
 8007234:	0800720d 	.word	0x0800720d
 8007238:	0800720d 	.word	0x0800720d
 800723c:	08007291 	.word	0x08007291
 8007240:	0800720d 	.word	0x0800720d
 8007244:	0800720d 	.word	0x0800720d
 8007248:	0800720d 	.word	0x0800720d
 800724c:	0800720d 	.word	0x0800720d
 8007250:	0800739d 	.word	0x0800739d
 8007254:	080072c1 	.word	0x080072c1
 8007258:	0800737f 	.word	0x0800737f
 800725c:	0800720d 	.word	0x0800720d
 8007260:	0800720d 	.word	0x0800720d
 8007264:	080073bf 	.word	0x080073bf
 8007268:	0800720d 	.word	0x0800720d
 800726c:	080072c1 	.word	0x080072c1
 8007270:	0800720d 	.word	0x0800720d
 8007274:	0800720d 	.word	0x0800720d
 8007278:	08007387 	.word	0x08007387
 800727c:	682b      	ldr	r3, [r5, #0]
 800727e:	1d1a      	adds	r2, r3, #4
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	602a      	str	r2, [r5, #0]
 8007284:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007288:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800728c:	2301      	movs	r3, #1
 800728e:	e0a3      	b.n	80073d8 <_printf_i+0x1f4>
 8007290:	6820      	ldr	r0, [r4, #0]
 8007292:	6829      	ldr	r1, [r5, #0]
 8007294:	0606      	lsls	r6, r0, #24
 8007296:	f101 0304 	add.w	r3, r1, #4
 800729a:	d50a      	bpl.n	80072b2 <_printf_i+0xce>
 800729c:	680e      	ldr	r6, [r1, #0]
 800729e:	602b      	str	r3, [r5, #0]
 80072a0:	2e00      	cmp	r6, #0
 80072a2:	da03      	bge.n	80072ac <_printf_i+0xc8>
 80072a4:	232d      	movs	r3, #45	; 0x2d
 80072a6:	4276      	negs	r6, r6
 80072a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072ac:	485e      	ldr	r0, [pc, #376]	; (8007428 <_printf_i+0x244>)
 80072ae:	230a      	movs	r3, #10
 80072b0:	e019      	b.n	80072e6 <_printf_i+0x102>
 80072b2:	680e      	ldr	r6, [r1, #0]
 80072b4:	602b      	str	r3, [r5, #0]
 80072b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80072ba:	bf18      	it	ne
 80072bc:	b236      	sxthne	r6, r6
 80072be:	e7ef      	b.n	80072a0 <_printf_i+0xbc>
 80072c0:	682b      	ldr	r3, [r5, #0]
 80072c2:	6820      	ldr	r0, [r4, #0]
 80072c4:	1d19      	adds	r1, r3, #4
 80072c6:	6029      	str	r1, [r5, #0]
 80072c8:	0601      	lsls	r1, r0, #24
 80072ca:	d501      	bpl.n	80072d0 <_printf_i+0xec>
 80072cc:	681e      	ldr	r6, [r3, #0]
 80072ce:	e002      	b.n	80072d6 <_printf_i+0xf2>
 80072d0:	0646      	lsls	r6, r0, #25
 80072d2:	d5fb      	bpl.n	80072cc <_printf_i+0xe8>
 80072d4:	881e      	ldrh	r6, [r3, #0]
 80072d6:	4854      	ldr	r0, [pc, #336]	; (8007428 <_printf_i+0x244>)
 80072d8:	2f6f      	cmp	r7, #111	; 0x6f
 80072da:	bf0c      	ite	eq
 80072dc:	2308      	moveq	r3, #8
 80072de:	230a      	movne	r3, #10
 80072e0:	2100      	movs	r1, #0
 80072e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80072e6:	6865      	ldr	r5, [r4, #4]
 80072e8:	60a5      	str	r5, [r4, #8]
 80072ea:	2d00      	cmp	r5, #0
 80072ec:	bfa2      	ittt	ge
 80072ee:	6821      	ldrge	r1, [r4, #0]
 80072f0:	f021 0104 	bicge.w	r1, r1, #4
 80072f4:	6021      	strge	r1, [r4, #0]
 80072f6:	b90e      	cbnz	r6, 80072fc <_printf_i+0x118>
 80072f8:	2d00      	cmp	r5, #0
 80072fa:	d04d      	beq.n	8007398 <_printf_i+0x1b4>
 80072fc:	4615      	mov	r5, r2
 80072fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8007302:	fb03 6711 	mls	r7, r3, r1, r6
 8007306:	5dc7      	ldrb	r7, [r0, r7]
 8007308:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800730c:	4637      	mov	r7, r6
 800730e:	42bb      	cmp	r3, r7
 8007310:	460e      	mov	r6, r1
 8007312:	d9f4      	bls.n	80072fe <_printf_i+0x11a>
 8007314:	2b08      	cmp	r3, #8
 8007316:	d10b      	bne.n	8007330 <_printf_i+0x14c>
 8007318:	6823      	ldr	r3, [r4, #0]
 800731a:	07de      	lsls	r6, r3, #31
 800731c:	d508      	bpl.n	8007330 <_printf_i+0x14c>
 800731e:	6923      	ldr	r3, [r4, #16]
 8007320:	6861      	ldr	r1, [r4, #4]
 8007322:	4299      	cmp	r1, r3
 8007324:	bfde      	ittt	le
 8007326:	2330      	movle	r3, #48	; 0x30
 8007328:	f805 3c01 	strble.w	r3, [r5, #-1]
 800732c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007330:	1b52      	subs	r2, r2, r5
 8007332:	6122      	str	r2, [r4, #16]
 8007334:	f8cd a000 	str.w	sl, [sp]
 8007338:	464b      	mov	r3, r9
 800733a:	aa03      	add	r2, sp, #12
 800733c:	4621      	mov	r1, r4
 800733e:	4640      	mov	r0, r8
 8007340:	f7ff fee2 	bl	8007108 <_printf_common>
 8007344:	3001      	adds	r0, #1
 8007346:	d14c      	bne.n	80073e2 <_printf_i+0x1fe>
 8007348:	f04f 30ff 	mov.w	r0, #4294967295
 800734c:	b004      	add	sp, #16
 800734e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007352:	4835      	ldr	r0, [pc, #212]	; (8007428 <_printf_i+0x244>)
 8007354:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007358:	6829      	ldr	r1, [r5, #0]
 800735a:	6823      	ldr	r3, [r4, #0]
 800735c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007360:	6029      	str	r1, [r5, #0]
 8007362:	061d      	lsls	r5, r3, #24
 8007364:	d514      	bpl.n	8007390 <_printf_i+0x1ac>
 8007366:	07df      	lsls	r7, r3, #31
 8007368:	bf44      	itt	mi
 800736a:	f043 0320 	orrmi.w	r3, r3, #32
 800736e:	6023      	strmi	r3, [r4, #0]
 8007370:	b91e      	cbnz	r6, 800737a <_printf_i+0x196>
 8007372:	6823      	ldr	r3, [r4, #0]
 8007374:	f023 0320 	bic.w	r3, r3, #32
 8007378:	6023      	str	r3, [r4, #0]
 800737a:	2310      	movs	r3, #16
 800737c:	e7b0      	b.n	80072e0 <_printf_i+0xfc>
 800737e:	6823      	ldr	r3, [r4, #0]
 8007380:	f043 0320 	orr.w	r3, r3, #32
 8007384:	6023      	str	r3, [r4, #0]
 8007386:	2378      	movs	r3, #120	; 0x78
 8007388:	4828      	ldr	r0, [pc, #160]	; (800742c <_printf_i+0x248>)
 800738a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800738e:	e7e3      	b.n	8007358 <_printf_i+0x174>
 8007390:	0659      	lsls	r1, r3, #25
 8007392:	bf48      	it	mi
 8007394:	b2b6      	uxthmi	r6, r6
 8007396:	e7e6      	b.n	8007366 <_printf_i+0x182>
 8007398:	4615      	mov	r5, r2
 800739a:	e7bb      	b.n	8007314 <_printf_i+0x130>
 800739c:	682b      	ldr	r3, [r5, #0]
 800739e:	6826      	ldr	r6, [r4, #0]
 80073a0:	6961      	ldr	r1, [r4, #20]
 80073a2:	1d18      	adds	r0, r3, #4
 80073a4:	6028      	str	r0, [r5, #0]
 80073a6:	0635      	lsls	r5, r6, #24
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	d501      	bpl.n	80073b0 <_printf_i+0x1cc>
 80073ac:	6019      	str	r1, [r3, #0]
 80073ae:	e002      	b.n	80073b6 <_printf_i+0x1d2>
 80073b0:	0670      	lsls	r0, r6, #25
 80073b2:	d5fb      	bpl.n	80073ac <_printf_i+0x1c8>
 80073b4:	8019      	strh	r1, [r3, #0]
 80073b6:	2300      	movs	r3, #0
 80073b8:	6123      	str	r3, [r4, #16]
 80073ba:	4615      	mov	r5, r2
 80073bc:	e7ba      	b.n	8007334 <_printf_i+0x150>
 80073be:	682b      	ldr	r3, [r5, #0]
 80073c0:	1d1a      	adds	r2, r3, #4
 80073c2:	602a      	str	r2, [r5, #0]
 80073c4:	681d      	ldr	r5, [r3, #0]
 80073c6:	6862      	ldr	r2, [r4, #4]
 80073c8:	2100      	movs	r1, #0
 80073ca:	4628      	mov	r0, r5
 80073cc:	f7f8 ff08 	bl	80001e0 <memchr>
 80073d0:	b108      	cbz	r0, 80073d6 <_printf_i+0x1f2>
 80073d2:	1b40      	subs	r0, r0, r5
 80073d4:	6060      	str	r0, [r4, #4]
 80073d6:	6863      	ldr	r3, [r4, #4]
 80073d8:	6123      	str	r3, [r4, #16]
 80073da:	2300      	movs	r3, #0
 80073dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073e0:	e7a8      	b.n	8007334 <_printf_i+0x150>
 80073e2:	6923      	ldr	r3, [r4, #16]
 80073e4:	462a      	mov	r2, r5
 80073e6:	4649      	mov	r1, r9
 80073e8:	4640      	mov	r0, r8
 80073ea:	47d0      	blx	sl
 80073ec:	3001      	adds	r0, #1
 80073ee:	d0ab      	beq.n	8007348 <_printf_i+0x164>
 80073f0:	6823      	ldr	r3, [r4, #0]
 80073f2:	079b      	lsls	r3, r3, #30
 80073f4:	d413      	bmi.n	800741e <_printf_i+0x23a>
 80073f6:	68e0      	ldr	r0, [r4, #12]
 80073f8:	9b03      	ldr	r3, [sp, #12]
 80073fa:	4298      	cmp	r0, r3
 80073fc:	bfb8      	it	lt
 80073fe:	4618      	movlt	r0, r3
 8007400:	e7a4      	b.n	800734c <_printf_i+0x168>
 8007402:	2301      	movs	r3, #1
 8007404:	4632      	mov	r2, r6
 8007406:	4649      	mov	r1, r9
 8007408:	4640      	mov	r0, r8
 800740a:	47d0      	blx	sl
 800740c:	3001      	adds	r0, #1
 800740e:	d09b      	beq.n	8007348 <_printf_i+0x164>
 8007410:	3501      	adds	r5, #1
 8007412:	68e3      	ldr	r3, [r4, #12]
 8007414:	9903      	ldr	r1, [sp, #12]
 8007416:	1a5b      	subs	r3, r3, r1
 8007418:	42ab      	cmp	r3, r5
 800741a:	dcf2      	bgt.n	8007402 <_printf_i+0x21e>
 800741c:	e7eb      	b.n	80073f6 <_printf_i+0x212>
 800741e:	2500      	movs	r5, #0
 8007420:	f104 0619 	add.w	r6, r4, #25
 8007424:	e7f5      	b.n	8007412 <_printf_i+0x22e>
 8007426:	bf00      	nop
 8007428:	080087a9 	.word	0x080087a9
 800742c:	080087ba 	.word	0x080087ba

08007430 <_sbrk_r>:
 8007430:	b538      	push	{r3, r4, r5, lr}
 8007432:	4d06      	ldr	r5, [pc, #24]	; (800744c <_sbrk_r+0x1c>)
 8007434:	2300      	movs	r3, #0
 8007436:	4604      	mov	r4, r0
 8007438:	4608      	mov	r0, r1
 800743a:	602b      	str	r3, [r5, #0]
 800743c:	f7f9 faf2 	bl	8000a24 <_sbrk>
 8007440:	1c43      	adds	r3, r0, #1
 8007442:	d102      	bne.n	800744a <_sbrk_r+0x1a>
 8007444:	682b      	ldr	r3, [r5, #0]
 8007446:	b103      	cbz	r3, 800744a <_sbrk_r+0x1a>
 8007448:	6023      	str	r3, [r4, #0]
 800744a:	bd38      	pop	{r3, r4, r5, pc}
 800744c:	200003f8 	.word	0x200003f8

08007450 <_raise_r>:
 8007450:	291f      	cmp	r1, #31
 8007452:	b538      	push	{r3, r4, r5, lr}
 8007454:	4604      	mov	r4, r0
 8007456:	460d      	mov	r5, r1
 8007458:	d904      	bls.n	8007464 <_raise_r+0x14>
 800745a:	2316      	movs	r3, #22
 800745c:	6003      	str	r3, [r0, #0]
 800745e:	f04f 30ff 	mov.w	r0, #4294967295
 8007462:	bd38      	pop	{r3, r4, r5, pc}
 8007464:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007466:	b112      	cbz	r2, 800746e <_raise_r+0x1e>
 8007468:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800746c:	b94b      	cbnz	r3, 8007482 <_raise_r+0x32>
 800746e:	4620      	mov	r0, r4
 8007470:	f000 f830 	bl	80074d4 <_getpid_r>
 8007474:	462a      	mov	r2, r5
 8007476:	4601      	mov	r1, r0
 8007478:	4620      	mov	r0, r4
 800747a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800747e:	f000 b817 	b.w	80074b0 <_kill_r>
 8007482:	2b01      	cmp	r3, #1
 8007484:	d00a      	beq.n	800749c <_raise_r+0x4c>
 8007486:	1c59      	adds	r1, r3, #1
 8007488:	d103      	bne.n	8007492 <_raise_r+0x42>
 800748a:	2316      	movs	r3, #22
 800748c:	6003      	str	r3, [r0, #0]
 800748e:	2001      	movs	r0, #1
 8007490:	e7e7      	b.n	8007462 <_raise_r+0x12>
 8007492:	2400      	movs	r4, #0
 8007494:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007498:	4628      	mov	r0, r5
 800749a:	4798      	blx	r3
 800749c:	2000      	movs	r0, #0
 800749e:	e7e0      	b.n	8007462 <_raise_r+0x12>

080074a0 <raise>:
 80074a0:	4b02      	ldr	r3, [pc, #8]	; (80074ac <raise+0xc>)
 80074a2:	4601      	mov	r1, r0
 80074a4:	6818      	ldr	r0, [r3, #0]
 80074a6:	f7ff bfd3 	b.w	8007450 <_raise_r>
 80074aa:	bf00      	nop
 80074ac:	20000020 	.word	0x20000020

080074b0 <_kill_r>:
 80074b0:	b538      	push	{r3, r4, r5, lr}
 80074b2:	4d07      	ldr	r5, [pc, #28]	; (80074d0 <_kill_r+0x20>)
 80074b4:	2300      	movs	r3, #0
 80074b6:	4604      	mov	r4, r0
 80074b8:	4608      	mov	r0, r1
 80074ba:	4611      	mov	r1, r2
 80074bc:	602b      	str	r3, [r5, #0]
 80074be:	f7f9 fa29 	bl	8000914 <_kill>
 80074c2:	1c43      	adds	r3, r0, #1
 80074c4:	d102      	bne.n	80074cc <_kill_r+0x1c>
 80074c6:	682b      	ldr	r3, [r5, #0]
 80074c8:	b103      	cbz	r3, 80074cc <_kill_r+0x1c>
 80074ca:	6023      	str	r3, [r4, #0]
 80074cc:	bd38      	pop	{r3, r4, r5, pc}
 80074ce:	bf00      	nop
 80074d0:	200003f8 	.word	0x200003f8

080074d4 <_getpid_r>:
 80074d4:	f7f9 ba16 	b.w	8000904 <_getpid>

080074d8 <_vsiprintf_r>:
 80074d8:	b500      	push	{lr}
 80074da:	b09b      	sub	sp, #108	; 0x6c
 80074dc:	9100      	str	r1, [sp, #0]
 80074de:	9104      	str	r1, [sp, #16]
 80074e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80074e4:	9105      	str	r1, [sp, #20]
 80074e6:	9102      	str	r1, [sp, #8]
 80074e8:	4905      	ldr	r1, [pc, #20]	; (8007500 <_vsiprintf_r+0x28>)
 80074ea:	9103      	str	r1, [sp, #12]
 80074ec:	4669      	mov	r1, sp
 80074ee:	f000 fbeb 	bl	8007cc8 <_svfiprintf_r>
 80074f2:	9b00      	ldr	r3, [sp, #0]
 80074f4:	2200      	movs	r2, #0
 80074f6:	701a      	strb	r2, [r3, #0]
 80074f8:	b01b      	add	sp, #108	; 0x6c
 80074fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80074fe:	bf00      	nop
 8007500:	ffff0208 	.word	0xffff0208

08007504 <vsiprintf>:
 8007504:	4613      	mov	r3, r2
 8007506:	460a      	mov	r2, r1
 8007508:	4601      	mov	r1, r0
 800750a:	4802      	ldr	r0, [pc, #8]	; (8007514 <vsiprintf+0x10>)
 800750c:	6800      	ldr	r0, [r0, #0]
 800750e:	f7ff bfe3 	b.w	80074d8 <_vsiprintf_r>
 8007512:	bf00      	nop
 8007514:	20000020 	.word	0x20000020

08007518 <__swbuf_r>:
 8007518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800751a:	460e      	mov	r6, r1
 800751c:	4614      	mov	r4, r2
 800751e:	4605      	mov	r5, r0
 8007520:	b118      	cbz	r0, 800752a <__swbuf_r+0x12>
 8007522:	6983      	ldr	r3, [r0, #24]
 8007524:	b90b      	cbnz	r3, 800752a <__swbuf_r+0x12>
 8007526:	f000 fa33 	bl	8007990 <__sinit>
 800752a:	4b21      	ldr	r3, [pc, #132]	; (80075b0 <__swbuf_r+0x98>)
 800752c:	429c      	cmp	r4, r3
 800752e:	d12b      	bne.n	8007588 <__swbuf_r+0x70>
 8007530:	686c      	ldr	r4, [r5, #4]
 8007532:	69a3      	ldr	r3, [r4, #24]
 8007534:	60a3      	str	r3, [r4, #8]
 8007536:	89a3      	ldrh	r3, [r4, #12]
 8007538:	071a      	lsls	r2, r3, #28
 800753a:	d52f      	bpl.n	800759c <__swbuf_r+0x84>
 800753c:	6923      	ldr	r3, [r4, #16]
 800753e:	b36b      	cbz	r3, 800759c <__swbuf_r+0x84>
 8007540:	6923      	ldr	r3, [r4, #16]
 8007542:	6820      	ldr	r0, [r4, #0]
 8007544:	1ac0      	subs	r0, r0, r3
 8007546:	6963      	ldr	r3, [r4, #20]
 8007548:	b2f6      	uxtb	r6, r6
 800754a:	4283      	cmp	r3, r0
 800754c:	4637      	mov	r7, r6
 800754e:	dc04      	bgt.n	800755a <__swbuf_r+0x42>
 8007550:	4621      	mov	r1, r4
 8007552:	4628      	mov	r0, r5
 8007554:	f000 f988 	bl	8007868 <_fflush_r>
 8007558:	bb30      	cbnz	r0, 80075a8 <__swbuf_r+0x90>
 800755a:	68a3      	ldr	r3, [r4, #8]
 800755c:	3b01      	subs	r3, #1
 800755e:	60a3      	str	r3, [r4, #8]
 8007560:	6823      	ldr	r3, [r4, #0]
 8007562:	1c5a      	adds	r2, r3, #1
 8007564:	6022      	str	r2, [r4, #0]
 8007566:	701e      	strb	r6, [r3, #0]
 8007568:	6963      	ldr	r3, [r4, #20]
 800756a:	3001      	adds	r0, #1
 800756c:	4283      	cmp	r3, r0
 800756e:	d004      	beq.n	800757a <__swbuf_r+0x62>
 8007570:	89a3      	ldrh	r3, [r4, #12]
 8007572:	07db      	lsls	r3, r3, #31
 8007574:	d506      	bpl.n	8007584 <__swbuf_r+0x6c>
 8007576:	2e0a      	cmp	r6, #10
 8007578:	d104      	bne.n	8007584 <__swbuf_r+0x6c>
 800757a:	4621      	mov	r1, r4
 800757c:	4628      	mov	r0, r5
 800757e:	f000 f973 	bl	8007868 <_fflush_r>
 8007582:	b988      	cbnz	r0, 80075a8 <__swbuf_r+0x90>
 8007584:	4638      	mov	r0, r7
 8007586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007588:	4b0a      	ldr	r3, [pc, #40]	; (80075b4 <__swbuf_r+0x9c>)
 800758a:	429c      	cmp	r4, r3
 800758c:	d101      	bne.n	8007592 <__swbuf_r+0x7a>
 800758e:	68ac      	ldr	r4, [r5, #8]
 8007590:	e7cf      	b.n	8007532 <__swbuf_r+0x1a>
 8007592:	4b09      	ldr	r3, [pc, #36]	; (80075b8 <__swbuf_r+0xa0>)
 8007594:	429c      	cmp	r4, r3
 8007596:	bf08      	it	eq
 8007598:	68ec      	ldreq	r4, [r5, #12]
 800759a:	e7ca      	b.n	8007532 <__swbuf_r+0x1a>
 800759c:	4621      	mov	r1, r4
 800759e:	4628      	mov	r0, r5
 80075a0:	f000 f80c 	bl	80075bc <__swsetup_r>
 80075a4:	2800      	cmp	r0, #0
 80075a6:	d0cb      	beq.n	8007540 <__swbuf_r+0x28>
 80075a8:	f04f 37ff 	mov.w	r7, #4294967295
 80075ac:	e7ea      	b.n	8007584 <__swbuf_r+0x6c>
 80075ae:	bf00      	nop
 80075b0:	080087ec 	.word	0x080087ec
 80075b4:	0800880c 	.word	0x0800880c
 80075b8:	080087cc 	.word	0x080087cc

080075bc <__swsetup_r>:
 80075bc:	4b32      	ldr	r3, [pc, #200]	; (8007688 <__swsetup_r+0xcc>)
 80075be:	b570      	push	{r4, r5, r6, lr}
 80075c0:	681d      	ldr	r5, [r3, #0]
 80075c2:	4606      	mov	r6, r0
 80075c4:	460c      	mov	r4, r1
 80075c6:	b125      	cbz	r5, 80075d2 <__swsetup_r+0x16>
 80075c8:	69ab      	ldr	r3, [r5, #24]
 80075ca:	b913      	cbnz	r3, 80075d2 <__swsetup_r+0x16>
 80075cc:	4628      	mov	r0, r5
 80075ce:	f000 f9df 	bl	8007990 <__sinit>
 80075d2:	4b2e      	ldr	r3, [pc, #184]	; (800768c <__swsetup_r+0xd0>)
 80075d4:	429c      	cmp	r4, r3
 80075d6:	d10f      	bne.n	80075f8 <__swsetup_r+0x3c>
 80075d8:	686c      	ldr	r4, [r5, #4]
 80075da:	89a3      	ldrh	r3, [r4, #12]
 80075dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80075e0:	0719      	lsls	r1, r3, #28
 80075e2:	d42c      	bmi.n	800763e <__swsetup_r+0x82>
 80075e4:	06dd      	lsls	r5, r3, #27
 80075e6:	d411      	bmi.n	800760c <__swsetup_r+0x50>
 80075e8:	2309      	movs	r3, #9
 80075ea:	6033      	str	r3, [r6, #0]
 80075ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80075f0:	81a3      	strh	r3, [r4, #12]
 80075f2:	f04f 30ff 	mov.w	r0, #4294967295
 80075f6:	e03e      	b.n	8007676 <__swsetup_r+0xba>
 80075f8:	4b25      	ldr	r3, [pc, #148]	; (8007690 <__swsetup_r+0xd4>)
 80075fa:	429c      	cmp	r4, r3
 80075fc:	d101      	bne.n	8007602 <__swsetup_r+0x46>
 80075fe:	68ac      	ldr	r4, [r5, #8]
 8007600:	e7eb      	b.n	80075da <__swsetup_r+0x1e>
 8007602:	4b24      	ldr	r3, [pc, #144]	; (8007694 <__swsetup_r+0xd8>)
 8007604:	429c      	cmp	r4, r3
 8007606:	bf08      	it	eq
 8007608:	68ec      	ldreq	r4, [r5, #12]
 800760a:	e7e6      	b.n	80075da <__swsetup_r+0x1e>
 800760c:	0758      	lsls	r0, r3, #29
 800760e:	d512      	bpl.n	8007636 <__swsetup_r+0x7a>
 8007610:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007612:	b141      	cbz	r1, 8007626 <__swsetup_r+0x6a>
 8007614:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007618:	4299      	cmp	r1, r3
 800761a:	d002      	beq.n	8007622 <__swsetup_r+0x66>
 800761c:	4630      	mov	r0, r6
 800761e:	f7ff fb39 	bl	8006c94 <_free_r>
 8007622:	2300      	movs	r3, #0
 8007624:	6363      	str	r3, [r4, #52]	; 0x34
 8007626:	89a3      	ldrh	r3, [r4, #12]
 8007628:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800762c:	81a3      	strh	r3, [r4, #12]
 800762e:	2300      	movs	r3, #0
 8007630:	6063      	str	r3, [r4, #4]
 8007632:	6923      	ldr	r3, [r4, #16]
 8007634:	6023      	str	r3, [r4, #0]
 8007636:	89a3      	ldrh	r3, [r4, #12]
 8007638:	f043 0308 	orr.w	r3, r3, #8
 800763c:	81a3      	strh	r3, [r4, #12]
 800763e:	6923      	ldr	r3, [r4, #16]
 8007640:	b94b      	cbnz	r3, 8007656 <__swsetup_r+0x9a>
 8007642:	89a3      	ldrh	r3, [r4, #12]
 8007644:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007648:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800764c:	d003      	beq.n	8007656 <__swsetup_r+0x9a>
 800764e:	4621      	mov	r1, r4
 8007650:	4630      	mov	r0, r6
 8007652:	f000 fa63 	bl	8007b1c <__smakebuf_r>
 8007656:	89a0      	ldrh	r0, [r4, #12]
 8007658:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800765c:	f010 0301 	ands.w	r3, r0, #1
 8007660:	d00a      	beq.n	8007678 <__swsetup_r+0xbc>
 8007662:	2300      	movs	r3, #0
 8007664:	60a3      	str	r3, [r4, #8]
 8007666:	6963      	ldr	r3, [r4, #20]
 8007668:	425b      	negs	r3, r3
 800766a:	61a3      	str	r3, [r4, #24]
 800766c:	6923      	ldr	r3, [r4, #16]
 800766e:	b943      	cbnz	r3, 8007682 <__swsetup_r+0xc6>
 8007670:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007674:	d1ba      	bne.n	80075ec <__swsetup_r+0x30>
 8007676:	bd70      	pop	{r4, r5, r6, pc}
 8007678:	0781      	lsls	r1, r0, #30
 800767a:	bf58      	it	pl
 800767c:	6963      	ldrpl	r3, [r4, #20]
 800767e:	60a3      	str	r3, [r4, #8]
 8007680:	e7f4      	b.n	800766c <__swsetup_r+0xb0>
 8007682:	2000      	movs	r0, #0
 8007684:	e7f7      	b.n	8007676 <__swsetup_r+0xba>
 8007686:	bf00      	nop
 8007688:	20000020 	.word	0x20000020
 800768c:	080087ec 	.word	0x080087ec
 8007690:	0800880c 	.word	0x0800880c
 8007694:	080087cc 	.word	0x080087cc

08007698 <__register_exitproc>:
 8007698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800769c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8007758 <__register_exitproc+0xc0>
 80076a0:	4606      	mov	r6, r0
 80076a2:	f8d8 0000 	ldr.w	r0, [r8]
 80076a6:	461f      	mov	r7, r3
 80076a8:	460d      	mov	r5, r1
 80076aa:	4691      	mov	r9, r2
 80076ac:	f000 fa0e 	bl	8007acc <__retarget_lock_acquire_recursive>
 80076b0:	4b25      	ldr	r3, [pc, #148]	; (8007748 <__register_exitproc+0xb0>)
 80076b2:	681c      	ldr	r4, [r3, #0]
 80076b4:	b934      	cbnz	r4, 80076c4 <__register_exitproc+0x2c>
 80076b6:	4c25      	ldr	r4, [pc, #148]	; (800774c <__register_exitproc+0xb4>)
 80076b8:	601c      	str	r4, [r3, #0]
 80076ba:	4b25      	ldr	r3, [pc, #148]	; (8007750 <__register_exitproc+0xb8>)
 80076bc:	b113      	cbz	r3, 80076c4 <__register_exitproc+0x2c>
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80076c4:	6863      	ldr	r3, [r4, #4]
 80076c6:	2b1f      	cmp	r3, #31
 80076c8:	dd07      	ble.n	80076da <__register_exitproc+0x42>
 80076ca:	f8d8 0000 	ldr.w	r0, [r8]
 80076ce:	f000 f9ff 	bl	8007ad0 <__retarget_lock_release_recursive>
 80076d2:	f04f 30ff 	mov.w	r0, #4294967295
 80076d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076da:	b34e      	cbz	r6, 8007730 <__register_exitproc+0x98>
 80076dc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80076e0:	b988      	cbnz	r0, 8007706 <__register_exitproc+0x6e>
 80076e2:	4b1c      	ldr	r3, [pc, #112]	; (8007754 <__register_exitproc+0xbc>)
 80076e4:	b923      	cbnz	r3, 80076f0 <__register_exitproc+0x58>
 80076e6:	f8d8 0000 	ldr.w	r0, [r8]
 80076ea:	f000 f9f0 	bl	8007ace <__retarget_lock_release>
 80076ee:	e7f0      	b.n	80076d2 <__register_exitproc+0x3a>
 80076f0:	f44f 7084 	mov.w	r0, #264	; 0x108
 80076f4:	f7ff fa8e 	bl	8006c14 <malloc>
 80076f8:	2800      	cmp	r0, #0
 80076fa:	d0f4      	beq.n	80076e6 <__register_exitproc+0x4e>
 80076fc:	2300      	movs	r3, #0
 80076fe:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8007702:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8007706:	6863      	ldr	r3, [r4, #4]
 8007708:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 800770c:	2201      	movs	r2, #1
 800770e:	409a      	lsls	r2, r3
 8007710:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8007714:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8007718:	4313      	orrs	r3, r2
 800771a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 800771e:	2e02      	cmp	r6, #2
 8007720:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8007724:	bf02      	ittt	eq
 8007726:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 800772a:	4313      	orreq	r3, r2
 800772c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8007730:	6863      	ldr	r3, [r4, #4]
 8007732:	f8d8 0000 	ldr.w	r0, [r8]
 8007736:	1c5a      	adds	r2, r3, #1
 8007738:	3302      	adds	r3, #2
 800773a:	6062      	str	r2, [r4, #4]
 800773c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8007740:	f000 f9c6 	bl	8007ad0 <__retarget_lock_release_recursive>
 8007744:	2000      	movs	r0, #0
 8007746:	e7c6      	b.n	80076d6 <__register_exitproc+0x3e>
 8007748:	200003f0 	.word	0x200003f0
 800774c:	20000364 	.word	0x20000364
 8007750:	00000000 	.word	0x00000000
 8007754:	08006c15 	.word	0x08006c15
 8007758:	20000084 	.word	0x20000084

0800775c <__sflush_r>:
 800775c:	898a      	ldrh	r2, [r1, #12]
 800775e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007762:	4605      	mov	r5, r0
 8007764:	0710      	lsls	r0, r2, #28
 8007766:	460c      	mov	r4, r1
 8007768:	d458      	bmi.n	800781c <__sflush_r+0xc0>
 800776a:	684b      	ldr	r3, [r1, #4]
 800776c:	2b00      	cmp	r3, #0
 800776e:	dc05      	bgt.n	800777c <__sflush_r+0x20>
 8007770:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007772:	2b00      	cmp	r3, #0
 8007774:	dc02      	bgt.n	800777c <__sflush_r+0x20>
 8007776:	2000      	movs	r0, #0
 8007778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800777c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800777e:	2e00      	cmp	r6, #0
 8007780:	d0f9      	beq.n	8007776 <__sflush_r+0x1a>
 8007782:	2300      	movs	r3, #0
 8007784:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007788:	682f      	ldr	r7, [r5, #0]
 800778a:	602b      	str	r3, [r5, #0]
 800778c:	d032      	beq.n	80077f4 <__sflush_r+0x98>
 800778e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007790:	89a3      	ldrh	r3, [r4, #12]
 8007792:	075a      	lsls	r2, r3, #29
 8007794:	d505      	bpl.n	80077a2 <__sflush_r+0x46>
 8007796:	6863      	ldr	r3, [r4, #4]
 8007798:	1ac0      	subs	r0, r0, r3
 800779a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800779c:	b10b      	cbz	r3, 80077a2 <__sflush_r+0x46>
 800779e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80077a0:	1ac0      	subs	r0, r0, r3
 80077a2:	2300      	movs	r3, #0
 80077a4:	4602      	mov	r2, r0
 80077a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80077a8:	6a21      	ldr	r1, [r4, #32]
 80077aa:	4628      	mov	r0, r5
 80077ac:	47b0      	blx	r6
 80077ae:	1c43      	adds	r3, r0, #1
 80077b0:	89a3      	ldrh	r3, [r4, #12]
 80077b2:	d106      	bne.n	80077c2 <__sflush_r+0x66>
 80077b4:	6829      	ldr	r1, [r5, #0]
 80077b6:	291d      	cmp	r1, #29
 80077b8:	d82c      	bhi.n	8007814 <__sflush_r+0xb8>
 80077ba:	4a2a      	ldr	r2, [pc, #168]	; (8007864 <__sflush_r+0x108>)
 80077bc:	40ca      	lsrs	r2, r1
 80077be:	07d6      	lsls	r6, r2, #31
 80077c0:	d528      	bpl.n	8007814 <__sflush_r+0xb8>
 80077c2:	2200      	movs	r2, #0
 80077c4:	6062      	str	r2, [r4, #4]
 80077c6:	04d9      	lsls	r1, r3, #19
 80077c8:	6922      	ldr	r2, [r4, #16]
 80077ca:	6022      	str	r2, [r4, #0]
 80077cc:	d504      	bpl.n	80077d8 <__sflush_r+0x7c>
 80077ce:	1c42      	adds	r2, r0, #1
 80077d0:	d101      	bne.n	80077d6 <__sflush_r+0x7a>
 80077d2:	682b      	ldr	r3, [r5, #0]
 80077d4:	b903      	cbnz	r3, 80077d8 <__sflush_r+0x7c>
 80077d6:	6560      	str	r0, [r4, #84]	; 0x54
 80077d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077da:	602f      	str	r7, [r5, #0]
 80077dc:	2900      	cmp	r1, #0
 80077de:	d0ca      	beq.n	8007776 <__sflush_r+0x1a>
 80077e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077e4:	4299      	cmp	r1, r3
 80077e6:	d002      	beq.n	80077ee <__sflush_r+0x92>
 80077e8:	4628      	mov	r0, r5
 80077ea:	f7ff fa53 	bl	8006c94 <_free_r>
 80077ee:	2000      	movs	r0, #0
 80077f0:	6360      	str	r0, [r4, #52]	; 0x34
 80077f2:	e7c1      	b.n	8007778 <__sflush_r+0x1c>
 80077f4:	6a21      	ldr	r1, [r4, #32]
 80077f6:	2301      	movs	r3, #1
 80077f8:	4628      	mov	r0, r5
 80077fa:	47b0      	blx	r6
 80077fc:	1c41      	adds	r1, r0, #1
 80077fe:	d1c7      	bne.n	8007790 <__sflush_r+0x34>
 8007800:	682b      	ldr	r3, [r5, #0]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d0c4      	beq.n	8007790 <__sflush_r+0x34>
 8007806:	2b1d      	cmp	r3, #29
 8007808:	d001      	beq.n	800780e <__sflush_r+0xb2>
 800780a:	2b16      	cmp	r3, #22
 800780c:	d101      	bne.n	8007812 <__sflush_r+0xb6>
 800780e:	602f      	str	r7, [r5, #0]
 8007810:	e7b1      	b.n	8007776 <__sflush_r+0x1a>
 8007812:	89a3      	ldrh	r3, [r4, #12]
 8007814:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007818:	81a3      	strh	r3, [r4, #12]
 800781a:	e7ad      	b.n	8007778 <__sflush_r+0x1c>
 800781c:	690f      	ldr	r7, [r1, #16]
 800781e:	2f00      	cmp	r7, #0
 8007820:	d0a9      	beq.n	8007776 <__sflush_r+0x1a>
 8007822:	0793      	lsls	r3, r2, #30
 8007824:	680e      	ldr	r6, [r1, #0]
 8007826:	bf08      	it	eq
 8007828:	694b      	ldreq	r3, [r1, #20]
 800782a:	600f      	str	r7, [r1, #0]
 800782c:	bf18      	it	ne
 800782e:	2300      	movne	r3, #0
 8007830:	eba6 0807 	sub.w	r8, r6, r7
 8007834:	608b      	str	r3, [r1, #8]
 8007836:	f1b8 0f00 	cmp.w	r8, #0
 800783a:	dd9c      	ble.n	8007776 <__sflush_r+0x1a>
 800783c:	6a21      	ldr	r1, [r4, #32]
 800783e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007840:	4643      	mov	r3, r8
 8007842:	463a      	mov	r2, r7
 8007844:	4628      	mov	r0, r5
 8007846:	47b0      	blx	r6
 8007848:	2800      	cmp	r0, #0
 800784a:	dc06      	bgt.n	800785a <__sflush_r+0xfe>
 800784c:	89a3      	ldrh	r3, [r4, #12]
 800784e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007852:	81a3      	strh	r3, [r4, #12]
 8007854:	f04f 30ff 	mov.w	r0, #4294967295
 8007858:	e78e      	b.n	8007778 <__sflush_r+0x1c>
 800785a:	4407      	add	r7, r0
 800785c:	eba8 0800 	sub.w	r8, r8, r0
 8007860:	e7e9      	b.n	8007836 <__sflush_r+0xda>
 8007862:	bf00      	nop
 8007864:	20400001 	.word	0x20400001

08007868 <_fflush_r>:
 8007868:	b538      	push	{r3, r4, r5, lr}
 800786a:	690b      	ldr	r3, [r1, #16]
 800786c:	4605      	mov	r5, r0
 800786e:	460c      	mov	r4, r1
 8007870:	b913      	cbnz	r3, 8007878 <_fflush_r+0x10>
 8007872:	2500      	movs	r5, #0
 8007874:	4628      	mov	r0, r5
 8007876:	bd38      	pop	{r3, r4, r5, pc}
 8007878:	b118      	cbz	r0, 8007882 <_fflush_r+0x1a>
 800787a:	6983      	ldr	r3, [r0, #24]
 800787c:	b90b      	cbnz	r3, 8007882 <_fflush_r+0x1a>
 800787e:	f000 f887 	bl	8007990 <__sinit>
 8007882:	4b14      	ldr	r3, [pc, #80]	; (80078d4 <_fflush_r+0x6c>)
 8007884:	429c      	cmp	r4, r3
 8007886:	d11b      	bne.n	80078c0 <_fflush_r+0x58>
 8007888:	686c      	ldr	r4, [r5, #4]
 800788a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d0ef      	beq.n	8007872 <_fflush_r+0xa>
 8007892:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007894:	07d0      	lsls	r0, r2, #31
 8007896:	d404      	bmi.n	80078a2 <_fflush_r+0x3a>
 8007898:	0599      	lsls	r1, r3, #22
 800789a:	d402      	bmi.n	80078a2 <_fflush_r+0x3a>
 800789c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800789e:	f000 f915 	bl	8007acc <__retarget_lock_acquire_recursive>
 80078a2:	4628      	mov	r0, r5
 80078a4:	4621      	mov	r1, r4
 80078a6:	f7ff ff59 	bl	800775c <__sflush_r>
 80078aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80078ac:	07da      	lsls	r2, r3, #31
 80078ae:	4605      	mov	r5, r0
 80078b0:	d4e0      	bmi.n	8007874 <_fflush_r+0xc>
 80078b2:	89a3      	ldrh	r3, [r4, #12]
 80078b4:	059b      	lsls	r3, r3, #22
 80078b6:	d4dd      	bmi.n	8007874 <_fflush_r+0xc>
 80078b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078ba:	f000 f909 	bl	8007ad0 <__retarget_lock_release_recursive>
 80078be:	e7d9      	b.n	8007874 <_fflush_r+0xc>
 80078c0:	4b05      	ldr	r3, [pc, #20]	; (80078d8 <_fflush_r+0x70>)
 80078c2:	429c      	cmp	r4, r3
 80078c4:	d101      	bne.n	80078ca <_fflush_r+0x62>
 80078c6:	68ac      	ldr	r4, [r5, #8]
 80078c8:	e7df      	b.n	800788a <_fflush_r+0x22>
 80078ca:	4b04      	ldr	r3, [pc, #16]	; (80078dc <_fflush_r+0x74>)
 80078cc:	429c      	cmp	r4, r3
 80078ce:	bf08      	it	eq
 80078d0:	68ec      	ldreq	r4, [r5, #12]
 80078d2:	e7da      	b.n	800788a <_fflush_r+0x22>
 80078d4:	080087ec 	.word	0x080087ec
 80078d8:	0800880c 	.word	0x0800880c
 80078dc:	080087cc 	.word	0x080087cc

080078e0 <std>:
 80078e0:	2300      	movs	r3, #0
 80078e2:	b510      	push	{r4, lr}
 80078e4:	4604      	mov	r4, r0
 80078e6:	e9c0 3300 	strd	r3, r3, [r0]
 80078ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80078ee:	6083      	str	r3, [r0, #8]
 80078f0:	8181      	strh	r1, [r0, #12]
 80078f2:	6643      	str	r3, [r0, #100]	; 0x64
 80078f4:	81c2      	strh	r2, [r0, #14]
 80078f6:	6183      	str	r3, [r0, #24]
 80078f8:	4619      	mov	r1, r3
 80078fa:	2208      	movs	r2, #8
 80078fc:	305c      	adds	r0, #92	; 0x5c
 80078fe:	f7ff f9c1 	bl	8006c84 <memset>
 8007902:	4b05      	ldr	r3, [pc, #20]	; (8007918 <std+0x38>)
 8007904:	6263      	str	r3, [r4, #36]	; 0x24
 8007906:	4b05      	ldr	r3, [pc, #20]	; (800791c <std+0x3c>)
 8007908:	62a3      	str	r3, [r4, #40]	; 0x28
 800790a:	4b05      	ldr	r3, [pc, #20]	; (8007920 <std+0x40>)
 800790c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800790e:	4b05      	ldr	r3, [pc, #20]	; (8007924 <std+0x44>)
 8007910:	6224      	str	r4, [r4, #32]
 8007912:	6323      	str	r3, [r4, #48]	; 0x30
 8007914:	bd10      	pop	{r4, pc}
 8007916:	bf00      	nop
 8007918:	08007ec9 	.word	0x08007ec9
 800791c:	08007eeb 	.word	0x08007eeb
 8007920:	08007f23 	.word	0x08007f23
 8007924:	08007f47 	.word	0x08007f47

08007928 <_cleanup_r>:
 8007928:	4901      	ldr	r1, [pc, #4]	; (8007930 <_cleanup_r+0x8>)
 800792a:	f000 b8af 	b.w	8007a8c <_fwalk_reent>
 800792e:	bf00      	nop
 8007930:	08007869 	.word	0x08007869

08007934 <__sfmoreglue>:
 8007934:	b570      	push	{r4, r5, r6, lr}
 8007936:	2268      	movs	r2, #104	; 0x68
 8007938:	1e4d      	subs	r5, r1, #1
 800793a:	4355      	muls	r5, r2
 800793c:	460e      	mov	r6, r1
 800793e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007942:	f7ff fa13 	bl	8006d6c <_malloc_r>
 8007946:	4604      	mov	r4, r0
 8007948:	b140      	cbz	r0, 800795c <__sfmoreglue+0x28>
 800794a:	2100      	movs	r1, #0
 800794c:	e9c0 1600 	strd	r1, r6, [r0]
 8007950:	300c      	adds	r0, #12
 8007952:	60a0      	str	r0, [r4, #8]
 8007954:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007958:	f7ff f994 	bl	8006c84 <memset>
 800795c:	4620      	mov	r0, r4
 800795e:	bd70      	pop	{r4, r5, r6, pc}

08007960 <__sfp_lock_acquire>:
 8007960:	4801      	ldr	r0, [pc, #4]	; (8007968 <__sfp_lock_acquire+0x8>)
 8007962:	f000 b8b3 	b.w	8007acc <__retarget_lock_acquire_recursive>
 8007966:	bf00      	nop
 8007968:	200003f6 	.word	0x200003f6

0800796c <__sfp_lock_release>:
 800796c:	4801      	ldr	r0, [pc, #4]	; (8007974 <__sfp_lock_release+0x8>)
 800796e:	f000 b8af 	b.w	8007ad0 <__retarget_lock_release_recursive>
 8007972:	bf00      	nop
 8007974:	200003f6 	.word	0x200003f6

08007978 <__sinit_lock_acquire>:
 8007978:	4801      	ldr	r0, [pc, #4]	; (8007980 <__sinit_lock_acquire+0x8>)
 800797a:	f000 b8a7 	b.w	8007acc <__retarget_lock_acquire_recursive>
 800797e:	bf00      	nop
 8007980:	200003f7 	.word	0x200003f7

08007984 <__sinit_lock_release>:
 8007984:	4801      	ldr	r0, [pc, #4]	; (800798c <__sinit_lock_release+0x8>)
 8007986:	f000 b8a3 	b.w	8007ad0 <__retarget_lock_release_recursive>
 800798a:	bf00      	nop
 800798c:	200003f7 	.word	0x200003f7

08007990 <__sinit>:
 8007990:	b510      	push	{r4, lr}
 8007992:	4604      	mov	r4, r0
 8007994:	f7ff fff0 	bl	8007978 <__sinit_lock_acquire>
 8007998:	69a3      	ldr	r3, [r4, #24]
 800799a:	b11b      	cbz	r3, 80079a4 <__sinit+0x14>
 800799c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079a0:	f7ff bff0 	b.w	8007984 <__sinit_lock_release>
 80079a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80079a8:	6523      	str	r3, [r4, #80]	; 0x50
 80079aa:	4b13      	ldr	r3, [pc, #76]	; (80079f8 <__sinit+0x68>)
 80079ac:	4a13      	ldr	r2, [pc, #76]	; (80079fc <__sinit+0x6c>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80079b2:	42a3      	cmp	r3, r4
 80079b4:	bf04      	itt	eq
 80079b6:	2301      	moveq	r3, #1
 80079b8:	61a3      	streq	r3, [r4, #24]
 80079ba:	4620      	mov	r0, r4
 80079bc:	f000 f820 	bl	8007a00 <__sfp>
 80079c0:	6060      	str	r0, [r4, #4]
 80079c2:	4620      	mov	r0, r4
 80079c4:	f000 f81c 	bl	8007a00 <__sfp>
 80079c8:	60a0      	str	r0, [r4, #8]
 80079ca:	4620      	mov	r0, r4
 80079cc:	f000 f818 	bl	8007a00 <__sfp>
 80079d0:	2200      	movs	r2, #0
 80079d2:	60e0      	str	r0, [r4, #12]
 80079d4:	2104      	movs	r1, #4
 80079d6:	6860      	ldr	r0, [r4, #4]
 80079d8:	f7ff ff82 	bl	80078e0 <std>
 80079dc:	68a0      	ldr	r0, [r4, #8]
 80079de:	2201      	movs	r2, #1
 80079e0:	2109      	movs	r1, #9
 80079e2:	f7ff ff7d 	bl	80078e0 <std>
 80079e6:	68e0      	ldr	r0, [r4, #12]
 80079e8:	2202      	movs	r2, #2
 80079ea:	2112      	movs	r1, #18
 80079ec:	f7ff ff78 	bl	80078e0 <std>
 80079f0:	2301      	movs	r3, #1
 80079f2:	61a3      	str	r3, [r4, #24]
 80079f4:	e7d2      	b.n	800799c <__sinit+0xc>
 80079f6:	bf00      	nop
 80079f8:	08008794 	.word	0x08008794
 80079fc:	08007929 	.word	0x08007929

08007a00 <__sfp>:
 8007a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a02:	4607      	mov	r7, r0
 8007a04:	f7ff ffac 	bl	8007960 <__sfp_lock_acquire>
 8007a08:	4b1e      	ldr	r3, [pc, #120]	; (8007a84 <__sfp+0x84>)
 8007a0a:	681e      	ldr	r6, [r3, #0]
 8007a0c:	69b3      	ldr	r3, [r6, #24]
 8007a0e:	b913      	cbnz	r3, 8007a16 <__sfp+0x16>
 8007a10:	4630      	mov	r0, r6
 8007a12:	f7ff ffbd 	bl	8007990 <__sinit>
 8007a16:	3648      	adds	r6, #72	; 0x48
 8007a18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007a1c:	3b01      	subs	r3, #1
 8007a1e:	d503      	bpl.n	8007a28 <__sfp+0x28>
 8007a20:	6833      	ldr	r3, [r6, #0]
 8007a22:	b30b      	cbz	r3, 8007a68 <__sfp+0x68>
 8007a24:	6836      	ldr	r6, [r6, #0]
 8007a26:	e7f7      	b.n	8007a18 <__sfp+0x18>
 8007a28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007a2c:	b9d5      	cbnz	r5, 8007a64 <__sfp+0x64>
 8007a2e:	4b16      	ldr	r3, [pc, #88]	; (8007a88 <__sfp+0x88>)
 8007a30:	60e3      	str	r3, [r4, #12]
 8007a32:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007a36:	6665      	str	r5, [r4, #100]	; 0x64
 8007a38:	f000 f847 	bl	8007aca <__retarget_lock_init_recursive>
 8007a3c:	f7ff ff96 	bl	800796c <__sfp_lock_release>
 8007a40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007a44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007a48:	6025      	str	r5, [r4, #0]
 8007a4a:	61a5      	str	r5, [r4, #24]
 8007a4c:	2208      	movs	r2, #8
 8007a4e:	4629      	mov	r1, r5
 8007a50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007a54:	f7ff f916 	bl	8006c84 <memset>
 8007a58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007a5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007a60:	4620      	mov	r0, r4
 8007a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a64:	3468      	adds	r4, #104	; 0x68
 8007a66:	e7d9      	b.n	8007a1c <__sfp+0x1c>
 8007a68:	2104      	movs	r1, #4
 8007a6a:	4638      	mov	r0, r7
 8007a6c:	f7ff ff62 	bl	8007934 <__sfmoreglue>
 8007a70:	4604      	mov	r4, r0
 8007a72:	6030      	str	r0, [r6, #0]
 8007a74:	2800      	cmp	r0, #0
 8007a76:	d1d5      	bne.n	8007a24 <__sfp+0x24>
 8007a78:	f7ff ff78 	bl	800796c <__sfp_lock_release>
 8007a7c:	230c      	movs	r3, #12
 8007a7e:	603b      	str	r3, [r7, #0]
 8007a80:	e7ee      	b.n	8007a60 <__sfp+0x60>
 8007a82:	bf00      	nop
 8007a84:	08008794 	.word	0x08008794
 8007a88:	ffff0001 	.word	0xffff0001

08007a8c <_fwalk_reent>:
 8007a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a90:	4606      	mov	r6, r0
 8007a92:	4688      	mov	r8, r1
 8007a94:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007a98:	2700      	movs	r7, #0
 8007a9a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a9e:	f1b9 0901 	subs.w	r9, r9, #1
 8007aa2:	d505      	bpl.n	8007ab0 <_fwalk_reent+0x24>
 8007aa4:	6824      	ldr	r4, [r4, #0]
 8007aa6:	2c00      	cmp	r4, #0
 8007aa8:	d1f7      	bne.n	8007a9a <_fwalk_reent+0xe>
 8007aaa:	4638      	mov	r0, r7
 8007aac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ab0:	89ab      	ldrh	r3, [r5, #12]
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d907      	bls.n	8007ac6 <_fwalk_reent+0x3a>
 8007ab6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007aba:	3301      	adds	r3, #1
 8007abc:	d003      	beq.n	8007ac6 <_fwalk_reent+0x3a>
 8007abe:	4629      	mov	r1, r5
 8007ac0:	4630      	mov	r0, r6
 8007ac2:	47c0      	blx	r8
 8007ac4:	4307      	orrs	r7, r0
 8007ac6:	3568      	adds	r5, #104	; 0x68
 8007ac8:	e7e9      	b.n	8007a9e <_fwalk_reent+0x12>

08007aca <__retarget_lock_init_recursive>:
 8007aca:	4770      	bx	lr

08007acc <__retarget_lock_acquire_recursive>:
 8007acc:	4770      	bx	lr

08007ace <__retarget_lock_release>:
 8007ace:	4770      	bx	lr

08007ad0 <__retarget_lock_release_recursive>:
 8007ad0:	4770      	bx	lr

08007ad2 <__swhatbuf_r>:
 8007ad2:	b570      	push	{r4, r5, r6, lr}
 8007ad4:	460e      	mov	r6, r1
 8007ad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ada:	2900      	cmp	r1, #0
 8007adc:	b096      	sub	sp, #88	; 0x58
 8007ade:	4614      	mov	r4, r2
 8007ae0:	461d      	mov	r5, r3
 8007ae2:	da08      	bge.n	8007af6 <__swhatbuf_r+0x24>
 8007ae4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	602a      	str	r2, [r5, #0]
 8007aec:	061a      	lsls	r2, r3, #24
 8007aee:	d410      	bmi.n	8007b12 <__swhatbuf_r+0x40>
 8007af0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007af4:	e00e      	b.n	8007b14 <__swhatbuf_r+0x42>
 8007af6:	466a      	mov	r2, sp
 8007af8:	f000 fa4c 	bl	8007f94 <_fstat_r>
 8007afc:	2800      	cmp	r0, #0
 8007afe:	dbf1      	blt.n	8007ae4 <__swhatbuf_r+0x12>
 8007b00:	9a01      	ldr	r2, [sp, #4]
 8007b02:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007b06:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007b0a:	425a      	negs	r2, r3
 8007b0c:	415a      	adcs	r2, r3
 8007b0e:	602a      	str	r2, [r5, #0]
 8007b10:	e7ee      	b.n	8007af0 <__swhatbuf_r+0x1e>
 8007b12:	2340      	movs	r3, #64	; 0x40
 8007b14:	2000      	movs	r0, #0
 8007b16:	6023      	str	r3, [r4, #0]
 8007b18:	b016      	add	sp, #88	; 0x58
 8007b1a:	bd70      	pop	{r4, r5, r6, pc}

08007b1c <__smakebuf_r>:
 8007b1c:	898b      	ldrh	r3, [r1, #12]
 8007b1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b20:	079d      	lsls	r5, r3, #30
 8007b22:	4606      	mov	r6, r0
 8007b24:	460c      	mov	r4, r1
 8007b26:	d507      	bpl.n	8007b38 <__smakebuf_r+0x1c>
 8007b28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007b2c:	6023      	str	r3, [r4, #0]
 8007b2e:	6123      	str	r3, [r4, #16]
 8007b30:	2301      	movs	r3, #1
 8007b32:	6163      	str	r3, [r4, #20]
 8007b34:	b002      	add	sp, #8
 8007b36:	bd70      	pop	{r4, r5, r6, pc}
 8007b38:	ab01      	add	r3, sp, #4
 8007b3a:	466a      	mov	r2, sp
 8007b3c:	f7ff ffc9 	bl	8007ad2 <__swhatbuf_r>
 8007b40:	9900      	ldr	r1, [sp, #0]
 8007b42:	4605      	mov	r5, r0
 8007b44:	4630      	mov	r0, r6
 8007b46:	f7ff f911 	bl	8006d6c <_malloc_r>
 8007b4a:	b948      	cbnz	r0, 8007b60 <__smakebuf_r+0x44>
 8007b4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b50:	059a      	lsls	r2, r3, #22
 8007b52:	d4ef      	bmi.n	8007b34 <__smakebuf_r+0x18>
 8007b54:	f023 0303 	bic.w	r3, r3, #3
 8007b58:	f043 0302 	orr.w	r3, r3, #2
 8007b5c:	81a3      	strh	r3, [r4, #12]
 8007b5e:	e7e3      	b.n	8007b28 <__smakebuf_r+0xc>
 8007b60:	4b0d      	ldr	r3, [pc, #52]	; (8007b98 <__smakebuf_r+0x7c>)
 8007b62:	62b3      	str	r3, [r6, #40]	; 0x28
 8007b64:	89a3      	ldrh	r3, [r4, #12]
 8007b66:	6020      	str	r0, [r4, #0]
 8007b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b6c:	81a3      	strh	r3, [r4, #12]
 8007b6e:	9b00      	ldr	r3, [sp, #0]
 8007b70:	6163      	str	r3, [r4, #20]
 8007b72:	9b01      	ldr	r3, [sp, #4]
 8007b74:	6120      	str	r0, [r4, #16]
 8007b76:	b15b      	cbz	r3, 8007b90 <__smakebuf_r+0x74>
 8007b78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b7c:	4630      	mov	r0, r6
 8007b7e:	f000 fa1b 	bl	8007fb8 <_isatty_r>
 8007b82:	b128      	cbz	r0, 8007b90 <__smakebuf_r+0x74>
 8007b84:	89a3      	ldrh	r3, [r4, #12]
 8007b86:	f023 0303 	bic.w	r3, r3, #3
 8007b8a:	f043 0301 	orr.w	r3, r3, #1
 8007b8e:	81a3      	strh	r3, [r4, #12]
 8007b90:	89a0      	ldrh	r0, [r4, #12]
 8007b92:	4305      	orrs	r5, r0
 8007b94:	81a5      	strh	r5, [r4, #12]
 8007b96:	e7cd      	b.n	8007b34 <__smakebuf_r+0x18>
 8007b98:	08007929 	.word	0x08007929

08007b9c <__malloc_lock>:
 8007b9c:	4801      	ldr	r0, [pc, #4]	; (8007ba4 <__malloc_lock+0x8>)
 8007b9e:	f7ff bf95 	b.w	8007acc <__retarget_lock_acquire_recursive>
 8007ba2:	bf00      	nop
 8007ba4:	200003f5 	.word	0x200003f5

08007ba8 <__malloc_unlock>:
 8007ba8:	4801      	ldr	r0, [pc, #4]	; (8007bb0 <__malloc_unlock+0x8>)
 8007baa:	f7ff bf91 	b.w	8007ad0 <__retarget_lock_release_recursive>
 8007bae:	bf00      	nop
 8007bb0:	200003f5 	.word	0x200003f5

08007bb4 <_realloc_r>:
 8007bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bb8:	4680      	mov	r8, r0
 8007bba:	4614      	mov	r4, r2
 8007bbc:	460e      	mov	r6, r1
 8007bbe:	b921      	cbnz	r1, 8007bca <_realloc_r+0x16>
 8007bc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bc4:	4611      	mov	r1, r2
 8007bc6:	f7ff b8d1 	b.w	8006d6c <_malloc_r>
 8007bca:	b92a      	cbnz	r2, 8007bd8 <_realloc_r+0x24>
 8007bcc:	f7ff f862 	bl	8006c94 <_free_r>
 8007bd0:	4625      	mov	r5, r4
 8007bd2:	4628      	mov	r0, r5
 8007bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bd8:	f000 fa10 	bl	8007ffc <_malloc_usable_size_r>
 8007bdc:	4284      	cmp	r4, r0
 8007bde:	4607      	mov	r7, r0
 8007be0:	d802      	bhi.n	8007be8 <_realloc_r+0x34>
 8007be2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007be6:	d812      	bhi.n	8007c0e <_realloc_r+0x5a>
 8007be8:	4621      	mov	r1, r4
 8007bea:	4640      	mov	r0, r8
 8007bec:	f7ff f8be 	bl	8006d6c <_malloc_r>
 8007bf0:	4605      	mov	r5, r0
 8007bf2:	2800      	cmp	r0, #0
 8007bf4:	d0ed      	beq.n	8007bd2 <_realloc_r+0x1e>
 8007bf6:	42bc      	cmp	r4, r7
 8007bf8:	4622      	mov	r2, r4
 8007bfa:	4631      	mov	r1, r6
 8007bfc:	bf28      	it	cs
 8007bfe:	463a      	movcs	r2, r7
 8007c00:	f7ff f818 	bl	8006c34 <memcpy>
 8007c04:	4631      	mov	r1, r6
 8007c06:	4640      	mov	r0, r8
 8007c08:	f7ff f844 	bl	8006c94 <_free_r>
 8007c0c:	e7e1      	b.n	8007bd2 <_realloc_r+0x1e>
 8007c0e:	4635      	mov	r5, r6
 8007c10:	e7df      	b.n	8007bd2 <_realloc_r+0x1e>

08007c12 <__ssputs_r>:
 8007c12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c16:	688e      	ldr	r6, [r1, #8]
 8007c18:	429e      	cmp	r6, r3
 8007c1a:	4682      	mov	sl, r0
 8007c1c:	460c      	mov	r4, r1
 8007c1e:	4690      	mov	r8, r2
 8007c20:	461f      	mov	r7, r3
 8007c22:	d838      	bhi.n	8007c96 <__ssputs_r+0x84>
 8007c24:	898a      	ldrh	r2, [r1, #12]
 8007c26:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007c2a:	d032      	beq.n	8007c92 <__ssputs_r+0x80>
 8007c2c:	6825      	ldr	r5, [r4, #0]
 8007c2e:	6909      	ldr	r1, [r1, #16]
 8007c30:	eba5 0901 	sub.w	r9, r5, r1
 8007c34:	6965      	ldr	r5, [r4, #20]
 8007c36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c3a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c3e:	3301      	adds	r3, #1
 8007c40:	444b      	add	r3, r9
 8007c42:	106d      	asrs	r5, r5, #1
 8007c44:	429d      	cmp	r5, r3
 8007c46:	bf38      	it	cc
 8007c48:	461d      	movcc	r5, r3
 8007c4a:	0553      	lsls	r3, r2, #21
 8007c4c:	d531      	bpl.n	8007cb2 <__ssputs_r+0xa0>
 8007c4e:	4629      	mov	r1, r5
 8007c50:	f7ff f88c 	bl	8006d6c <_malloc_r>
 8007c54:	4606      	mov	r6, r0
 8007c56:	b950      	cbnz	r0, 8007c6e <__ssputs_r+0x5c>
 8007c58:	230c      	movs	r3, #12
 8007c5a:	f8ca 3000 	str.w	r3, [sl]
 8007c5e:	89a3      	ldrh	r3, [r4, #12]
 8007c60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c64:	81a3      	strh	r3, [r4, #12]
 8007c66:	f04f 30ff 	mov.w	r0, #4294967295
 8007c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c6e:	6921      	ldr	r1, [r4, #16]
 8007c70:	464a      	mov	r2, r9
 8007c72:	f7fe ffdf 	bl	8006c34 <memcpy>
 8007c76:	89a3      	ldrh	r3, [r4, #12]
 8007c78:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c80:	81a3      	strh	r3, [r4, #12]
 8007c82:	6126      	str	r6, [r4, #16]
 8007c84:	6165      	str	r5, [r4, #20]
 8007c86:	444e      	add	r6, r9
 8007c88:	eba5 0509 	sub.w	r5, r5, r9
 8007c8c:	6026      	str	r6, [r4, #0]
 8007c8e:	60a5      	str	r5, [r4, #8]
 8007c90:	463e      	mov	r6, r7
 8007c92:	42be      	cmp	r6, r7
 8007c94:	d900      	bls.n	8007c98 <__ssputs_r+0x86>
 8007c96:	463e      	mov	r6, r7
 8007c98:	6820      	ldr	r0, [r4, #0]
 8007c9a:	4632      	mov	r2, r6
 8007c9c:	4641      	mov	r1, r8
 8007c9e:	f7fe ffd7 	bl	8006c50 <memmove>
 8007ca2:	68a3      	ldr	r3, [r4, #8]
 8007ca4:	1b9b      	subs	r3, r3, r6
 8007ca6:	60a3      	str	r3, [r4, #8]
 8007ca8:	6823      	ldr	r3, [r4, #0]
 8007caa:	4433      	add	r3, r6
 8007cac:	6023      	str	r3, [r4, #0]
 8007cae:	2000      	movs	r0, #0
 8007cb0:	e7db      	b.n	8007c6a <__ssputs_r+0x58>
 8007cb2:	462a      	mov	r2, r5
 8007cb4:	f7ff ff7e 	bl	8007bb4 <_realloc_r>
 8007cb8:	4606      	mov	r6, r0
 8007cba:	2800      	cmp	r0, #0
 8007cbc:	d1e1      	bne.n	8007c82 <__ssputs_r+0x70>
 8007cbe:	6921      	ldr	r1, [r4, #16]
 8007cc0:	4650      	mov	r0, sl
 8007cc2:	f7fe ffe7 	bl	8006c94 <_free_r>
 8007cc6:	e7c7      	b.n	8007c58 <__ssputs_r+0x46>

08007cc8 <_svfiprintf_r>:
 8007cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ccc:	4698      	mov	r8, r3
 8007cce:	898b      	ldrh	r3, [r1, #12]
 8007cd0:	061b      	lsls	r3, r3, #24
 8007cd2:	b09d      	sub	sp, #116	; 0x74
 8007cd4:	4607      	mov	r7, r0
 8007cd6:	460d      	mov	r5, r1
 8007cd8:	4614      	mov	r4, r2
 8007cda:	d50e      	bpl.n	8007cfa <_svfiprintf_r+0x32>
 8007cdc:	690b      	ldr	r3, [r1, #16]
 8007cde:	b963      	cbnz	r3, 8007cfa <_svfiprintf_r+0x32>
 8007ce0:	2140      	movs	r1, #64	; 0x40
 8007ce2:	f7ff f843 	bl	8006d6c <_malloc_r>
 8007ce6:	6028      	str	r0, [r5, #0]
 8007ce8:	6128      	str	r0, [r5, #16]
 8007cea:	b920      	cbnz	r0, 8007cf6 <_svfiprintf_r+0x2e>
 8007cec:	230c      	movs	r3, #12
 8007cee:	603b      	str	r3, [r7, #0]
 8007cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8007cf4:	e0d1      	b.n	8007e9a <_svfiprintf_r+0x1d2>
 8007cf6:	2340      	movs	r3, #64	; 0x40
 8007cf8:	616b      	str	r3, [r5, #20]
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	9309      	str	r3, [sp, #36]	; 0x24
 8007cfe:	2320      	movs	r3, #32
 8007d00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d04:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d08:	2330      	movs	r3, #48	; 0x30
 8007d0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007eb4 <_svfiprintf_r+0x1ec>
 8007d0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d12:	f04f 0901 	mov.w	r9, #1
 8007d16:	4623      	mov	r3, r4
 8007d18:	469a      	mov	sl, r3
 8007d1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d1e:	b10a      	cbz	r2, 8007d24 <_svfiprintf_r+0x5c>
 8007d20:	2a25      	cmp	r2, #37	; 0x25
 8007d22:	d1f9      	bne.n	8007d18 <_svfiprintf_r+0x50>
 8007d24:	ebba 0b04 	subs.w	fp, sl, r4
 8007d28:	d00b      	beq.n	8007d42 <_svfiprintf_r+0x7a>
 8007d2a:	465b      	mov	r3, fp
 8007d2c:	4622      	mov	r2, r4
 8007d2e:	4629      	mov	r1, r5
 8007d30:	4638      	mov	r0, r7
 8007d32:	f7ff ff6e 	bl	8007c12 <__ssputs_r>
 8007d36:	3001      	adds	r0, #1
 8007d38:	f000 80aa 	beq.w	8007e90 <_svfiprintf_r+0x1c8>
 8007d3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d3e:	445a      	add	r2, fp
 8007d40:	9209      	str	r2, [sp, #36]	; 0x24
 8007d42:	f89a 3000 	ldrb.w	r3, [sl]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	f000 80a2 	beq.w	8007e90 <_svfiprintf_r+0x1c8>
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8007d52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d56:	f10a 0a01 	add.w	sl, sl, #1
 8007d5a:	9304      	str	r3, [sp, #16]
 8007d5c:	9307      	str	r3, [sp, #28]
 8007d5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d62:	931a      	str	r3, [sp, #104]	; 0x68
 8007d64:	4654      	mov	r4, sl
 8007d66:	2205      	movs	r2, #5
 8007d68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d6c:	4851      	ldr	r0, [pc, #324]	; (8007eb4 <_svfiprintf_r+0x1ec>)
 8007d6e:	f7f8 fa37 	bl	80001e0 <memchr>
 8007d72:	9a04      	ldr	r2, [sp, #16]
 8007d74:	b9d8      	cbnz	r0, 8007dae <_svfiprintf_r+0xe6>
 8007d76:	06d0      	lsls	r0, r2, #27
 8007d78:	bf44      	itt	mi
 8007d7a:	2320      	movmi	r3, #32
 8007d7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d80:	0711      	lsls	r1, r2, #28
 8007d82:	bf44      	itt	mi
 8007d84:	232b      	movmi	r3, #43	; 0x2b
 8007d86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d8a:	f89a 3000 	ldrb.w	r3, [sl]
 8007d8e:	2b2a      	cmp	r3, #42	; 0x2a
 8007d90:	d015      	beq.n	8007dbe <_svfiprintf_r+0xf6>
 8007d92:	9a07      	ldr	r2, [sp, #28]
 8007d94:	4654      	mov	r4, sl
 8007d96:	2000      	movs	r0, #0
 8007d98:	f04f 0c0a 	mov.w	ip, #10
 8007d9c:	4621      	mov	r1, r4
 8007d9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007da2:	3b30      	subs	r3, #48	; 0x30
 8007da4:	2b09      	cmp	r3, #9
 8007da6:	d94e      	bls.n	8007e46 <_svfiprintf_r+0x17e>
 8007da8:	b1b0      	cbz	r0, 8007dd8 <_svfiprintf_r+0x110>
 8007daa:	9207      	str	r2, [sp, #28]
 8007dac:	e014      	b.n	8007dd8 <_svfiprintf_r+0x110>
 8007dae:	eba0 0308 	sub.w	r3, r0, r8
 8007db2:	fa09 f303 	lsl.w	r3, r9, r3
 8007db6:	4313      	orrs	r3, r2
 8007db8:	9304      	str	r3, [sp, #16]
 8007dba:	46a2      	mov	sl, r4
 8007dbc:	e7d2      	b.n	8007d64 <_svfiprintf_r+0x9c>
 8007dbe:	9b03      	ldr	r3, [sp, #12]
 8007dc0:	1d19      	adds	r1, r3, #4
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	9103      	str	r1, [sp, #12]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	bfbb      	ittet	lt
 8007dca:	425b      	neglt	r3, r3
 8007dcc:	f042 0202 	orrlt.w	r2, r2, #2
 8007dd0:	9307      	strge	r3, [sp, #28]
 8007dd2:	9307      	strlt	r3, [sp, #28]
 8007dd4:	bfb8      	it	lt
 8007dd6:	9204      	strlt	r2, [sp, #16]
 8007dd8:	7823      	ldrb	r3, [r4, #0]
 8007dda:	2b2e      	cmp	r3, #46	; 0x2e
 8007ddc:	d10c      	bne.n	8007df8 <_svfiprintf_r+0x130>
 8007dde:	7863      	ldrb	r3, [r4, #1]
 8007de0:	2b2a      	cmp	r3, #42	; 0x2a
 8007de2:	d135      	bne.n	8007e50 <_svfiprintf_r+0x188>
 8007de4:	9b03      	ldr	r3, [sp, #12]
 8007de6:	1d1a      	adds	r2, r3, #4
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	9203      	str	r2, [sp, #12]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	bfb8      	it	lt
 8007df0:	f04f 33ff 	movlt.w	r3, #4294967295
 8007df4:	3402      	adds	r4, #2
 8007df6:	9305      	str	r3, [sp, #20]
 8007df8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007ec4 <_svfiprintf_r+0x1fc>
 8007dfc:	7821      	ldrb	r1, [r4, #0]
 8007dfe:	2203      	movs	r2, #3
 8007e00:	4650      	mov	r0, sl
 8007e02:	f7f8 f9ed 	bl	80001e0 <memchr>
 8007e06:	b140      	cbz	r0, 8007e1a <_svfiprintf_r+0x152>
 8007e08:	2340      	movs	r3, #64	; 0x40
 8007e0a:	eba0 000a 	sub.w	r0, r0, sl
 8007e0e:	fa03 f000 	lsl.w	r0, r3, r0
 8007e12:	9b04      	ldr	r3, [sp, #16]
 8007e14:	4303      	orrs	r3, r0
 8007e16:	3401      	adds	r4, #1
 8007e18:	9304      	str	r3, [sp, #16]
 8007e1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e1e:	4826      	ldr	r0, [pc, #152]	; (8007eb8 <_svfiprintf_r+0x1f0>)
 8007e20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e24:	2206      	movs	r2, #6
 8007e26:	f7f8 f9db 	bl	80001e0 <memchr>
 8007e2a:	2800      	cmp	r0, #0
 8007e2c:	d038      	beq.n	8007ea0 <_svfiprintf_r+0x1d8>
 8007e2e:	4b23      	ldr	r3, [pc, #140]	; (8007ebc <_svfiprintf_r+0x1f4>)
 8007e30:	bb1b      	cbnz	r3, 8007e7a <_svfiprintf_r+0x1b2>
 8007e32:	9b03      	ldr	r3, [sp, #12]
 8007e34:	3307      	adds	r3, #7
 8007e36:	f023 0307 	bic.w	r3, r3, #7
 8007e3a:	3308      	adds	r3, #8
 8007e3c:	9303      	str	r3, [sp, #12]
 8007e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e40:	4433      	add	r3, r6
 8007e42:	9309      	str	r3, [sp, #36]	; 0x24
 8007e44:	e767      	b.n	8007d16 <_svfiprintf_r+0x4e>
 8007e46:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e4a:	460c      	mov	r4, r1
 8007e4c:	2001      	movs	r0, #1
 8007e4e:	e7a5      	b.n	8007d9c <_svfiprintf_r+0xd4>
 8007e50:	2300      	movs	r3, #0
 8007e52:	3401      	adds	r4, #1
 8007e54:	9305      	str	r3, [sp, #20]
 8007e56:	4619      	mov	r1, r3
 8007e58:	f04f 0c0a 	mov.w	ip, #10
 8007e5c:	4620      	mov	r0, r4
 8007e5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e62:	3a30      	subs	r2, #48	; 0x30
 8007e64:	2a09      	cmp	r2, #9
 8007e66:	d903      	bls.n	8007e70 <_svfiprintf_r+0x1a8>
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d0c5      	beq.n	8007df8 <_svfiprintf_r+0x130>
 8007e6c:	9105      	str	r1, [sp, #20]
 8007e6e:	e7c3      	b.n	8007df8 <_svfiprintf_r+0x130>
 8007e70:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e74:	4604      	mov	r4, r0
 8007e76:	2301      	movs	r3, #1
 8007e78:	e7f0      	b.n	8007e5c <_svfiprintf_r+0x194>
 8007e7a:	ab03      	add	r3, sp, #12
 8007e7c:	9300      	str	r3, [sp, #0]
 8007e7e:	462a      	mov	r2, r5
 8007e80:	4b0f      	ldr	r3, [pc, #60]	; (8007ec0 <_svfiprintf_r+0x1f8>)
 8007e82:	a904      	add	r1, sp, #16
 8007e84:	4638      	mov	r0, r7
 8007e86:	f3af 8000 	nop.w
 8007e8a:	1c42      	adds	r2, r0, #1
 8007e8c:	4606      	mov	r6, r0
 8007e8e:	d1d6      	bne.n	8007e3e <_svfiprintf_r+0x176>
 8007e90:	89ab      	ldrh	r3, [r5, #12]
 8007e92:	065b      	lsls	r3, r3, #25
 8007e94:	f53f af2c 	bmi.w	8007cf0 <_svfiprintf_r+0x28>
 8007e98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e9a:	b01d      	add	sp, #116	; 0x74
 8007e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ea0:	ab03      	add	r3, sp, #12
 8007ea2:	9300      	str	r3, [sp, #0]
 8007ea4:	462a      	mov	r2, r5
 8007ea6:	4b06      	ldr	r3, [pc, #24]	; (8007ec0 <_svfiprintf_r+0x1f8>)
 8007ea8:	a904      	add	r1, sp, #16
 8007eaa:	4638      	mov	r0, r7
 8007eac:	f7ff f99a 	bl	80071e4 <_printf_i>
 8007eb0:	e7eb      	b.n	8007e8a <_svfiprintf_r+0x1c2>
 8007eb2:	bf00      	nop
 8007eb4:	08008798 	.word	0x08008798
 8007eb8:	080087a2 	.word	0x080087a2
 8007ebc:	00000000 	.word	0x00000000
 8007ec0:	08007c13 	.word	0x08007c13
 8007ec4:	0800879e 	.word	0x0800879e

08007ec8 <__sread>:
 8007ec8:	b510      	push	{r4, lr}
 8007eca:	460c      	mov	r4, r1
 8007ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ed0:	f000 f89c 	bl	800800c <_read_r>
 8007ed4:	2800      	cmp	r0, #0
 8007ed6:	bfab      	itete	ge
 8007ed8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007eda:	89a3      	ldrhlt	r3, [r4, #12]
 8007edc:	181b      	addge	r3, r3, r0
 8007ede:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ee2:	bfac      	ite	ge
 8007ee4:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ee6:	81a3      	strhlt	r3, [r4, #12]
 8007ee8:	bd10      	pop	{r4, pc}

08007eea <__swrite>:
 8007eea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007eee:	461f      	mov	r7, r3
 8007ef0:	898b      	ldrh	r3, [r1, #12]
 8007ef2:	05db      	lsls	r3, r3, #23
 8007ef4:	4605      	mov	r5, r0
 8007ef6:	460c      	mov	r4, r1
 8007ef8:	4616      	mov	r6, r2
 8007efa:	d505      	bpl.n	8007f08 <__swrite+0x1e>
 8007efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f00:	2302      	movs	r3, #2
 8007f02:	2200      	movs	r2, #0
 8007f04:	f000 f868 	bl	8007fd8 <_lseek_r>
 8007f08:	89a3      	ldrh	r3, [r4, #12]
 8007f0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f12:	81a3      	strh	r3, [r4, #12]
 8007f14:	4632      	mov	r2, r6
 8007f16:	463b      	mov	r3, r7
 8007f18:	4628      	mov	r0, r5
 8007f1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f1e:	f000 b817 	b.w	8007f50 <_write_r>

08007f22 <__sseek>:
 8007f22:	b510      	push	{r4, lr}
 8007f24:	460c      	mov	r4, r1
 8007f26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f2a:	f000 f855 	bl	8007fd8 <_lseek_r>
 8007f2e:	1c43      	adds	r3, r0, #1
 8007f30:	89a3      	ldrh	r3, [r4, #12]
 8007f32:	bf15      	itete	ne
 8007f34:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f3e:	81a3      	strheq	r3, [r4, #12]
 8007f40:	bf18      	it	ne
 8007f42:	81a3      	strhne	r3, [r4, #12]
 8007f44:	bd10      	pop	{r4, pc}

08007f46 <__sclose>:
 8007f46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f4a:	f000 b813 	b.w	8007f74 <_close_r>
	...

08007f50 <_write_r>:
 8007f50:	b538      	push	{r3, r4, r5, lr}
 8007f52:	4d07      	ldr	r5, [pc, #28]	; (8007f70 <_write_r+0x20>)
 8007f54:	4604      	mov	r4, r0
 8007f56:	4608      	mov	r0, r1
 8007f58:	4611      	mov	r1, r2
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	602a      	str	r2, [r5, #0]
 8007f5e:	461a      	mov	r2, r3
 8007f60:	f7f8 fd0f 	bl	8000982 <_write>
 8007f64:	1c43      	adds	r3, r0, #1
 8007f66:	d102      	bne.n	8007f6e <_write_r+0x1e>
 8007f68:	682b      	ldr	r3, [r5, #0]
 8007f6a:	b103      	cbz	r3, 8007f6e <_write_r+0x1e>
 8007f6c:	6023      	str	r3, [r4, #0]
 8007f6e:	bd38      	pop	{r3, r4, r5, pc}
 8007f70:	200003f8 	.word	0x200003f8

08007f74 <_close_r>:
 8007f74:	b538      	push	{r3, r4, r5, lr}
 8007f76:	4d06      	ldr	r5, [pc, #24]	; (8007f90 <_close_r+0x1c>)
 8007f78:	2300      	movs	r3, #0
 8007f7a:	4604      	mov	r4, r0
 8007f7c:	4608      	mov	r0, r1
 8007f7e:	602b      	str	r3, [r5, #0]
 8007f80:	f7f8 fd1b 	bl	80009ba <_close>
 8007f84:	1c43      	adds	r3, r0, #1
 8007f86:	d102      	bne.n	8007f8e <_close_r+0x1a>
 8007f88:	682b      	ldr	r3, [r5, #0]
 8007f8a:	b103      	cbz	r3, 8007f8e <_close_r+0x1a>
 8007f8c:	6023      	str	r3, [r4, #0]
 8007f8e:	bd38      	pop	{r3, r4, r5, pc}
 8007f90:	200003f8 	.word	0x200003f8

08007f94 <_fstat_r>:
 8007f94:	b538      	push	{r3, r4, r5, lr}
 8007f96:	4d07      	ldr	r5, [pc, #28]	; (8007fb4 <_fstat_r+0x20>)
 8007f98:	2300      	movs	r3, #0
 8007f9a:	4604      	mov	r4, r0
 8007f9c:	4608      	mov	r0, r1
 8007f9e:	4611      	mov	r1, r2
 8007fa0:	602b      	str	r3, [r5, #0]
 8007fa2:	f7f8 fd16 	bl	80009d2 <_fstat>
 8007fa6:	1c43      	adds	r3, r0, #1
 8007fa8:	d102      	bne.n	8007fb0 <_fstat_r+0x1c>
 8007faa:	682b      	ldr	r3, [r5, #0]
 8007fac:	b103      	cbz	r3, 8007fb0 <_fstat_r+0x1c>
 8007fae:	6023      	str	r3, [r4, #0]
 8007fb0:	bd38      	pop	{r3, r4, r5, pc}
 8007fb2:	bf00      	nop
 8007fb4:	200003f8 	.word	0x200003f8

08007fb8 <_isatty_r>:
 8007fb8:	b538      	push	{r3, r4, r5, lr}
 8007fba:	4d06      	ldr	r5, [pc, #24]	; (8007fd4 <_isatty_r+0x1c>)
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	4604      	mov	r4, r0
 8007fc0:	4608      	mov	r0, r1
 8007fc2:	602b      	str	r3, [r5, #0]
 8007fc4:	f7f8 fd15 	bl	80009f2 <_isatty>
 8007fc8:	1c43      	adds	r3, r0, #1
 8007fca:	d102      	bne.n	8007fd2 <_isatty_r+0x1a>
 8007fcc:	682b      	ldr	r3, [r5, #0]
 8007fce:	b103      	cbz	r3, 8007fd2 <_isatty_r+0x1a>
 8007fd0:	6023      	str	r3, [r4, #0]
 8007fd2:	bd38      	pop	{r3, r4, r5, pc}
 8007fd4:	200003f8 	.word	0x200003f8

08007fd8 <_lseek_r>:
 8007fd8:	b538      	push	{r3, r4, r5, lr}
 8007fda:	4d07      	ldr	r5, [pc, #28]	; (8007ff8 <_lseek_r+0x20>)
 8007fdc:	4604      	mov	r4, r0
 8007fde:	4608      	mov	r0, r1
 8007fe0:	4611      	mov	r1, r2
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	602a      	str	r2, [r5, #0]
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	f7f8 fd0e 	bl	8000a08 <_lseek>
 8007fec:	1c43      	adds	r3, r0, #1
 8007fee:	d102      	bne.n	8007ff6 <_lseek_r+0x1e>
 8007ff0:	682b      	ldr	r3, [r5, #0]
 8007ff2:	b103      	cbz	r3, 8007ff6 <_lseek_r+0x1e>
 8007ff4:	6023      	str	r3, [r4, #0]
 8007ff6:	bd38      	pop	{r3, r4, r5, pc}
 8007ff8:	200003f8 	.word	0x200003f8

08007ffc <_malloc_usable_size_r>:
 8007ffc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008000:	1f18      	subs	r0, r3, #4
 8008002:	2b00      	cmp	r3, #0
 8008004:	bfbc      	itt	lt
 8008006:	580b      	ldrlt	r3, [r1, r0]
 8008008:	18c0      	addlt	r0, r0, r3
 800800a:	4770      	bx	lr

0800800c <_read_r>:
 800800c:	b538      	push	{r3, r4, r5, lr}
 800800e:	4d07      	ldr	r5, [pc, #28]	; (800802c <_read_r+0x20>)
 8008010:	4604      	mov	r4, r0
 8008012:	4608      	mov	r0, r1
 8008014:	4611      	mov	r1, r2
 8008016:	2200      	movs	r2, #0
 8008018:	602a      	str	r2, [r5, #0]
 800801a:	461a      	mov	r2, r3
 800801c:	f7f8 fc94 	bl	8000948 <_read>
 8008020:	1c43      	adds	r3, r0, #1
 8008022:	d102      	bne.n	800802a <_read_r+0x1e>
 8008024:	682b      	ldr	r3, [r5, #0]
 8008026:	b103      	cbz	r3, 800802a <_read_r+0x1e>
 8008028:	6023      	str	r3, [r4, #0]
 800802a:	bd38      	pop	{r3, r4, r5, pc}
 800802c:	200003f8 	.word	0x200003f8

08008030 <_init>:
 8008030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008032:	bf00      	nop
 8008034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008036:	bc08      	pop	{r3}
 8008038:	469e      	mov	lr, r3
 800803a:	4770      	bx	lr

0800803c <_fini>:
 800803c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800803e:	bf00      	nop
 8008040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008042:	bc08      	pop	{r3}
 8008044:	469e      	mov	lr, r3
 8008046:	4770      	bx	lr
